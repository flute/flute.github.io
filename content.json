{"pages":[{"title":"About","text":"简介 Ludis 94年空巢老人 自动化（信息与控制系统）专业 为者常成，行者常至 技能 前端：基于Html(5)、CSS(3)、Javascript的PC页面或H5页面开发。 后端：熟悉Linux/Ubuntu/centos下基于Nodejs/PHP+MySQL/MongoDB+Redis后端开发。python/golang轻度使用。 移动端：基于react native的Android/iOS应用开发，精通小程序、微信公众号开发。flutter学习中。 桌面端：基于Electron的win/macOS/Linux的跨平台应用开发。 区块链：了解Go语言的底层开发，熟悉ERC20 Token发行，精通基于truffle（solidity）+react的以太坊DAPP开发。熟悉ETH、NAS、NEM、WAVES等公链的开发。 硬件：电路板焊接、烧制，树莓派B+应用开发，ARM板简单开发，熟悉Labview程序设计开发、CAD绘图。熟悉车床的打孔、切割等操作。精通PC机的装配，DIY及各种杀马特光污染，精通Mac的拆装/修理😏 前端框架/库：Vue全家桶（vue-cli+vuex+vue-router+ivew…），react/react native，Electron，jQuery/jQuery mobile，framework7，bootstarp，Echarts3，webpack，百度地图、百度鹰眼相关库… 后端框架/库：CI（PHP），Express/restify（Nodejs）,sequelizejs（nodejs ORM），log4js（nodejs logs），pm2进程守护… 厨艺：精通大盘鸡、蒜薹/青椒肉丝、番茄炒茄丁/鸡蛋等家常菜，清汤面、炒面、拌面的制作。 游戏：精通红警、流星蝴蝶剑、魔兽3、剑仙情缘等经典游戏，LOL五年老玩家（老OMG死忠粉），吃鸡快递员（端游+手游），阴阳师（已弃坑，属实肝不动了）… 电影/剧集：精通豆瓣前五百电影/电视剧的观看，权利的游戏+肖生克的救赎分属剧集/电影第一，不接受反驳😎。近几年国产好作品增多，期待更多优秀的国产影视。 其他：自行理发一年多，精通各类男士造型及发胶/发蜡的使用。佛系炒币，佛系挖矿。精通股票/基金/加密货币的高买低卖，为国接盘。熟悉装213的流程，以上。 博客 起始：2013.10—SAE+Wordpress 迁移：2015.09—Vps+Wordpress 新的开始：2016.07—Vps+Ghost 新的新的开始: 2021.09-Hexo+Gitpage 联系方式 Email：service@ldsun.com Weibo：@ Ludis WeChat/QQ: 552452006","link":"/about/index.html"},{"title":"Archives","text":"","link":"/archives/index.html"}],"posts":[{"title":"2016总结","text":"2016过去的这一年，算是一个转折点吧，学生时代的终结，开始工作了。毕业后的几个月，也会经常想起上学时的很多美好，日常用语也多了句“我在学校的时候…”，我想所有刚离校的同学有共感，毕竟伴随了16年的读书模式要转换了，虽然在学校时也会出去做外包，去实习，但当全职工作后还是很回念学生时代。 说是16年的年度总结，其实多半是下半年的一些变化。以前我觉得总结什么的，都是给别人看的，形式主义。但工作的半年我转变了自己的看法，我尝试在工作的每周、每月梳理下，在每个时间段内，自己学到的新东西以及欠缺的东西，这样就有一种看着自己不断成长的感觉。不然你可能只是觉得自己好像增长了，好像有些问题被人诟病，但有不明确的知道哪些点增长了，哪些还在拖后腿。 既然是贴着程序猿的标签，那年度总结就分为生活和技术两部分吧： 生活 虽然学的是自动化专业，但是转战互联网其实从大二就开始了，虽然家里人都希望去稳定的国企，但他们也尊重我的选择，所以毕业后之久投身IT行业有惊无险。前半年的毕业找工作期也是经历了很多波折，换了好几个offer。。虽然一波三折，但是吃一堑长一智，记得任何时候都有必要签书面合同！！！不要因为对方是熟人而口头承诺！！！这是对自己的基本保障。 get 自己理发技能，从6月份开始远离理发店，到目前已经半年时间自行理发了，虽然插曲不断，总归做了件自己一直想做的事~ 复习巩固做饭技能，高中有时候自己做饭，但基本是以面食为主，菜很少做。上了大学就完全荒废了，这半年尝试了一些新菜，现在有朋友来可以上桌招待了，会做饭可以大幅提高生活的幸福度！ 体重还是持续在125-130之间徘徊，这个状况持续了五六年了…是真的吃不胖了，明年换个方式增重 买到了自己想买的东西，这里我采用而一个不错的方法：每月20%的工资拿出来消费，可以预支，但预支额度不超过一年总额。例如月薪10k，想买个8k的相机，那么你得攒4个月的消费额，本年度最多购买2.4w的物品。 看了很多好看的电影、美国、国产电视剧，《权利的游戏》又得等一年，《黑客军团》第二季就看了几集，没时间看…《西部世界》追着看完了，很不错。《长城》虽然剧情让人诟病，但创新值得肯定，我支持一票。最近在看《鬼吹灯之精绝古城》，作为七卷小说都看完的老粉，很满意。还有很多看的东西，不一一评价了。 技术 毕业前一直在纠结前端和php选哪个，最终投身JS大坑，远离了最好的语言php，事实上我觉的这个选择很正确 读了《JS权威指南》《JS编程艺术》《响应式web设计》，虽然js写的依旧烂，但现在对JS有了亲切感 React Native：做了半个ios app，做了半个主要是时间不过，创业公司大家都懂。但主要的RN组件基本都用过了，可以用RN开发简单的APP了。 Electron：基于framework7框架做了两个webApp，然后用electron打包了Mac和Windows两个平台的包，这个算是今年做的最久也最满意的作品，对electron用的比较熟悉了。 Nodejs：基于express、MySQL、material design做了一个调查问卷系统，入坑nodejs后端开发 项目中用到的一些东西： 环信WebIm即时通讯：自己根据SDK手写了包括聊天、图片、文件传输、localstorage做聊天存储等，虽然过程艰苦，但很享受。 百度地图、鹰眼轨迹：项目中用到很多，基于地图做了无数二次开发…我感觉项目中一般功能是基于地图的2333：实时位置、历史轨迹、区域分化、区域/点绘制等 Echarts3：由于要做一部分数据可视化，研究了下D3.js，学习曲线有点高，就转战Echarts3，强行改造Echarts3+百度地图map做实时报警信息的展示。讲道理，echarts真的是用来展示静态数据的，搞动态数据展示真的是遭天谴。 用了framework7、metarial deaigin两个前端框架，framework7也是基本上用烂了，比较熟悉。metarial deaigin是真的好看，可惜IE兼容性有问题。 2017 健身、健身、健身 增重、增重、增重 多做好吃的 留长发？待定… 多看些除技术之外的书 买一些好玩的东西 敲至少三个 JS 源码，继续全栈之路 看电影、电视剧 出去浪 人际关系？就这样吧，懒得管理…","link":"/2016/12/31/2016%E6%80%BB%E7%BB%93/"},{"title":"20了\\(^o^)&#x2F;~","text":"今天20了，00:40开始写博客，真是上瘾。哈哈哈~祝贺一下，想象下30岁时看到此文作何感想…… 20了： 开始体会时间，依旧恋物，懂得珍惜 大学两年，成长不少，学会取舍 理解父母，更加感恩，逐渐温情 遇到优秀的人，改变我的轨迹，感谢相遇 找到自己的兴趣，乐此不疲 性情依旧在发育，有留有去有收纳 责任感增加，对家庭的，别人的 感谢所有的经历，好的，坏的 有一个真心想管理好的团队 愿望： 爸爸妈妈爷爷奶奶姐姐都健健康康的+我 逢考必过 在自己的兴趣上有所作为 一个我所期待的好团队 一个强健的体魄 和睦的家庭 不错的人脉关系 一如既往的潇洒 好人一生平安 想到这些就写下来了看会世界杯就睡觉，哈哈自控原理求过啊！ （PS：舍友做的礼物。。我就不多说了）","link":"/2014/06/24/20%E4%BA%86-o/"},{"title":"9GAG.com 内容抓取","text":"抓取说明1、总共52个分类。2、数据获取url：https://9gag.com/v1/group-posts/group/cute/type/hot?c=10说明：cute 为分类。首次获取只需传入 c=10 即为前十条数据。下次请求附带上次请求返回的 nextCursor 参数即可。每次请求返回10条数据。3、每个资源的属性：唯一标志： id资源描述： titile4、资源分三种类型，根据images属性下的字段区分 image 属性：image460 image700 gif 属性：image460 image460sv image460svwm image700 说明：image460sv image460svwm 两个属性下的 hasAudio 字段为0，及为无声，即为GIF video 属性：image460 image460sv image460svwm image700 说明：image460sv image460svwm 两个属性下的 hasAudio 字段为1，及为有声，即为video 5、内容字段image460 : { height: 258 url: \"https://img-9gag-fun.9cache.com/photo/aq73Yrj_460s.jpg\" webpUrl: \"https://img-9gag-fun.9cache.com/photo/aq73Yrj_460swp.webp\" width: 460 } image460sv: { duration: 32 h265Url: “https://img-9gag-fun.9cache.com/photo/aq73Yrj_460svh265.mp4&quot; hasAudio: 1 height: 258 url: “https://img-9gag-fun.9cache.com/photo/aq73Yrj_460sv.mp4&quot; vp9Url: “https://img-9gag-fun.9cache.com/photo/aq73Yrj_460svvp9.webm&quot; width: 460} image460svwm : { duration: 32 hasAudio: 1 height: 258 url: “https://img-9gag-fun.9cache.com/photo/aq73Yrj_460svwm.webm&quot; width: 460} image700 : { height: 258 url: “https://img-9gag-fun.9cache.com/photo/aq73Yrj_460s.jpg&quot; width: 460} 6、分类数组[ 'funny', 'cute', 'anime-manga', 'ask9gag', 'awesome', 'basketball', 'car', 'comic', 'cosplay', 'country', 'classicalartmemes', 'imadedis', 'drawing', 'animefanart', 'food', 'football', 'fortnite', 'gaming', 'gif', 'girl', 'girly', 'guy', 'history', 'horror', 'home', 'kpop', 'leagueoflegends', 'lego', 'movie-tv', 'music', 'overwatch', 'pcmr', 'photography', 'pokemon', 'politics', 'relationship', 'pubg', 'roastme', 'savage', 'starwars', 'satisfying', 'school', 'science', 'superhero', 'surrealmemes', 'sport', 'travel', 'timely', 'video', 'warhammer', 'wallpaper', 'wtf']核心代码：/** 获取内容 /const get9gagList = (category, offset, next) =&gt; { var options = { method: 'GET', url: `https://9gag.com/v1/group-posts/group/${category}/type/${type}?` }; if (offset == ‘’) { options.url += 'c=10' } else if (offset == -1) { return next('complete') } else { options.url += offset } request(options, function (error, response, body) { if (error) { next(error, null) return } let data = JSON.parse(body) if (data &amp;amp;&amp;amp; data.data &amp;amp;&amp;amp; data.data.posts &amp;amp;&amp;amp; data.data.posts.length) { log.info(`获取 ${category} 视频列表成功 offset ${offset? offset: 'c=10'}`, data.data.posts.length) //videoList.push(data.data) videoList = videoList.concat(data.data.posts) return next(null, category, data.data.nextCursor) } else { log.info(`获取 ${category} 内容为空 offset ${offset}，所有数据获取完毕 。`) return next(null, category, -1) } }); } /** 批量获取内容列表 /const getMultiList = async category =&gt; { // 每页依次队列获取 let actions = [async.constant(category, ‘’)] for (let i = 1; i &lt;= pageCount; i++) { actions.push(get9gagList) } return new Promise((resolve, reject) =&gt; { async.waterfall(actions, function (err, result) { log.info(`finish crawler ${category} videos`, err, videoList.length) //if (err) return reject(new Error(err)) if (err) log.info(err) return resolve(videoList) }) })} /** 下载视频/图片 /const download = (category, media, next) =&gt; { //return new Promise((resolve, reject) =&gt; { let isExist = isFileExist(media.id) if (isExist) return next(null) let filePath if (media.type == ‘video’) { filePath = `${videoDlPath}/${media.id}.mp4` } else if (media.type == ‘img’) { filePath = `${imgDlPath}/${media.id}.jpg` } else return next(null) request(media.url) .on('response', function (res) { // create file write stream var fws = fs.createWriteStream(filePath); // setup piping res.pipe(fws); // finish res.on('end', function (e) { log.info(`finish download ${category} ${filePath}`) saveJsonData(media.type, { id: media.id, category: category, desc: media.desc }) if (media.type == 'video') videoAmount++ else imgAmount++ //return resolve(filePath) return next(null) }); // error handler res.on('error', err =&amp;gt; { log.error('download error', err) //return reject(err) return next(null) }) }); //})} /** 视频是否已下载 /const isFileExist = id =&gt; { let videoPath = ${videoDlPath}/${id}.mp4 let imgPath = ${imgDlPath}/${id}.jpg if (fs.existsSync(videoPath)) { log.info('video file exist', videoPath) return true } else if (fs.existsSync(imgPath)) { log.info('img file exist', imgPath) return true } else return false} /** 视频下载成功后，实时更新json数据。防止程序中途奔溃后视频信息未保存 /const saveJsonData = (type, data) =&gt; { try { // 读取已有json信息 let jsonFile = type == 'video' ? videoJsonPath : imgJsonPath jsonFile += `/data.json` let jsonData = [] if (fs.existsSync(jsonFile)) { fileData = fs.readFileSync(jsonFile, { encoding: 'utf8' }) if (fileData) { jsonData = JSON.parse(fileData) } } // 写入 jsonData.push(data) fs.writeFileSync(jsonFile, JSON.stringify(jsonData)); } catch (error) { log.error('写入json文件失败', data) } } /** 将无声MP4转为gif图 /const convertVideoToGift = () =&gt; { let videoPath = ‘./233.mp4’ var command = ffmpeg(videoPath) .format('gif'); command.save(‘./233.gif’);} /** 内容筛选，只下载有声视频 /const mediaFilter = data =&gt; { let results = [], videos = [], imgs = [] for (let i = 0; i &lt; data.length; i++) { let video = data[i] if (video.images.image460sv &amp;amp;&amp;amp; video.images.image460sv.hasAudio &amp;amp;&amp;amp; video.images.image460sv.url) { // 有声视频 videos.push({ id: video.id, type: 'video', url: video.images.image460sv.url, desc: video.title }) } else if (!video.images.image460sv &amp;amp;&amp;amp; video.images.image460.url) { // 图片 imgs.push({ id: video.id, type: 'img', url: video.images.image460.url, desc: video.title }) } } return { results: results.concat(videos, imgs), video: videos.length, img: imgs.length }} /** 每个分类的抓取任务 /const task = async (category, next) =&gt; { let videoLists = await getMultiList(category) videoList = [] log.info(‘数据获取成功’, videoLists.length) let { results: videos, video, img } = mediaFilter(videoLists) log.info(${videoLists.length} 个内容，有声视频共 ${video} 个，图片共 ${img} 个) let dlActions = videos.map(video =&gt; next =&gt; { return download(category, video, next) }) async.series(dlActions, (err, result) =&gt; { if (err) { log.error(`finish【${category}】all download error`, error) return next(error) } log.info(`finish【${category}】all downloads success`, result.filter(item =&amp;gt; item).length) return next(null) })} const main = () =&gt; { let actions = category.map(item =&amp;gt; next =&amp;gt; { return task(item, next) }) return new Promise((resolve, reject) =&amp;gt; { async.series(actions, function (err, result) { if (err) return reject(new Error(err)) return resolve(result) }) }) } main() .then(result =&gt; { log.info(awsome！ all ${result.length} tasks finish success! video: ${videoAmount} 个, img: ${imgAmount} 个, ) }) .catch(error =&gt; { log.info(all tasks finish error! video: ${videoAmount}, img: ${imgAmount}, error) }) .then(() =&gt; { process.exit(0) })完整代码： https://github.com/flute/9gag-crawler","link":"/2018/09/25/9GAG-com-%E5%86%85%E5%AE%B9%E6%8A%93%E5%8F%96/"},{"title":"ASCII’picture","text":"ASCII’picture是一个在线生成ASCII码风格图像的webapp。 其利用php+GD图库将用户上传的图片转化为炫酷的ascii风格图像并输出，并允许用户下载生成的ascii风格图像。 应用链接：http://a.ldsun.com git源码：http://github.com/flute/ASCII-PICTURE","link":"/2014/02/13/ASCII%E2%80%99picture/"},{"title":"2018-2019","text":"今年过得好快鸭🦆。来个日常年常简短总结。 今年也算是一个小的里程碑，在某些方面有了一些大的变化。值得庆祝。 在工作上，一直积极关注学习新的东西。16年刚毕业的一年，从前端到Node后端，到使用Vue，RN，Electron等开启全栈之路，开拓了较广的技术栈。到17年紧跟“潮流”，去做了半年多的小程序全栈，同时巩固了后端开发。至此貌似大前端的大多数东西都已经有过开发经验，勉强算的上伪全栈。作为一个好奇的人，从17年就开始关注区块链技术，入了币圈。并在17年底心血来潮，来了一波说走就走的裸辞，还拉上了几个垫背的几个好机油，一起拥抱百年一遇的泡沫狂欢技术革命。 事实上回头来看，这种骚操作果敢，带来的收益是极大的，年轻就要醒着拼。我不知道当初选择继续原公司的工作，现在是什么样。但裸辞后全身心投入区块链的学习，学go，学以太坊，学合约等等，学习过程中结识了很多优秀的人，来自各行各业的，有年薪百万的大佬，有清华的投行高材生，有手握矿机的机霸矿霸，有还在学校的大四学生，有以卡还卡的套现大佬，有出口成章的演讲家。大家聚在一起享受币圈的狂欢的同时，一起学习进步，真的是学到了很多东西。第一次步入这样一个个体差异极大的群体，真的是从每个人身上学到很多，受益匪浅。 蝴蝶效应，正是当初说走就走的裸辞，带来了结果颇丰的一年。 首先是年薪完成了double，来到了一个不错的新集体中，结识了一群新的nice的同事，身边好多大厂出身的大佬，可以耳濡目染。 在这半年中也享受了泡沫带来的狂欢，也经历了账户余额日浮动达到六位数的体验，价值观，投资观念显著升级。人常说币圈一年人间十年，一点也不夸张，收获许多宝贵的经历。 同时开发了币圈的第一个以太坊小程序钱包，脑洞大开的加入了币红包功能，这也是目前为止最得意的一款产品。虽然现在被微信封了，但一个普通人，当有一天你发现你做的东西是这个领域的第一个时，这种成就感真爽。上线首日在币圈群里疯狂传播，大家完的不亦乐乎，赞不绝口。同时好几位大佬投来橄榄枝，虽然最终都没去。这可能是遗憾的一个点，如果视野再宽广点，想的再多点，把产品打磨升级，以当时的状况，在币圈融资不是不可能。其次投来的橄榄枝没有认真对待，不然现在可能都会是不同的结局。不过人生就是这样，你永远不知道那个选择是做好的。总的来时，快速学习掌握新技术，你就可以在新的领域做那个NO1。另外成就感可能是人达到高潮的另一种手段，而且是持续高潮。 还有，就是买了矿机挖矿，之前都是用1070显卡挖的。心血来潮花了五六万买了几台BTM矿机，挖了小一个月体验了一把。中途还被朝阳群众和辅警各种上门问询233。也是很棒的一个体验。 飘逸的长发也建成了寸头，用了一年的发胶发蜡扔掉了，自行理发一年后，现在开始去理发店了，而且基本上三周就去一次。人就是这样，没自己经历过的东西，别人说再多你也不会打心里认可，当自己留了辫子，留了长发，用了发胶，酷了一年之后，就会发现短发其实也不错，更舒服。 之前一直鄙视皮鞋的我，竟然爱上了马丁靴，买了人生第一个皮靴，虽然刚开始穿挺累的，但还挺好看的哈哈哈。真是不同时段有不同的审美。 最重要的，这一年没得啥病，健健康康。热领庆祝体重终于接近140斤，现在跟身高可以说很搭了，体重指数21.22，简直完美。对了，就是后半年脸上长痘消不下去，导致的后果就是大家都以为我是80后 = =，看上去老成是种怎样的体验…… 打了几个月的乒乓球，遇到一个旗鼓相当的对手，不加班的时候每天抽几个小时，打的香汗淋漓，爽！想当年驰骋高中的削球手又回来了😏 这半年的厨艺也小有进步吧，就像是从初级转中级了一样，做菜时的心态稳的一批。 参加了很多的聚会。以前是能避则避，过去一年，不管是家族的，朋友的，有尽量参加，其实没那么糟。 开始主动和妹子说话聊天，这项弱势技能需要锻炼一下了。 买了几种乐器，慢慢练练，应该是项不错的技能。 对了，看了超级多的电影、纪录片，这一年真的是把电影看下了，各种类型的，还有好几个动漫、国产剧。影视源于作品，源于生活。书以历史地理心理学为主，为闲暇时间增加很多乐趣。 学本学到一半，来年赶紧学完得了…车放着没人开也是糟心🌚只后悔当初没早点学了。 最后，恭喜IG夺冠，虽然不是我心心念的OMG，但是毕竟从大一到现在六年的时间，带给了很多欢乐。虽然现在玩的越来越少了，但真的好像青春有个明显的结束标志了一样。慢慢的发现，有很多东西的快感高于游戏了。 就总结这么多吧。2018，不错的一年。 到展望2019年的时候了，按常理需要列个列表了，想了想还是算了。想做、要做的事有很多，需要一个列表来做规划。会列列表的人很多，心里能惦记着的不多，自己知道就行。给别人看的不叫计划，自己有期待就行。 祝大家新年快乐，新的一年首先强食自爱，其次奋不顾身，同时保持璞玉浑金。","link":"/2019/01/01/2018-2019/"},{"title":"Bistu Library API","text":"北京信息科技大学图书馆API。（PHP语言实现） 思路： 1.post数据，分析网页url。 2.加壳。 说说大概过程，首先登陆图书馆主页，进入图书检索页面: http://211.68.37.131/book/queryIn.jsp 提交查询数据，用chrome或Firefox等开发工具抓取到post数据包，分析之，如本校图书检索，提交检索词之后跳到新页面（http://211.68.37.131/book/queryOut.jsp）。表面上看不出post地址，抓包也看不出提交地址： 但区区方正系统怎么能难倒聪明的大家呢，对搜索结果的页面： （http://211.68.37.131/book/queryOut.jsp）分析，不难发现，search result实则是iframe框架： iframe src=’search.jsp?recordtype=all&amp;library_id=all&amp;kind=simple&amp;word=PHP&amp;cmatch=qx&amp;searchtimes=1&amp;type=title’ name=”ivote” id=”ss1” frameborder=0 width=”990” height=”450” style=”overflow:hidden” 取数据就跟看人一样。一眼看上去没啥，还不错。但等你细心去观察它，去测试它，它就马上原形毕露，将本质暴露出来： search.jsp?recordtype=all&amp;library_id=all&amp;kind=simple&amp;word=PHP&amp;cmatch=qx&amp;searchtimes=1&amp;type=title 主要参数说明： recordtype：资料类型，默认为all library_id：分馆名称，默认为all kind： 隐藏字段，默认为simple word：检索词，必填 cmatch：匹配方式，默认为qx searchtimes：默认为1 type：检索词类型，默认为title post之后获取到的是默认的前10条数据，怎么破？easy，直接请求post的url页面 （http://211.68.37.131/book/search.jsp?recordtype=all&amp;library_id=all&amp;kind=simple &amp;word=PHP&amp;cmatch=qx&amp;searchtimes=1&amp;type=title），再分析之： 你会发现，你会流泪，真正…….好吧，我走神了。。。你会发现size参数，测试下，在url后直接加上&amp;size=50，发现数据增加到50条。OK，这样算是有API了。 我的初衷是做微信查图书的功能。所以还需改造一番，比如取到数据后，还需取到图书的详细信息（在架？可借？等），其详细信息在图书title的link中，正则出来即可，然后再取到详细信息。 整体流程：user post data -&gt; get search result -&gt; print/get link -&gt;get book info -&gt;print 效果图如下： 可通过关注服务号【bistu】查看。 代码已提交之github：https://github.com/flute/Bistu-library-API 欢迎交流学习。","link":"/2014/08/12/Bistu-Library-API/"},{"title":"Bootstrap Datetimepicker 兼容IE8","text":"bootstrap datetimepicker插件在IE8下显示无效，报错提示bootstrap-datetimepicker.js脚本不支持indexOf()方法 解决方案：在bootstrap-datetimepicker.js/bootstrap-datetimepicker.min.js最前面添加以下代码： 12345678910111213141516171819if (!Array.prototype.indexOf) { Array.prototype.indexOf = function(elt /*, from*/) { var len = this.length &gt;&gt;&gt; 0; var from = Number(arguments[1]) || 0; from = (from &lt; 0) ? Math.ceil(from) : Math.floor(from); if (from &lt; 0) from += len; for (; from &lt; len; from++) { if (from in this &amp;&amp; this[from] === elt) return from; } return -1; }; }","link":"/2015/08/19/Bootstrap-Datetimepicker-%E5%85%BC%E5%AE%B9IE8/"},{"title":"Bootstrap datetimepicker and bootstrap validator","text":"最近在项目中使用bootstrap3.3.4作为前端框架，bootstrap validator作为表单验证插件，bootstrap-datetimepicker作为时间选择插件。 但当用bootstrap-datetimepicker选择完时间后bootstrap validator并没有反应，只有在点击时间选择输入框并进行插入/删除操作时bootstrap validator才出现响应。贴出代码如下： html code: [html] [/html] js code: [js] $(document).ready(function () { $(‘#form’).bootstrapValidator({ feedbackIcons: { valid: ‘glyphicon glyphicon-ok’, invalid: ‘glyphicon glyphicon-remove’, validating: ‘glyphicon glyphicon-refresh’ }, fields: { datatime: { validators: { date: { format: ‘DD/MM/YYYY’, message: ‘The format is dd/mm/yyyy’ }, notEmpty: { message: ‘The field can not be empty’ } } } } }); }); $(‘#datetime’).datetimepicker({ format: ‘yyyy-mm-dd hh:ii’, language: ‘zh-CN’, autoclose: true, }); [/js] 问题及解决方法： 在使用bootstrap validator和其他插件（bootstrap datetimepicker）的同时，当插件执行完毕后需要调用bootstrap validator重新验证。 方案： [js] $(‘#datetime’) .on(‘changeDate show’, function(e) { // Revalidate the date when user change it $(‘#form’).bootstrapValidator(‘revalidateField’, ‘datetime’); }); [/js] bootstrap validator文档：datetimepicker example","link":"/2015/04/17/Bootstrap-datetimepicker-and-bootstrap-validator/"},{"title":"Bootstrap-carousel（图片轮播）","text":"First Thumbnail label Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit. Second Thumbnail label Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit. Third Thumbnail label Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit. ‹ › $('.carousel').carousel()","link":"/2013/11/29/Bootstrap-carousel%EF%BC%88%E5%9B%BE%E7%89%87%E8%BD%AE%E6%92%AD%EF%BC%89/"},{"title":"Bootstrap-旋转木马","text":"Bootstrap 是基于 HTML，CSS 和 JavaScript 的简洁灵活的流行前端框架及交互组件集，由微博的先驱 Twitter 在2011年8月开源的整套前端解决解决方案。[**Bootstrap**](http://www.bootcss.com/) 有非常完备和详尽的开发文档，Web开发人员能够轻松搭建出清爽风格的界面以及实现良好的交互效果。 官网的文件很详细简单，对于下载来说也有多种方式。对于我们开发者来说，估计最简单的方式就是直接下载编译和压缩后的CSS、JavaScript文件，另外还包含字体文件，但是不包含文档和源码文件。打开解压包之后可以发现包含三个文件夹 css、fonts、js。 可以来查看三个文件夹中的文件 这是最基本的Bootstrap组织形式：未压缩版的文件可以在任意web项目中直接使用。提供了压缩(bootstrap.min.)与未压缩 (bootstrap.)的CSS和JS文件。字体图标文件来自于Glyphicons。 这里主要演示用bootsharp框架的旋转木马组件制作流水式图片效果： 头部引入bootstrapcss样式表： body代码： 最后效果：","link":"/2013/11/25/Bootstrap-%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC/"},{"title":"Brew error: Could not symlink, path is not writable","text":"When I try to link a library with homebrew ( brew link libtool), I got the following error: 123Linking /usr/local/Cellar/libtool/2.4.6… Error: Could not symlink lib/libltdl.7.dylib /usr/local/lib is not writable. As explained here by Rick: Start with brew doctor which will show you errors with your brew setup. You might see something like this: &quot;Warning: /usr/local/lib isn't writable.&quot; It will give you the advice that: &quot;You should probably chown /usr/local/lib/pkgconfig&quot;. This means: sudo chown {your-user-name} /usr/local/lib Then you will need to link the files with this: brew link yourLibrary If this does not work hopefully the output of brew doctor will give you enough to continue the search.","link":"/2015/12/11/Brew-error-Could-not-symlink-path-is-not-writable/"},{"title":"Building 32-bit Wine on a 64-bit Ubuntu system","text":"I have been trying to install Wine on my 13.04 64 bit computer, and everytime it leads to synaptic asking for the uninstall of the entire system. I have been following some questions which suggest the addition of the Wine repository (also recomended on the WineHQ) website, followed by sudo apt-get update and sudo apt-get install wine1.5. The system cries, with the following messages:[php]root@ludis-Lenovo-IdeaPad-Y485:/home/ludis# sudo apt-get install wine1.5 Building dependency tree Reading state information … done Some packages could not be installed. This can mean you have requested an impossible situation or if you are using the unstable distribution that some required packages have not yet created or are not moved out of Incoming. The following information should help you to resolve the situation: The following packages have unmet dependencies: wine: Depends: wine1.6 but will not be installed or wine1.7 but will not install E: Unable to correct problems, faulty packets mode “keep state”.[/php] I have tried all sudo apt-get autoclean and sudo apt-get autoremove and sudo apt-get update. However, the problem seems to continue. Any clues? Finally, i solved by google: The basic approach is: 1.build 64 bit wine 2.build 32 bit tools in lxc 3.build 32 bit wine in lxc, referring to the 64 bit wine and 32 bit tools built in the previous steps 4.install 32 bit wine 5.install 64 bit wine Get the source, e.g. [php]cd $HOME git clone git://source.winehq.org/git/wine.git ~/wine-git[/php] Get the 64 bit prerequisites, e.g. [php]sudo apt-get build-dep wine[/php] Build 64 bit wine, e.g. [php]cd $HOME mkdir wine64 cd wine64 ../wine-git/configure –enable-win64 make -j4[/php] Install lxc: [php]sudo apt-get install lxc[/php] Create a 32 bit container, and tell it to bind your home directory into the container: [php]sudo lxc-create -t ubuntu -n my32bitbox — –bindhome $LOGNAME -a i386[/php] Start the container; at the console login prompt it gives you, log in with your username and password. [php]sudo lxc-start -n my32bitbox[/php] Now you’re inside the container, in your real home directory. Do an out-of-tree build of Wine as normal, just to get the tools. You’ll have to install all the needed prerequisites first. For instance: [php]sudo apt-get install python-software-properties sudo apt-get build-dep wine sudo apt-get install git-core cd $HOME mkdir wine32-tools cd wine32-tools ~/wine-git/configure make -j4[/php] Still inside the container, do it again, this time pointing to the 64 bit build for data, and the 32 bit tools build for tools: [php]cd $HOME mkdir wine32 cd wine32 ~/wine-git/configure –with-wine64=$HOME/wine64 –with-wine-tools=$HOME/wine32-tools make -j4[/php] Still inside the container, install the 32 bit wine to force the last little bit of building: [php]cd $HOME cd wine32 sudo make install[/php] Still inside the container, shut down the container with the command [php]sudo shutdown -h now[/php] This drops you back out into your real machine. Finally, install into your real machine: [php]cd $HOME/wine32 sudo make install cd $HOME/wine64 sudo make install[/php] And you’re done! Note: You don’t need LXC, you can simply use a chroot.","link":"/2014/04/22/Building-32-bit-Wine-on-a-64-bit-Ubuntu-system/"},{"title":"CSS实现网页背景半透明","text":"使用DIV+CSS实现层与背景半透明效果。 说明： 1、filter：对win IE设置半透明滤镜效果，filter:alpha(Opacity=80)代表该对象80%半透明，火狐浏览器不认 2、**-moz-opacity：对mozilla firefox火狐浏览器实现半透明，win IE不认此属性，-moz-opacity:0.5相当于设置半透明为50% 3、opacity**：对除IE外所有浏览器支持包括谷歌，放最后主要针对谷歌浏览器，opacity: 0.5;表示设置50%半透明 为了观察到对DIV半透明实现，我们设置两个DIV层，分别一个放于另外一个DIV层内，外层DIV命名为“.div-a”;上面被包含的层CSS类命名为“.div-b”，形成“.div-b”盒子放于“.div-a”内 我们对底层DIV设置一个背景是一张图片，上面的DIV盒子设置村黑色。 一.未设置半透明样式实例[php] css背景半透明www.ldsun.com .div-a{ background:url(div-a-bg.png) no-repeat;width:230px;height:136px;padding:10px;} .div-b{ background:#000;width:200px;height:100px;padding:5px;color:#F00} DIV半透明实例演示 [/php] 二.对DIV设置CSS半透明样式实例对“.div-b”选择器加入半透明样式代码：filter:alpha(Opacity=60);-moz-opacity:0.6;opacity: 0.6; [php] css背景半透明www.ldsun.com .div-a{ background:url(div-a-bg.png) no-repeat;width:230px;height:136px;padding:10px} .div-b{ background:#000;width:200px;height:100px;padding:5px;color:#F00; filter:alpha(Opacity=60);-moz-opacity:0.6;opacity: 0.6} /* CSS注释说明：这里对CSS代码换行是为了让代码在此我要中显示完整，换行后CSS效果不受影响 */ 实现DIV半透明实例演示 [/php]","link":"/2014/05/17/CSS%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E8%83%8C%E6%99%AF%E5%8D%8A%E9%80%8F%E6%98%8E/"},{"title":"CSS3做页面淡入效果","text":"用CSS3动画属性“@keyframes ”可实现一些动态特效（这篇文章主要是实践应用一下这个动画属性，实现页面淡入特效，在火狐24版、chrome29版、IE10中测试通过。IE9及以下浏览器不支持此特效。） 淡入代码： @keyframes fade-in { 0% {opacity: 0;}/初始状态 透明度为0/ 40% {opacity: 0;}/过渡状态 透明度为0/ 100% {opacity: 1;}/结束状态 透明度为1/ } @-webkit-keyframes fade-in {/针对webkit内核/ 0% {opacity: 0;} 40% {opacity: 0;} 100% {opacity: 1;} } #wrapper { animation: fade-in;/动画名称/ animation-duration: 1.5s;/动画持续时间/ -webkit-animation:fade-in 1.5s;/针对webkit内核/ } 直接将上述代码添加到主题style样式文件中，并修改其中 #wrapper 为你的主题ID或类的名称即可。 另外，可针对页面某部分延长显示时间，比如侧边栏，再加上一句： #sidebar { animation: fade-in; animation-duration: 4s; -webkit-animation:fade-in 1.5s; } 同理，可对页面不同的部分设定不同的淡入显示时间，实现分段显示。 附：@keyframes具体语法和参数如： @keyframes animationname {keyframes-selector {css-styles;}} 值描述*animationname*必需。定义动画的名称。*keyframes-selector*必需。动画时长的百分比。合法的值：- 0-100% - from（与 0% 相同） - to（与 100% 相同） *css-styles*必需。一个或多个合法的 CSS 样式属性。","link":"/2013/11/15/CSS3%E5%81%9A%E9%A1%B5%E9%9D%A2%E6%B7%A1%E5%85%A5%E6%95%88%E6%9E%9C/"},{"title":"Cannot find module &#39;npmlog&#39;","text":"最近尝试react native开发，安装react-native时报错。 terminal下键入 npm install -g react-native-cli 尝试安装react native命令行时报错： module.js:328 throw err; ^ Error: Cannot find module 'npmlog' at Function.Module._resolveFilename (module.js:326:15) at Function.Module._load (module.js:277:25) at Module.require (module.js:354:17) at require (internal/module.js:12:17) at /usr/local/lib/node_modules/npm/bin/npm-cli.js:20:13 at Object. (/usr/local/lib/node_modules/npm/bin/npm-cli.js:76:3) at Module._compile (module.js:398:26) at Object.Module._extensions..js (module.js:405:10) at Module.load (module.js:344:32) at Function.Module._load (module.js:301:12) 解决：重新安装npm curl -0 -L http://npmjs.org/install.sh | sudo sh","link":"/2016/02/13/Cannot-find-module-npmlog/"},{"title":"CentOS 升级 Git 至最新版","text":"Centos使用git push代码时报错（The requested URL returned error: 400），环境为centos6、git1.7.1。 Coding文档提示git version低于1.9可能会报错，遂升级git至最新版。 由于CentOS用yum安装的版本只有1.x，故需要手动编译安装。 首先，下载git安装包。 从github上下载一个最新版（撰写文章时的最新版为：2.6.0）。 cd /usr/local/src wget https://github.com/git/git/archive/master.zip unzip master.zip 由于系统中已存在git，所以先备份现有git。 mv /usr/bin/git{,.bak} 编译安装 cd /usr/local/src/git-master make configure ./configure --prefix=/usr/bin make &amp;&amp; make install 拷贝到原有Git所在位置 cp /usr/local/src/git-master/git /usr/bin","link":"/2015/10/01/CentOS-%E5%8D%87%E7%BA%A7-Git-%E8%87%B3%E6%9C%80%E6%96%B0%E7%89%88/"},{"title":"DAPP结合IPFS — 去中心化图床","text":"内容：打造一款去中心化图床，用户可上传图片至IPFS上，文件hash保存在以太坊的区块上，以此实现永存的去中心化图床。 技术栈：依旧使用truffle框架快速构建项目truffle unbox react 1、什么是 IPFS星际文件系统IPFS（InterPlanetary File System）是一个面向全球的、点对点的分布式版本文件系统，目标是为了补充（甚至是取代）目前统治互联网的超文本传输协议（HTTP），将所有具有相同文件系统的计算设备连接在一起。原理用基于内容的地址替代基于域名的地址，也就是用户寻找的不是某个地址而是储存在某个地方的内容，不需要验证发送者的身份，而只需要验证内容的哈希，通过这样可以让网页的速度更快、更安全、更健壮、更持久。 直白了说，就是类似BT下载的p2p文件存储、传输系统。 2、安装 IPFSIPFS官网下载对应系统的安装包（需要翻墙）以Mac为例，终端执行： 12345678910111213141516cd /Users/ludis/Downloadstar xvfz go-ipfs_v0.4.13_darwin-amd64.tar.gzcd go-ipfsmv ipfs /usr/local/bin/ipfs// 创建本地节点ipfs init// 查看节点IDipfs id// 启动节点服务器（可以上传文件至外网/同步外网文件）ipfs daemon ipfs节点服务器启动之后可以浏览器访问http://localhost:5001/webui查看管理界面，有本地配置信息、节点连接信息、本地节点文件信息等等。 3、IPFS 基本操作1、新建文件并添加至IPFS节点 1234567ludis@MacBook ~/Desktop/test cat &gt; file.txthello ipfs!^Cludis@MacBook ~/Desktop/test cat file.txthello ipfs!ludis@MacBook ~/Desktop/test ipfs add file.txtadded QmZ5cRqiNsg1ngmzmKrv5STMoyfLaJhhHqXyMWTkre1qte file.txt 将文件添加至ipfs节点后，会返回文件的hash，上例QmZ5cRqiNsg1ngmzmKrv5STMoyfLaJhhHqXyMWTkre1qte 2、查看IPFS上的文件 12ludis@MacBook ~/Desktop/test ipfs cat QmZ5cRqiNsg1ngmzmKrv5STMoyfLaJhhHqXyMWTkre1qtehello ipfs! 此时文件只是添加到了本地的IPFS节点，可以通过终端读取到。当通过ipfs daemon启动本地节点服务器后，也可以通过http://localhost:8080/ipfs/QmZ5cRqiNsg1ngmzmKrv5STMoyfLaJhhHqXyMWTkre1qte访问到文件。在启动节点服务器后，会将本地节点文件同步至外网，当同步完成后，就可以通过https://ipfs.io/iofs/QmZ5cRqiNsg1ngmzmKrv5STMoyfLaJhhHqXyMWTkre1qte访问到文件。至此你的文件已经永存在ipfs网络上了！由于目前IPFS网络暂未加入代币机制，所以存储读取文件均免费，当然了，速度也慢很多。 3、下载IPFS上的文件 123ludis@MacBook ~/Desktop/test ipfs get QmZ5cRqiNsg1ngmzmKrv5STMoyfLaJhhHqXyMWTkre1qteSaving file(s) to QmZ5cRqiNsg1ngmzmKrv5STMoyfLaJhhHqXyMWTkre1qte 20 B / 20 B [========================================] 100.00% 0s 通过get命令，会下载文件到当前目录。 4、新建目录 12345678ludis@MacBook ~/Desktop/test ipfs files mkdir /ludisludis@MacBook ~/Desktop/test ipfs files cp /ipfs/QmZ5cRqiNsg1ngmzmKrv5STMoyfLaJhhHqXyMWTkre1qte /ludis/readme.txtludis@MacBook ~/Desktop/test ipfs files lsludisludis@MacBook ~/Desktop/test ipfs files ls /ludisreadme.txtludis@MacBook ~/Desktop/test ipfs files read /ludis/readme.txthello ipfs! 5、上传整个目录 1ipfs add -r files/ 上传整个目录时，所有文件都有其对应的hash，并且每个目录都有其hash，访问某个文件有两种方式： 直接通过问价hash访问 通过目录hash/文件名访问 IPFS还有很多有趣的地方。例如可以上传一个静态网站到ipfs，并通过浏览器访问，这样就创建了一个永存的网站。往IPFS上传相同的文件，由于hash相同，系统会自动识别，只给后上传的用户建立已有文件的索引，而不是上传一份相同的文件，这样节省很多空间。同时如果一个文件是在另一个文件的基础上修改了写内容而导致hash不同，那么他们相同的内容也不会重复存储，而只是在原文件上拼接不同的部分。总之，IPFS系统有很多高明之处，需要仔细研究。 4、设置跨域当我们在前端通过js接口操作ipfs时，会遇到老生常谈的跨域问题，只需终端执行以下配置即可： 12345ipfs config —json API.HTTPHeaders.Access-Control-Allow-Methods '[&quot;PUT&quot;,&quot;GET&quot;, &quot;POST&quot;, &quot;OPTIONS&quot;]'ipfs config —json API.HTTPHeaders.Access-Control-Allow-Origin '[&quot;*&quot;]'ipfs config —json API.HTTPHeaders.Access-Control-Allow-Credentials '[&quot;true&quot;]'ipfs config —json API.HTTPHeaders.Access-Control-Allow-Headers '[&quot;Authorization&quot;]'ipfs config —json API.HTTPHeaders.Access-Control-Expose-Headers '[&quot;Location&quot;]' 5、IPFS 与 DAPP 结合由于以太坊区块的特性，往区块上存储大文件显然是不合理的。所以通用做法是文件存储到IPFS，之后将文件的hash存储到以太坊区块。当读取时，首先从以太坊区块上取到文件的hash，然后通过hash去IPFS网络上读取文件。 依然使用之前的truffle unbox react创建项目，不同的是只需要多安装一个依赖库ipfs-api，直接cnpm i -S ipfs-api安装即可，显而易见，这就是IPFS系统的js api，这样我们就能在前端调用IPFS的接口上传、读取文件。 话不多说，直接上代码，一个是智能合约，一个是前端react文件，合约交互前几篇已经比较熟悉了，主要看一下怎么通过ipfs-api上传下载文件。一切尽在代码中： SimpleStorage.sol 123456789101112131415161718192021222324252627282930313233pragma solidity ^0.4.19;contract SimpleStorage { string[] public photoArr; mapping(address =&gt; uint) storeAddress; function storePhoto(string hash) public { if(storeAddress[msg.sender]==0){ photoArr.push(hash); storeAddress[msg.sender] = 1; } } function getPhoto(uint index) public view returns (uint, string){ if(photoArr.length==0){ return (0, &quot;&quot;); }else{ return (photoArr.length, photoArr[index]); } } function isStored() public view returns (bool) { if(storeAddress[msg.sender]==0){ return false; }else{ return true; } }} App.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155import React, {Component} from 'react'import SimpleStorageContract from '../build/contracts/SimpleStorage.json'import getWeb3 from './utils/getWeb3'import './css/oswald.css'import './css/open-sans.css'import './css/pure-min.css'import './App.css'import ipfsAPI from 'ipfs-api'const ipfs = ipfsAPI({host: 'localhost', port: '5001', protocal: 'http'})const contractAddress = &quot;0x7ebeb83816b74da8173e3f406aeac012cf1718f5&quot;let simpleStorageInstance// Promise 存储文件至ipfslet saveImageOnIpfs = (reader) =&gt; { return new Promise(function (resolve, reject) { const buffer = Buffer.from(reader.result); ipfs.add(buffer).then((response) =&gt; { console.log(response) resolve(response[0].hash); }) .catch((err) =&gt; { console.error(err) reject(err); }) })}class App extends Component { constructor(props) { super(props) this.state = { photos: [], count: 0, web3: null } } componentWillMount() { // Get network provider and web3 instance. See utils/getWeb3 for more info. getWeb3.then(results =&gt; { this.setState({web3: results.web3}) this.instantiateContract() }).catch(() =&gt; { console.log('Error finding web3.') }) } instantiateContract() { const that = this const contract = require('truffle-contract') const simpleStorage = contract(SimpleStorageContract) simpleStorage.setProvider(this.state.web3.currentProvider) this.state.web3.eth.getAccounts((error, accounts) =&gt; { simpleStorage.at(contractAddress).then((instance) =&gt; { simpleStorageInstance = instance }) .then(result =&gt; { console.log('inint success') return simpleStorageInstance.getPhoto(0) }) .then(result =&gt; { console.log(result) let imgNum = result[0].c[0] if(imgNum===0){ return } if(imgNum===1){ this.setState({ count: imgNum, photos: this.state.photos.concat([result[1]]) }) } if(imgNum&gt;1){ // 闭包，读取存储的所有图片 for(let i=0;i&lt;imgNum;i++){ (function(i){ simpleStorageInstance.getPhoto(i) .then(result =&gt; { that.setState({ photos: that.state.photos.concat([result[1]]) }) }) })(i) } } }) }) } render() { let doms = [], photos = this.state.photos for(let i=0; i&lt;photos.length;i++){ doms.push(&lt;div key={i}&gt;&lt;img src={&quot;http://localhost:8080/ipfs/&quot; + photos[i]}/&gt;&lt;/div&gt;) } return ( &lt;div className=&quot;App&quot;&gt; &lt;header&gt;上传图片至ipfs，并保存信息至以太坊区块&lt;/header&gt; &lt;div className=&quot;upload-container&quot;&gt; &lt;label id=&quot;file&quot;&gt;选择图片&lt;/label&gt; &lt;input type=&quot;file&quot; ref=&quot;file&quot; id=&quot;file&quot; name=&quot;file&quot; multiple=&quot;multip le&quot;/&gt; &lt;button onClick={() =&gt; this.upload()}&gt;上传&lt;/button&gt; &lt;/div&gt; &lt;div className=&quot;img-container&quot;&gt; {doms} &lt;/div&gt; &lt;/div&gt; ); } upload() { console.log(&quot;upload&quot;); let isStored = false simpleStorageInstance.isStored() .then(result =&gt; { console.log(&quot;is stored&quot;, result) if(result) { isStored = true } }) if(isStored) { alert(&quot;每个钱包地址只能上传一张图片哦😯 ~&quot;) return } var file = this.refs.file.files[0]; console.log(file) var reader = new FileReader(); // reader.readAsDataURL(file); reader.readAsArrayBuffer(file) reader.onloadend = (e) =&gt; { //console.log(reader); saveImageOnIpfs(reader).then((hash) =&gt; { console.log(hash); return simpleStorageInstance.storePhoto(hash, {from: this.state.web3.eth.accounts[0]}) .then(result =&gt; { console.log(&quot;写入区块成功&quot;, result) this.setState({ photos: this.state.photos.concat([hash]) }) }) }); } }}export default App 完整代码：GitHub","link":"/2018/03/06/DAPP%E7%BB%93%E5%90%88IPFS-%E2%80%94-%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E5%9B%BE%E5%BA%8A/"},{"title":"DOS批处理中%cd%和%~dp0的区别","text":"在DOS的批处理中，有时候需要知道当前的路径。在DOS中，有两个环境变量可以跟当前路径有关，一个是%cd%, 一个是%~dp0。这两个变量的用法和代表的内容是不同的： 1. %cd% 可以用在批处理文件中，也可以用在命令行中；展开后，是驱动器盘符:+当前目录，如在dos窗口中进入c:\\dir目录下面，输入：echo %cd% ，则显示为：c:\\dir 。 %cd%的内容是可以被改变的，其内容为命令的执行路径或批处理文件的执行路径。 2.%~dp0只可以用在批处理文件中，它是由它所在的批处理文件的目录位置决定的，是批处理文件所在的盘符:+路径。在执行这个批处理文件的过程中，它展开后的内容是不可以改变的。比如在D盘下有个批处理文件，path.bat，其内容为： 复制代码代码如下: @echo off echo this is %%cd%% %cd% echo this is %%~dp0 %~dp0在C:\\ 和E:\\分别下执行它，输出为：![](http://files.jb51.net/upload/201206/20120607132014226.jpg)","link":"/2014/04/23/DOS%E6%89%B9%E5%A4%84%E7%90%86%E4%B8%AD-cd-%E5%92%8C-dp0%E7%9A%84%E5%8C%BA%E5%88%AB/"},{"title":"Div+contenteditable 模拟 textarea 及存在的问题","text":"在网页端实现聊天功能时，大多会采用textarea来实现，但是当需要在textarea中显示表情/图片时，就不好实现了。这时候普遍的方法是给div添加contenteditable属性，来模拟textarea，而在div中显示图片及表情就可以轻松实现了。 The contenteditable global attribute is an enumerated attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values: true or the empty string, which indicates that the element must be editable; false, which indicates that the element must not be editable.If this attribute is not set, its default value is inherited from its parent element. focus定位问题使用div模拟textarea后会发现一个问题，就是每次点击输入框或者使用$('#tag').focus()让输入框聚焦时，光标都会定位在最开始的位置。解决办法： 12345678910111213141516171819function placeCaretAtEnd(el) { el.focus(); if (typeof window.getSelection != &quot;undefined&quot; &amp;&amp; typeof document.createRange != &quot;undefined&quot;) { var range = document.createRange(); range.selectNodeContents(el); range.collapse(false); var sel = window.getSelection(); sel.removeAllRanges(); sel.addRange(range); } else if (typeof document.body.createTextRange != &quot;undefined&quot;) { var textRange = document.body.createTextRange(); textRange.moveToElementText(el); textRange.collapse(false); textRange.select(); }}placeCaretAtEnd( document.getElementById(&quot;content&quot;) ); 粘贴复制问题当使用div作为输入框时，你会发现，粘贴复制到的全是HTML结构，而我们想要的是粘贴复制纯文本，就像textarea那样。解决方法就是监听div的粘贴事件，然后在粘贴事件中匹配替换HTML元素，返回纯文本： 123456789101112131415161718192021var $plainText = $(&quot;#plainText&quot;);$plainText.on('paste', function (e) { window.setTimeout(function () { $plainText.html(removeAllTags(replaceStyleAttr($plainText.html()))); }, 0);});function replaceStyleAttr (str) { return str.replace(/(&lt;[\\w\\W]*?)(style)([\\w\\W]*?&gt;)/g, function (a, b, c, d) { return b + 'style_replace' + d; });}function removeTagsExcludeA (str) { return str.replace(/&lt;\\/?((?!a)(\\w+))\\s*[\\w\\W]*?&gt;/g, '');}function removeAllTags (str) { return str.replace(/&lt;\\/?(\\w+)\\s*[\\w\\W]*?&gt;/g, '');}","link":"/2016/10/13/Div-contenteditable-%E6%A8%A1%E6%8B%9F-textarea-%E5%8F%8A%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/"},{"title":"Echarts3 中国地图下钻至县级","text":"Echarts3 地图下钻至县级看了会D3.js，鉴于学习曲线较高，且要实现的效果不复杂，遂使用Echarts完成——中国地图下钻至县级。 HTML 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;echarts3中国地图下钻至县级&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;static/css/main.css&quot;&gt; &lt;!-- Echarts3 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;static/js/echarts.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 全国344个市、区、州对应的数字编号 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;static/js/citymap.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;main&quot; style=&quot;width: 100%;height:800px;&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;static/js/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;static/js/app.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; JavaScript 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188//地图容器var chart = echarts.init(document.getElementById('main'));//34个省、市、自治区的名字拼音映射数组var provinces = { //23个省 &quot;台湾&quot;: &quot;taiwan&quot;, &quot;河北&quot;: &quot;hebei&quot;, &quot;山西&quot;: &quot;shanxi&quot;, &quot;辽宁&quot;: &quot;liaoning&quot;, &quot;吉林&quot;: &quot;jilin&quot;, &quot;黑龙江&quot;: &quot;heilongjiang&quot;, &quot;江苏&quot;: &quot;jiangsu&quot;, &quot;浙江&quot;: &quot;zhejiang&quot;, &quot;安徽&quot;: &quot;anhui&quot;, &quot;福建&quot;: &quot;fujian&quot;, &quot;江西&quot;: &quot;jiangxi&quot;, &quot;山东&quot;: &quot;shandong&quot;, &quot;河南&quot;: &quot;henan&quot;, &quot;湖北&quot;: &quot;hubei&quot;, &quot;湖南&quot;: &quot;hunan&quot;, &quot;广东&quot;: &quot;guangdong&quot;, &quot;海南&quot;: &quot;hainan&quot;, &quot;四川&quot;: &quot;sichuan&quot;, &quot;贵州&quot;: &quot;guizhou&quot;, &quot;云南&quot;: &quot;yunnan&quot;, &quot;陕西&quot;: &quot;shanxi1&quot;, &quot;甘肃&quot;: &quot;gansu&quot;, &quot;青海&quot;: &quot;qinghai&quot;, //5个自治区 &quot;新疆&quot;: &quot;xinjiang&quot;, &quot;广西&quot;: &quot;guangxi&quot;, &quot;内蒙古&quot;: &quot;neimenggu&quot;, &quot;宁夏&quot;: &quot;ningxia&quot;, &quot;西藏&quot;: &quot;xizang&quot;, //4个直辖市 &quot;北京&quot;: &quot;beijing&quot;, &quot;天津&quot;: &quot;tianjin&quot;, &quot;上海&quot;: &quot;shanghai&quot;, &quot;重庆&quot;: &quot;chongqing&quot;, //2个特别行政区 &quot;香港&quot;: &quot;xianggang&quot;, &quot;澳门&quot;: &quot;aomen&quot;};//直辖市和特别行政区-只有二级地图，没有三级地图var special = [&quot;北京&quot;,&quot;天津&quot;,&quot;上海&quot;,&quot;重庆&quot;,&quot;香港&quot;,&quot;澳门&quot;];var mapdata = [];//绘制全国地图$.getJSON('static/map/china.json', function(data){ d = []; for( var i=0;i&lt;data.features.length;i++ ){ d.push({ name:data.features[i].properties.name }) } mapdata = d; //注册地图 echarts.registerMap('china', data); //绘制地图 renderMap('china',d);});//地图点击事件chart.on('click', function (params) { console.log( params ); if( params.name in provinces ){ //如果点击的是34个省、市、自治区，绘制选中地区的二级地图 $.getJSON('static/map/province/'+ provinces[params.name] +'.json', function(data){ echarts.registerMap( params.name, data); var d = []; for( var i=0;i&lt;data.features.length;i++ ){ d.push({ name:data.features[i].properties.name }) } renderMap(params.name,d); }); }else if( params.seriesName in provinces ){ //如果是【直辖市/特别行政区】只有二级下钻 if( special.indexOf( params.seriesName ) &gt;=0 ){ renderMap('china',mapdata); }else{ //显示县级地图 $.getJSON('static/map/city/'+ cityMap[params.name] +'.json', function(data){ echarts.registerMap( params.name, data); var d = []; for( var i=0;i&lt;data.features.length;i++ ){ d.push({ name:data.features[i].properties.name }) } renderMap(params.name,d); }); } }else{ renderMap('china',mapdata); }});//初始化配置var option = { backgroundColor: '#000', title : { text: 'Echarts3 中国地图下钻至县级', subtext: '三级下钻', link:'http://www.ldsun.com', left: 'center', textStyle:{ color: '#fff', fontSize:16, fontWeight:'normal', fontFamily:&quot;Microsoft YaHei&quot; }, subtextStyle:{ color: '#ccc', fontSize:13, fontWeight:'normal', fontFamily:&quot;Microsoft YaHei&quot; } }, tooltip: { trigger: 'item', formatter: '{b}' }, toolbox: { show: true, orient: 'vertical', left: 'right', top: 'center', feature: { dataView: {readOnly: false}, restore: {}, saveAsImage: {} }, iconStyle:{ normal:{ color:'#fff' } } }, animationDuration:1000, animationEasing:'cubicOut', animationDurationUpdate:1000 };//绘制地图function renderMap(map,data){ option.title.subtext = map; option.series = [ { name: map, type: 'map', mapType: map, roam: false, nameMap:{ 'china':'中国' }, label: { normal:{ show:true, textStyle:{ color:'#999', fontSize:13 } }, emphasis: { show: true, textStyle:{ color:'#fff', fontSize:13 } } }, itemStyle: { normal: { areaColor: '#323c48', borderColor: 'dodgerblue' }, emphasis: { areaColor: 'darkorange' } }, data:data } ]; //渲染地图 chart.setOption(option);} demo：https://flute.github.io/echarts3-chinese-map-drill-down/ github: 百度地图竟然不提供台湾地图的下载，2333….俨然是某台独派程序猿写的","link":"/2016/11/29/Echarts3-%E4%B8%AD%E5%9B%BD%E5%9C%B0%E5%9B%BE%E4%B8%8B%E9%92%BB%E8%87%B3%E5%8E%BF%E7%BA%A7/"},{"title":"Error changing the ports in Mamp","text":"When i try to change the port , the error is show up “There is a problem with the server ports. Each server must be assigned a unique port. Please check your configuration.” Finally , I was able to set port 3306 for SQL in the MAMP interface, and able to set port 80 for apache by editing the httpd.conf and changing 8888 to 80 on lines 48 and 182 , and it works.","link":"/2015/01/25/Error-changing-the-ports-in-Mamp/"},{"title":"Fatal error: Allowed memory size of X bytes exhausted (tried to allocate Y bytes)","text":"输出图片的函数出错，提示： Fatal error: Allowed memory size of 1073741824 bytes exhausted (tried to allocate 24000 bytes) in C:\\wamp\\www\\test\\picture\\post.php on line 14 解决的办法有以下三种： 1 . 修改php.ini（推荐） memory_limit = 128M 把128M改大点，如512或1024，如果不够继续加。 2 . 在程序里面添加如下语句 ini_set(”memory_limit”, ”128M”); 3 . 添加如下内容 php_value memory_limit 128M Ps : 如果还不能解决，就把它改得再大一些。","link":"/2014/01/28/Fatal-error-Allowed-memory-size-of-X-bytes-exhausted-tried-to-allocate-Y-bytes/"},{"title":"Flutter 实战进阶","text":"Flutter 在实际开发中遇到的一些问题及解决方案，作为笔记记录。 1、container width、height 100%12345FractionallySizedBox( widthFactor: 1, heightFactor: 1, child: ,) 12double width = MediaQuery.of(context).size.widthdouble height = MediaQuery.of(context).size.height 2、沉浸式背景图片背景图片铺满Appbar及状态栏 123456789101112131415161718Widget build(BuildContext context) { return new Stack( children: &lt;Widget&gt;[ Container( child: Image.network('https://www.bing.com/az/hprichbg/rb/Punakaiki_DE-DE0884339574_1920x1080.jpg'), color: Colors.lightGreen, ), Scaffold( backgroundColor: Colors.transparent, appBar: AppBar( backgroundColor: Colors.transparent, title: Text('Coin'), ), body: MyCoinPage(), ) ], ); } 3、APPBar no shadowAppBar默认底部有阴影。去掉只需要配置参数即可： 123AppBar( elevation: 0.0,) 4、自定义字体12345678910flutter: # The following line ensures that the Material Icons font is # included with your application, so that you can use the icons in # the material Icons class. uses-material-design: true fonts: - family: Kphi fonts: - asset: assets/fonts/Komet-Pro-Heavy-Italic.otf 5、Tab切换动画Tab切换需加入SingleTickerProviderStateMixin 通过 with SingleTickerProviderStateMixin 实现Tab页的切换动画效果。因为初始化animationController的时候需要一个TickerProvider类型的参数Vsync参数，所以我们混入了TickerProvider的子类SingleTickerProviderStateMixin。 6、 逐帧动画 FrameAnimationImageFlutter 逐帧动画 FrameAnimationImage。 逐帧动画： 依次顺序循环播放多张图片组成一个动画。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687/// Flutter FrameAnimation 逐帧动画import 'package:flutter/material.dart';class FrameAnimationImage extends StatefulWidget { final List&lt;String&gt; assetList; final double width; final double height; final int interval; FrameAnimationImage( {this.assetList, this.width, this.height, this.interval = 200}); @override State&lt;StatefulWidget&gt; createState() { return _FrameAnimationImageState(); }}class _FrameAnimationImageState extends State&lt;FrameAnimationImage&gt; with SingleTickerProviderStateMixin { // 动画控制 Animation&lt;double&gt; _animation; AnimationController _controller; int interval = 200; @override void initState() { super.initState(); if (widget.interval != null) { interval = widget.interval; } final int imageCount = widget.assetList.length; final int maxTime = interval * imageCount; // 启动动画controller _controller = new AnimationController( duration: Duration(milliseconds: maxTime), vsync: this); _controller.addStatusListener((AnimationStatus status) { if (status == AnimationStatus.completed) { _controller.forward(from: 0.0); // 完成后重新开始 } }); _animation = new Tween&lt;double&gt;(begin: 0, end: imageCount.toDouble()) .animate(_controller) ..addListener(() { setState(() { // the state that has changed here is the animation object’s value }); }); _controller.forward(); } @override void dispose() { _controller.dispose(); super.dispose(); } @override Widget build(BuildContext context) { int ix = _animation.value.floor() % widget.assetList.length; List&lt;Widget&gt; images = []; // 把所有图片都加载进内容，否则每一帧加载时会卡顿 for (int i = 0; i &lt; widget.assetList.length; ++i) { if (i != ix) { images.add(Image.asset( widget.assetList[i], width: 0, height: 0, )); } } images.add(Image.asset( widget.assetList[ix], width: widget.width, height: widget.height, )); return Stack(alignment: AlignmentDirectional.center, children: images); }} 7、 时间格式化库 intl pub doc usage 8、 时间格式化库intl和textDirection冲突报错如下： 1The getter 'rtl' isn't defined for the class 'TextDirection' 参考： Stack Overflow 解决方案： 1import 'package:intl/intl.dart' as intl; 9、 convert string to datedart将时间字符串转为date库： 参考： Stack Overflow 12var parsedDate = DateTime.parse('1974-03-20 00:00:00.000');print('dateTime: $parsedDate'); 10、 tabcontroller.addListenerTab切换时，可以通过tabcontroller.addListener监听切换事件。在实际开发中发现如下问题，可以根据需求选择不同的判断方式: 1234567_tabController = new TabController(length: 2, vsync: this);_tabController.addListener(() { // _tabController.addListener... if (_tabController.indexIsChanging) { // _tabController.indexIsChanging... }}); 当点击切换时: _tabController.addListener 触发两次 _tabController.indexIsChanging 触发一次 当滑动切换时: _tabController.addListener 触发一次 _tabController.indexIsChanging 不触发 11、 FutureBuilder =&gt; Future widget参考: FutureBuilder 延迟加载组件 1234567891011121314151617181920212223242526@override Widget build(BuildContext context) { return new FutureBuilder( future: getTextFromFile(), initialData: &quot;Loading text..&quot;, builder: (BuildContext context, AsyncSnapshot&lt;String&gt; text) { return new SingleChildScrollView( padding: new EdgeInsets.all(8.0), child: new Text( text.data, style: new TextStyle( fontWeight: FontWeight.bold, fontSize: 19.0, ), )); }); } Future&lt;String&gt; getFileData(String path) async { return await new Future(() =&gt; &quot;test text&quot;); } Future&lt;String&gt; getTextFromFile() async { return getFileData(&quot;test.txt&quot;); }} 12、获取页面生命周期使用 with WidgetsBindingObserver后，可以对页面的生命周期进行监听。 123456789101112131415161718192021222324class _LifecycleWatcherState extends State&lt;LifecycleWatcher&gt; with WidgetsBindingObserver { AppLifecycleState _lastLifecycleState; @override void initState() { super.initState(); WidgetsBinding.instance.addObserver(this); } @override void dispose() { WidgetsBinding.instance.removeObserver(this); super.dispose(); } @override void didChangeAppLifecycleState(AppLifecycleState state) { print('current state: $state'); setState(() { _lastLifecycleState = state; }); } } 13、页面重构1、TabView + pull_to_refresh 如何优雅共存当页面中有Tab切换，且每个Tab页都是可以下拉刷新、上拉加载的组件时。如果每个TabView使用的是同一个组件，只是根据不同的标识显示不同的内容。在实际开发中发现，这么做虽然可以减少部分代码量，但是出现的问题是，Tab切换时每次都等于是重新渲染公共的组件，导致比较卡顿，且切换时会发生多个TabView间的数据混乱等一些列问题。而且多个TabView公用一个scrollController的话也会出很多问题。 正确的做法是，每个TabView应该是独立组件，包括互相独立的scrollController。只不过其中的一些子组件是可以抽出来共用的，这是没问题的。 2、listView显示占位图。 空列表的一般需要显示占位图，开始的做法是，判断列表为空时，直接返回一个占位图的Container，代替ListView。这样做之后，发现数据为空时就不能下拉刷新了，因为下拉刷新和ListView绑定在一起。于是改为下述方案，当数据为空时任然可以下拉刷新，实时更新数据： 1234567891011121314151617child: new SmartRefresher(headerConfig: const RefreshConfig(completeDuration: 300),enablePullDown: true,enablePullUp: true,onRefresh: _onRefresh,headerBuilder: LoadingIndicator.buildHeader,footerBuilder: LoadingIndicator.buildFooter,controller: _refreshController,child: (!loading &amp;&amp; _payList.length == 0) ? ListView.builder( itemCount: 1, itemBuilder: (context, i) { return _emptyTip(); }, ) : _listView(),), 14、网络图片加载组件默认的图片加载组件 networkImage，当图片链接错误、为空时，会报exception导致Crash。FadeInImage同理。 参考： GitHub 试了好几款组件都没有做错误处理，最终找到一个可用的组件：Flutter_image ，同时配合FadeInImage设置默认占位图，完美。 123456adeInImage( fit: fit, placeholder: AssetImage(placeHolderImage), image: NetworkImageWithRetry(imgUrl),), 15、主题颜色 ThemeData 主体颜色常识 动态设置主题色 16、网络图片加载失败Exception使用 flutter_image 的 NetworkImageWithRetry 代替 NetworkImage 后，当图片404或者错误时，确实没有报Exception奔溃，但是安卓端却显示crash。 换了很多其他的插件都不好使，最终查明，NetworkImageWithRetry虽然可以catch exception不让应用奔溃，但是会触发Flutter.onError，而安卓端在检测到onError之后，当做crash处理，直接将页面关闭…. 方案： 修改组件源码，图片加载失败时，不要触发Flutter.onError。 17、ActionSheet 点击隐藏点击 ActionSheet 选择某项后，隐藏之。 1Navigator.of(context, rootNavigator: true).pop(&quot;Discard&quot;); 18、阻止软键盘顶起页面当软键盘弹起时，会将页面高度缩减，导致页面中的内容随着父级高度变化而变化。即软键盘弹起时将内容顶起，导致诸多问题。 解决方案： 123456return Scaffold( appBar: AppBar( title: new Text(&quot;通讯录&quot;), ), resizeToAvoidBottomPadding: false, //输入框抵住键盘 内容不随键盘滚动); 19、dart正则12345678910RegExp regExp = new RegExp( r'(ludis)', caseSensitive: false, // 是否大小写敏感 multiLine: false, // 待匹配文字是否是多行的);// 正则var d = regExp.allMatches(text);d.forEach((f) =&gt; print(f.group(0)));print('match result, ${d.toString()}, ${d.toList()}'); 20、键盘确认按钮样式键盘的确认按钮会显示为“搜索”，点击后触发onSubmitted事件。 12345TextFormField( ... textInputAction: TextInputAction.done, ...) 21、Map类型错误json转换时报错如下： 1'_InternalLinkedHashMap&lt;dynamic, dynamic&gt;' is not a subtype of type 'Map&lt;String, dynamic&gt;' 原因: 类型为Map的其实际类型为Map&lt;dynamic, dynamic&gt;而非Map&lt;String, dynamic&gt;。 解决方法： 进行转换 12Map json; // Map&lt;dynamic, dynamic&gt;Map&lt;String, dynamic&gt; = new Map&lt;String, dynamic&gt;.from(json); // Map&lt;String, dynamic&gt; 22、GestureDetector 点击区域小使用GestureDetector包裹Container，发现在Container内容为空的区域点击时，捕捉不到onTap点击事件。 参考： GitHub 解决方法： 12345GestureDetector( behavior: HitTestBehavior.opaque, onTap: (){}, child: Container()) 23、TextField优化：TextField decoration 可使用以下两种： 使用 InputDecoration.collapsed() 。其高度不能和父级同高，导致可点击区域变小，用户体验不好。优势在于InputDecoration.collapsed()为无边框的输入框。 使用InputDecoration。可使输入框高度和父级同高，扩大可点击区域。去掉边框即可。 解决方法： 123InputDecoration( border: InputBorder.none, // 去除输入框边框) 24、Flutter hide keyboard调用方法隐藏键盘。 1FocusScope.of(context).requestFocus(new FocusNode()); 25、去除TextFiled水纹效果 ripple effect参考： how-to-disable-default-widget-splash-effect-in-flutter 解决方案： 使用自定义主体，覆盖默认主题 给组件包裹Theme容器，设置 splashFactory 为 Colors.transparent。✅ 12345child: new Theme( data: new ThemeData(splashFactory: Colors.transparent), child: new TextField(...),), Dart 数组、字符串常用方法： Dart Array methods: https://codeburst.io/top-10-array-utility-methods-you-should-know-dart-feb2648ee3a2 Dart String methods: https://codeburst.io/top-10-string-utility-methods-you-should-know-dart-b51ef65b3cc2","link":"/2019/03/19/Flutter-%E5%AE%9E%E6%88%98%E8%BF%9B%E9%98%B6/"},{"title":"Flutter组件合集","text":"ElementForm1、Input TextField 最常用的文本输入组件。 用户修改文本时，可通过Onchange获取最新的文本信息。 onSubmitted可获取到软键盘的确认按钮。 默认下方有一个横线，decoration属性可以设置图标、padding等更多属性 2、Checkbox CheckboxListTile下拉复选框，带有复选框的ListTile，带有标签的ListTile整个列表的图块是交互的，点击图块中的任意位置可切换复选框。 Checkbox 3、Button FlatButton 默认无边框，无背景色的按钮 FlatButton.icon 为带图标的 RaiseButton 凸起的按钮——带有shadow阴影的质感按钮 RaiseButton.icon 为带图标的 IconButton 纯图标按钮，无边框无背景色 PopupMenuButton 弹出菜单栏的图标。 PopupMenuButton 和 popupMenuItem 配合使用。 选择菜单项时，触发onSelected方法。 FloatingActionButton 默认的圆形悬浮按钮，每个页面最多一个。Scaffold.floatingActionButton RawMateriaButton 不使用当前Theme或ButtonTheme，高度自定义的Materail button DropdownButton 从项目列表进行选择的按钮。 OutlineButton RaisedButton 和 FlatButton的交叉，有边框。高程最初为0，背景透明。按下按钮时，背景变不透明，高程增加 4、Text Text 一行/多行文本显示 RichText 5、Radio Radio RadioListTile 点击按钮附加的文字时，同样可以触发点击效果 6、Slider Slider 范围选择滑块 SliderTheme 自定义Slider的样式 SliderThemeData SliderTheme的data修饰属性 7、Switch Switch Switch、Switch.adaptive(ios风格) 可自定义背景图、背景颜色等 SwitchListTile 衍生组件，可以通过点击关联的文字标签切换switch AnimatedSwitcher 一个在新旧组件之间做渐变切换的组件，有一定的动画效果 Frame1、Align Alignment.center/centerLeft/bottomLeft（yx） 2、Stack Stack 绝对布局，依次叠加。 IndexedStack 显示一个子项列表中的单个子项（只显示指定的一个子选项） 3、Layout Row Column Container 最小空间原则 Center 4、Box ContainerBox 添加额外的限制条件到child上。比如最大/最小高度/宽度 OverflowBox 对子组件添加的约束，不同于子组件从其父组件获得的约束，允许child溢出父控件的空间。 DecoratedBox 在child绘制前或绘制后，添加额外的限制条件到child上，可以用来绘制一个圆形、方形、padding等。 FittedBox 根据需求对child进行缩放、定位。contain/fill/cover/fitHeight/fitWidth LimitedBox 对最大宽高进行限制（前提是LimitedBox不受约束），即将child限制在指定的最大宽高中。 RoraredBox 可以将子组件旋转整数的四分之一 SizedOverflowBox 特定大小的窗口组件，将其约束传递给其子组件，可能会溢出。 UnconstrainedBox 不限制子组件的大小，让子组件尽可能的扩展 5、Expanded Expanded 撑开flex布局子组件空间 6、Spacing Padding 内边距 SliverPadding 列表缩进，应用于每个子元素 AnimatedPadding 缩进变化时的动画 7、Table Table Media1、Image AssetImage 从AssetBundle中获取图像 DecorationImage 修饰Box的图片，一般配合BoxDecoration的img属性使用 ExactAssetImage 带有scale属性的AssetImage FadeInImage 提供placeholder image到目标图片的过度效果 FileImage 展示本地的文件，将给定的File对象解码为图片。Image.file是ImageFile的简写形式 NetworkImage 网络图片 RawImage 显示dart:ui.Image的组件，很少使用，推荐使用Image MemoryImage 将给定的Unit8List缓冲区解码为图像的组件 Image Image.asset 加载项目资源目录的图片，相对路径 Image.network网络资源图片 Image.file加载本地图片 Image.memory 加载Unit8List资源图片 2、Icon Icon ImageIcon 来自ImageProvider的图标，如AssetImage IconTheme 用于应用栏图标的言责、不透明度和大小 IconData IconThemeData 3、Canvas Canvas 用于操作图形的界面 PainterSketch 操作图形的界面 PainterPath 在canvas上绘制的团 CircleProgressBarPainter 操作图形的界面 ComponentsNavigation1、BottomNavigationBarItem2、BottomNavigationbar 底部导航 List1、AnimatedList新增、删除选项时可以设置动画2、ListView最常用3、ListBody不常用，按照主轴方向排列子节点 Card1、Card卡片用于表示一些相关信息，例如相册，地理位置，用餐，联系方式等。 Bar1、AppBar应用栏——顶部导航显示的工具栏2、BottomAppBar底部应用栏 3、BottomNavigationBarItem底部导航应用栏的子项4、SnackBar屏幕底部弹出的提示信息5、SliverbarSliderApperBar可随内容滚动，一般在scroll滑动视图中。与NestedScrollView配合可实现上提到顶的悬停。6、ScrollbarPainter7、FlexibleSpaceBar类似 Sliverbar, ”扩展和折叠的应用栏“，APPBar的一部风，可以扩展和折叠；8、ButtonBar末端对齐的按钮容器，向左向右看齐的按钮。9、SnackBarActionSnackBar，底部消息右侧有无可操作的行为10、TabBar实现并行界面的横向滑动展示 Dialog1、AlertDoalog弹出对话框，可自定义操作选项2、Dialog无可操作选项的弹出层3、AboutDialog通常用于展示信息4、SimpleDialog可以为用户提供多个选项选择，有一个可选的标题，显示在选项上方 Scaffold1、Scaffold基本的布局结构。Scaffold支持顶栏、侧边栏、底部导航栏等常用布局2、ScaffoldState通常用来控制SnackBars和BottomSheets和Drawer的显示和隐藏。 Grid1、GridTileGridList中的一种瓷片组合，包含header、body、footer三部分2、GridView常见的滚动列表，会占满给出的空间区域。3、GridPaper会在GridView的item上层浮现一层网格4、SliverGrid可以将多个item以每行两个的形式进行排列5、GridTileBar通常用来做GridTile的header与footer组件。 Scroll1、ScrollView滚动视图，属于抽象类，不能直接实例化。ListView: 常用的ScrollViewPageView： 每个子widget都是视口窗口大小GridView： 一个现实二维子widget的ScrollViewCustomScrollView： 自定义滚动效果的ScrollViewSingleChildScrollView: 只有一个子Widget的ScrollViewScrollNotification、NotificationListener： 可以用于在不使用ScrollController的情况下查看滚动位置的widget 2、Scrollable一个可以使内容滚动的Widget3、ScrollbarPainter用户绘制滚定条的CustomPainter。4、ScrollMetrics包含当前ViewPort及滚动位置等信息，抽象类，不可被实例化。5、ScrollPhysics确定滚动组件的物理属性6、BoxScrollView使用单个子布局模型的ScrollViewListView、GridView、CustomScrollView7、CustomScrollView自定义滚动效果的ScrollView8、NestedScrollView （⭐️）可以嵌在另一个滚动视图中的ScrollView Tab1、TabTab切换，如果同时传给Tab icon和text，text会展示在icon下面 Menu1、CheckedPopupMenuItem带有选中标记的弹出菜单，配合PopupMenuButton使用2、DropdownMenuItemDropdownButton创建的一个菜单项，配合DropdownButton使用3、PopupMenuButton一个提供菜单栏弹出对话框的按钮4、PopupMenuDivider菜单栏弹出对话框中每一项的水平线5、PopupMenuEntry弹出菜单的一个基类6、PopupMenuItem Pick1、DayPicker显示给定月份的日期，并可以选择一天2、MonthPicker选择一个月的可滚动月份列表，同上3、YearPicker同上4、ShowdatePicker日期选择器的对话框5、CityPicker显示中国的省市县区，通过函数showCityPicker调用，在容器窗口上弹出遮罩层 Chip1、Chipchip是表示属性，文本，实体或动作的元素。 2、ChipTheme描述chip的颜色，形状和文本样式3、ChipThemeData保存chip主题的颜色，形状和文本样式4、ChoiceChip允许从一组选项中进行单一的选择5、FilterChip通过使用标签或者描述性词语来过滤内容6、InputChip输入型chip7、RawChip Panel1、ExpansionPanelList扩展面板，包含一个标题和一个正文，可以展开或者折叠。面板展开，主体可见。 Progress1、LinearProgressIndicator一个线性进度条2、CircularProhressIndicator循环进度条，旋转表示进度 ThemesMaterail1、MaterialApp代表Material设计风格的应用2、MaterailColor颜色值3、MaterailButton4、MaterailPageRoute页面跳转携带参数替换整个屏幕的页面路由5、MaterailAccentColor用来定义单一的强调色，以及四种色调的色系6、MergeableMaterialItem Cupertino（IOS style）1、CupertinoAppCupertino苹果设计风格的应用，用于创IOS风格应用的顶层组件（Cupertino苹果电脑的全球总公司所在地，位于美国旧金山）。包含了iOS应用程序通常需要的许多widget2、CupertinoButtoniOS风格的button3、CupertinoColorsiOS平台常用的颜色4、CupertinoIconsCupertino图标的标识符5、CupertinoNavigationBariOS风格的导航栏6、CupertinoPageRouteiOS风格全屏切换路由的滑动动画7、CupertinoPageScaffold实现单个iOS应用程序页的页面布局8、CupertinoPickeriOS风格的选择器9、CupertinoPopupSurface像iOS弹出式表面，快速实现一个圆角弹框10、CupertinoScrollbariOS风格的滚动条11、CupertinoSlideriOS风格的Slider，选择连续性或非连续性的数据12、CupertinoSegmentedControl展示一些用户可以选择的选项13、CupertinoSliverNavigationBariOS-11风格下拥有较大标题块的导航栏目14、CupertinoSwitchiOS风格的switch开关15、CupertinoTabBariOS风格的底部导航栏16、CupertinotabScaffoldiOS应用程序的选项卡的根布局结构17、CupertinoTabView具有自己的Navigator状态与历史记录的选项卡试图组件。该组件有自己的路由体系，有自己的导航体系，并且他自身内部的导航系统并不与任何父母元素共享18、CupertinoTimerPickeriOS风格下的时间选择组件","link":"/2019/02/12/Flutter%E7%BB%84%E4%BB%B6%E5%90%88%E9%9B%86/"},{"title":"Ghost 实现文章归档","text":"Ghost系统目前暂不支持文章归档，遂手动实现。方法：通过调用Ghost API实现 启用ghost测试功能进入ghost后台，在实验功能-&gt;启用测试功能能中开启测试功能，这样就可以使用Ghost API获取数据。 新建自定义页面 首先创建一个静态页面：在ghost后台新建页面，发布为 独立页面 ，标题为archives，网址可以设置为域名/archives 接着创建一个自定义页面模板：该模板是第一步创建的静态页面的模板，创建一个page-url.hbs模板，如果第一步设置的页面网址为域名/archives，那么模板即为page-archives.hbs。将该模板上传至主题根目录下即可，此时访问域名/archives，即会调用自定义的page-archives.hbs这个模板。（由于新建的模板没有任何内容，所以页面会显示为空，可以赋值page.hbs中的内容测试查看）调用Ghost API实现文章归档 所需工具：jQuery、momentjs文档：Ghost API文档：http://api.ghost.org/v0.1/docsMomentjs文档：http://momentjs.cn/docs/世界时区差计算：http://www.12sign.cn/htmls/help/worldtimezone.htm 在page-archives.hbs中调用Ghost API即可： 123456789101112131415161718192021222324252627282930313233343536373839404142434445/** * 调用ghost API，完成文章归档功能 * 所需组件：jQuery、moment.js * @ldsun.com */jQuery(document).ready(function() { //获取所有文章数据，按照发表时间排列 $.get(ghost.url.api('posts', { limit: 'all', order: &quot;published_at desc&quot; })).done(function(data) { var posts = data.posts; var count = posts.length; for (var i = 0; i &lt; count; i++) { //调用comentjs对时间戳进行操作 //由于ghost默认是CST时区，所以日期会有出入，这里消除时区差 var time = moment(posts[i].published_at).utcOffset(&quot;-08:00&quot;); var year = time.get('y'); var month = time.get('M')+1; var date = time.get('D'); if( date&lt;10 ) date = &quot;0&quot;+date; var title = posts[i].title; var url = &quot;http://www.ldsun.com&quot;+posts[i].url; //首篇文章与其余文章分步操作 if (i &gt; 0) { var pre_month = moment(posts[i - 1].published_at).get('month')+1; //如果当前文章的发表月份与前篇文章发表月份相同，则在该月份ul下插入该文章 if (month == pre_month) { var html = &quot;&lt;li&gt;&lt;time&gt;&quot;+date+&quot;日&lt;/time&gt;&lt;a href='&quot;+url+&quot;'&gt;&quot;+title+&quot;&lt;/a&gt;&lt;/li&gt;&quot;; $(html).appendTo(&quot;.archives .list-&quot;+year+&quot;-&quot;+month); } //当月份不同时，插入新的月份 else{ var html = &quot;&lt;div class='item'&gt;&lt;h3&gt;&lt;i class='fa fa-calendar fa-fw' aria-hidden='true'&gt;&lt;/i&gt; &quot;+year+&quot;-&quot;+month+&quot;&lt;/h3&gt;&lt;ul class='archives-list list-&quot;+year+&quot;-&quot;+month+&quot;'&gt;&lt;li&gt;&lt;time&gt;&quot;+date+&quot;日&lt;/time&gt;&lt;a href='&quot;+url+&quot;'&gt;&quot;+title+&quot;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&quot;; $(html).appendTo('.archives'); } }else{ var html = &quot;&lt;div class='item'&gt;&lt;h3&gt;&lt;i class='fa fa-calendar fa-fw' aria-hidden='true'&gt;&lt;/i&gt; &quot;+year+&quot;-&quot;+month+&quot;&lt;/h3&gt;&lt;ul class='archives-list list-&quot;+year+&quot;-&quot;+month+&quot;'&gt;&lt;li&gt;&lt;time&gt;&quot;+date+&quot;日&lt;/time&gt;&lt;a href='&quot;+url+&quot;'&gt;&quot;+title+&quot;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&quot;; $(html).appendTo('.archives'); } } }).fail(function(err) { console.log(err); });}); 效果可以进入archives页面查看：Archives 完整代码已上传至Git:","link":"/2016/07/23/Ghost-%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E5%BD%92%E6%A1%A3/"},{"title":"Golang channel","text":"1、什么是 channel（管道/通道）?在 golang 中，channel 是多个 goroutine (线程) 之间传递和同步数据的一种手段。同一时刻，仅有一个线程可以向 channel 发送数据，同样的，同一时刻也只能有一个线程能从 channel 读取数据。 channel 的特性使得它可以解决并发编程可能造成的死锁问题，同时也是 Mutex (上锁)及 sync 多线程编程的替代方案，可以简化代码结构。 2、channel 的声明方式12345var c chan int // var 关键字声明，缓冲int类型数据var c chan string // 缓冲string类型数据c := make(chan int) // make关键字声明，非缓冲管道c := make(chan int, 10) // 缓冲管道type ChanInt chan int // 设置别名 总结为： 通过 chan 关键字标识为管道 有两种声明方式 make 方式可以生成缓冲管道及非缓冲管道 3、缓冲 channel 和无缓冲 channel 区别？1234channel1 := make(chan int) // 无缓冲channel2 := make(chan int, 2) // 有缓冲len(channel1) // 长度cap(channel2) // 容量 无缓冲：缓冲为1，最多只能缓冲1个数据。无缓冲的读写实际为同步操作，只有当写与读操作匹配时，才会继续，否则会死锁！所以不能同时将读写置于主线程，如果主线程中有读/写操作，必须置于分线程的声明后，以下为三种正确的写法： 123456789101112131415161718192021c := make(chan int)// 1go func() { &lt;-}c &lt;- 1// 2go func() { c &lt;- 1}&lt;-c// 3go func() { c &lt;- 1}go func() { &lt;-c} 非缓冲的读和写操作必须“相遇”才能执行，否则会**阻塞**。就是一个送信人去你家门口送信 ，你不在家 他不走，你一定要接下信，他才会走 有缓冲：最大缓冲等于容量，相当于一个先进先出的队列。有缓冲的管道，只有当管道容量已存满，再未取走值的情况下继续放值时才会发生阻塞。 4、巧用 channel通过 channel 的某些奇技淫巧，可以替代 sync，简化代码量，如下示例： 1、 在一个非缓冲管道中，依次循环存入值，并逐个取出 sync实现方法： 12345678910111213141516171819202122232425262728293031323334package mainimport ( &quot;fmt&quot; &quot;sync&quot;)var wg sync.WaitGroup //队列func main() { // 先创建一个非缓冲管道 c := make(chan int) wg.Add(2) go func() { //子线程 for i := 0; i &lt; 10; i++ { c &lt;- i //写入数据 fmt.Println(&quot;写入数据&quot;) } wg.Done() }() go func() { for i := 0; i &lt; 10; i++ { a := &lt;-c fmt.Println(a) //读取数据 fmt.Println(&quot;读取数据&quot;) } wg.Done() }() wg.Wait()} =&gt; 使用 channel 实现： 12345678910111213141516171819package mainimport &quot;fmt&quot;func main() { c := make(chan int) go func() { for i:=10; i&lt;10; i++ { fmt.Println(&quot;------&quot;) c &lt;- i } close(c) }() for n := range c { fmt.Println(&quot;+++++&quot;) fmt.Println(n) }} 注：for n := range n 和 close(c) 配合使用，成对出现。for 循环会监视管道c，一旦管道中有数据，立即执行循环中的命令，取出值，直到 close(c) 命令关闭管道，循环结束 2、 等待多个分线程执行完毕再关闭通道——巧用多个 channel sync 实现方法： 12345678910111213141516171819202122232425262728293031323334353637383940414243package mainimport ( &quot;fmt&quot; &quot;sync&quot;)func main() { c := make(chan int) //创建通道 var wg sync.WaitGroup //队列 wg.Add(2) go func() { fmt.Println(&quot;111111111&quot;) for i := 0; i &lt; 10; i++ { c &lt;- i } wg.Done() }() go func() { fmt.Println(&quot;22222222&quot;) for i := 10; i &lt; 20; i++ { c &lt;- i } wg.Done() }() go func() { fmt.Println(&quot;33333333&quot;) wg.Wait() close(c) }() for n := range c { // &lt;-c 有返回值 fmt.Println(n) }} =&gt; channel 解决方案： 123456789101112131415161718192021222324252627282930313233343536package mainimport ( &quot;fmt&quot;)func main() { c := make(chan int) done := make(chan bool) go func() { for i := 0; i &lt; 10; i++ { c &lt;- i } done &lt;- true }() go func() { for i := 0; i &lt; 10; i++ { c &lt;- i } done &lt;- true }() go func() { &lt;-done //死锁 &lt;-done close(c) } for n := range c { fmt.Println(n) }}","link":"/2018/01/30/Golang-channel/"},{"title":"Golang channel进阶","text":"将向管道中写入数据的称为“生产者”，从管道中读取数据的称为“消费者”。 1、生产者与消费者关系在上篇文章中，生产者与消费者是1:1及n:1的关系，那么能不能实现1:n的关系嘞？即一个生产者向管道添加数据，多个消费者从管道读取？示例如下： 1:2案例： 123456789101112131415161718192021222324252627282930313233343536373839404142package mainimport ( &quot;fmt&quot;)// 生产者 对 消费者 ：1 -&gt; 2func main() { c := make(chan int) done := make(chan bool) // 生产者：大黄 go func() { for i := 0; i &lt; 100; i++ { fmt.Println(&quot;生成者 大黄：&quot;, i) c &lt;- i } close(c) }() // 消费者：小明 go func() { // range 会一直不断检测c管道中的数据，如果有，读取，否则等待，直到显示的close关闭通道 for n := range c { fmt.Println(&quot;消费者：小明:&quot;, n) } done &lt;- true }() // 消费者：大明 go func() { // n 等价于 &lt;-c for n := range c { fmt.Println(&quot;消费者：大明:&quot;, n) } done &lt;- true }() &lt;-done &lt;-done} 修改上述案例，实现1:n： 12345678910111213141516171819202122232425262728293031323334353637package mainimport ( &quot;fmt&quot;)// 生产者 对 消费者 ：1 -&gt; nfunc main() { c := make(chan int) done := make(chan bool) n := 10 // 生产者：大黄 go func() { for i := 0; i &lt; 100; i++ { fmt.Println(&quot;生成者生产数据:&quot;, i) c &lt;- i } close(c) }() for i := 0; i &lt; n; i++ { // 消费者：小明 go func(idx int) { // range 会一直不断检测c管道中的数据，如果有，读取，否则等待，直到显示的close关闭通道 for n := range c { fmt.Println(&quot;消费者&quot;,idx,&quot;消费数据:&quot;, n) } done &lt;- true }(i) } for i := 0; i &lt; n; i++ { &lt;-done }} 在循环创建消费者分线程时，使用闭包特性，将i值保存在分线程中。 2、封装channel为了提高代码可读性、复用性，便于维护，可以将channel封装于函数方法中，channel可作为函数的参数或返回值，示例如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package mainimport &quot;fmt&quot;// 生产者和消费者一定是配对的状态func main() { // c是一个管道 c := incrementor() //把管道作为返回值 cSum := puller(c) //把管道作为参数 for n := range cSum { fmt.Println(n) // 0 ...9 }}// 类型：func () chan int// chan int 返回值类型func incrementor() chan int { // 创建一个管道 out := make(chan int) // 通过主线程创建一个分线程 go func() { //子线程 for i := 0; i &lt; 10; i++ { out &lt;- i //生产数据 } close(out) }() // 返回out管道 return out}// 函数类型：func (chan int) chan int// 返回值类型：chan int// 参数类型：chan intfunc puller(c chan int) chan int { // 创建一个新的管道 out := make(chan int) // 创建一个子线程 go func() { var sum int // &lt;-c // 通过range取读取管道c里面的数据，这个for跳出循环的时间为管道c被关闭 for n := range c { sum += n } // out &lt;- sum 什么时候执行？ out &lt;- sum //生产者 close(out) }() return out} 3、单向管道、双向管道双向通道：前面我们以var c chan int形式声明的通道，即类型为chan type的channel都是双向通道。双向通道顾名思义，就是能存数据又能读数据单向通道：单向通道，就是只能存或只能读的channel声明单向通道： 12345var readChan &lt;-chan int // 只读的channelvar c WriteChan&lt;- int // 只写的channelreadChan &lt;- 1 // 报错&lt;-writeChan // 报错 对只读的管道执行写操作、对只写的管道执行读操作都会报错。","link":"/2018/02/01/Golang-channel%E8%BF%9B%E9%98%B6/"},{"title":"Golang并发编程、串行编程","text":"线程概要1、什么是进程，线程，多线程？ 12345开个QQ，开了一个进程；开了迅雷，开了一个进程。在QQ的这个进程里，传输文字开一个线程、传输语音开了一个线程、弹出对话框又开了一个线程。所以运行某个软件，相当于开了一个进程。在这个软件运行的过程里（在这个进程里），多个工作支撑的完成QQ的运行，那么这“多个工作”分别有一个线程。所以一个进程管着多个线程。通俗的讲：“进程是爹妈，管着众多的线程儿子”... 进程： 一个正在运行的程序一般就是一个进程，一个进程中可以有多个线程线程：一条有序的CPU命令的集合体多线程：多条有序CPU命令的集合体 备注：一个CPU在同一时刻只能执行一个CPU命令 2、一个CPU可以并发编程（多线程）吗？ 例如：3个线程：（上下文切换-&gt;线程切换（时间片轮转）） 并发编程线程1： 5个命令线程2： 3个命令线程3： 8个命令 线程1、线程2、线程3在一个CPU的情况下，进行并发编程，由于CPU在同一时间只能执行一个命令，所以需要通过时间片的轮转 3、并发/并行编程、串行编程并发编程：多个线程，会有时间片的分配问题，多个线程之间会不断的来回切换串行编程：按照顺序一一的去执行 4、CPU有分类：CPU分为两种：物理CPU、逻辑CPU 一个物理CPU可以虚拟出多个逻辑CPU（多核） 8核同一时刻可以最多执行八个cup命令 5、多线程编程优缺点：优点：分线程可以处理耗时操作，不会出现主线程阻塞缺点：资源竞争，内存消耗，死锁 golang多线程1、创建多线程： 多线程通过 go 关键字创建分线程 引入 sync 库控制多线程，var wg sync.WaitGroup 创建实例。 wg.Add() 方法声明分线程数。 wg.Wait() 方法等待声明的线程全部执行完时（线程数为0时），才会执行后续代码； 在每个分线程。 wg.Done() 表示该分线程执行结束，告知主线程（每当分线程执行结束，wg.Add() 声明的线程数减一）。 12345678910111213141516171819202122232425262728293031package mainimport ( &quot;fmt&quot; &quot;time&quot; &quot;sync&quot;)var wg sync.WaitGroupfunc main() { wg.Add(2) // 添加两个线程 go f1() go f2() wg.Wait() // 等待所有添加的线程执行结束 }func f1() { for i:=0; i&lt;100; i++ { fmt.Println(&quot;f1&quot;, i) time.Sleep(1 * time.Seconed) // 等待2s } wg.Done() // 当前分线程执行结束，通知主线程}func f2(){ for i:=0; i&lt;200; i++ { fmt.Println(&quot;f2&quot;, i) } wg.Done() // 当前分线程执行结束，通知主线程} 2、资源竞争、上锁 并发编程由于是CPU在多个线程建来回切换，如果多个线程对同一全局变量进行操作，则无法预测出现的结果（因为CPU在多线程间的切换是随机的）。这时就需要对数据进行上锁，即同一时刻，同一数据只能被一个线程操作。当操作时对该数据上锁，在此期间，其他线程无法操作该数据，只能等待。当该数据的操作完成时，再对其进行解锁，这样等待中的其他线程就可以操作该数据。 检测资源竞争：go run -race main.go 12345678910111213141516171819202122232425262728293031package mainimport ( &quot;fmt&quot; &quot;math/rand&quot; // 随机数 &quot;time&quot; &quot;sync&quot;)var wg sync.WaitGroupvar counter intvar mutex sync.Mutex // 上锁、解锁func main() { wg.Add(2) incrementor(&quot;Foo:&quot;) incrementor(&quot;Bar:&quot;) wg.Wait()}func incrementor(s string) { rand.Seed(time.Now().UnixNano()) for i:=0; i&lt;20; i++ { time.Sleep(time.Duration(rand.Intn(3)) * time.Millisecond) mutex.Lock() // 上锁 counter ++ fmt.Println(s, i, &quot;counter:&quot;, counter) mutex.Unlock() // 解锁 } wg.Done()}","link":"/2018/01/26/Golang%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%81%E4%B8%B2%E8%A1%8C%E7%BC%96%E7%A8%8B/"},{"title":"Golang指针","text":"golang中的指针与c语言指针略有不同。 1、基本类型的指针 12var num int = 10var p *int = &amp;num // 指针的类型为所指向的变量的类型前加* 2、数组的指针与指针数组 数组的指针： 1234arr := [3]int{1, 2, 3}var arrp *[3]int // 数组的指针a := &amp;arr // 直接取数组变量的地址赋值会报错（arrp = &amp;arr）arrp = a // 通过第三个变量传递 指针数组： 123456arr := [3]*int{}numArr := [3]int{1, 2, 3}for i, v := range numArr { arr[i] = &amp;v fmt.Println(*arr[i])} 3、字典的指针 123456maps := map[string]string{ &quot;name&quot; : &quot;ludis&quot;, &quot;age&quot;: &quot;18&quot;,}var p *map[string]string = &amp;maps // 字典可直接取地址赋值给指针变量，不同于数组，需要通过中间变量fmt.Println((*p)[&quot;name&quot;]) // 取值时*指针变量需要括号括起来 4、函数的指针与指针函数 函数的指针： 123456789package mainimport &quot;fmt&quot;func main { fmt.Println(add) // 0x1093c40}func add() {} 函数声明后，函数名变量本身就是指针类型，存储的是指向函数体的地址。 因此当对函数变量赋值给其他变量时，属于浅拷贝，只是拷贝指向函数的地址。 指针函数：指针函数与结构体方法类似，见下。 5、 结构体的指针 结构体创建对象： 123456789101112131415161718192021222324252627282930313233343536package mainimport &quot;fmt&quot;type Person struct { name string age string}func main() { // var关键字声明对象 var person1 = Person{ &quot;佩奇&quot;, &quot;3&quot;, } // := 简写声明 person2 := Person{ &quot;佩奇粑粑&quot;, &quot;28&quot;, } // new关键字声明 var person3 = new(Person) // 等同于 person3 := &amp;Person{&quot;佩奇麻麻&quot;, &quot;26&quot;} person3.name = &quot;佩奇麻麻&quot; person3.age = &quot;26&quot; fmt.Println(person1, person2, person3) // {佩奇 3} {佩奇粑粑 28} &amp;{佩奇麻麻 26} p1 := person1 p2 := person2 p3 := person3 p1.name = &quot;猪宝宝&quot; p1.name = &quot;猪爹&quot; p1.name = &quot;猪妈&quot; fmt.Println(person1, person2, person3) // {佩奇 3} {佩奇粑粑 28} &amp;{猪妈 26}} 从结果可以看出： 前两种声明方式创建，变量中直接存储的是对象，对其进行拷贝为深拷贝。 使用new创建，变量中存储的是地址，对其拷贝为浅拷贝。 结构体的方法： 1234567891011121314151617181920212223242526272829303132333435package mainimport &quot;fmt&quot;type Person struct { name string age int}func (p Person) setName() { p.name = &quot;小猪佩奇&quot;}func (p *Person) setAge(age int) { p.age = age}func main() { // var关键字声明对象， 等同于:=声明 var person = Person{&quot;佩奇&quot;, 3} fmt.Println(person.name, person.age) // 佩奇 3 person.setName() person.setAge(6) fmt.Println(person.name, person.age) // 佩奇 6 // new 声明 pigone := new(Person) // 🌚 not pgone pigone.name = &quot;pig&quot; pigone.age = 69 fmt.Println(pigone) // &amp;{pig 69} pigone.setName() pigone.setAge(96) fmt.Println(pigone) // &amp;{pig 96}} 由结果可知： 结构体的方法，如果传入的值为对象类型时（setName声明方式），不管传入的是值类型（对象）还是引用类型（指针），在方法中都会深拷贝传入的对象，修改值后传入的对象不收影响。 如果结构体方法传传参类型为指针类型时（setAge声明方式）,不管传入的是什么类型，都属于浅拷贝，修改值影响传入的对象。 6、interface 接口 1234567891011121314151617181920212223242526272829303132package mainimport &quot;fmt&quot;// 结构体type Person struct { name string age int}// 结构体方法func (p Person) fun1 { p.name = &quot;大猪&quot;}func (p *Person) fun2 { p.name = &quot;小猪&quot;}// 接口type PersonInfo interface { fun1() fun2()}func main() { person := Person{&quot;猪猪侠&quot;, 9} person1 := new(Person) var p PersonInfo = person // 报错 var p PersonInfo = &amp;person // 正确 var p PersonInfo = person1 // 正确} 结论： 声明接口时，接口中的函数必须在结构体中有声明 当结构体的方法中，有一个（最少一个）是引用类型（传递指针）的方法时，那么给接口变量赋值时，必须使用引用类型！ END🤔","link":"/2018/01/27/Golang%E6%8C%87%E9%92%88/"},{"title":"Golang数组、map、函数及类","text":"数组/切片数组声明： 1234567891011121314151617181920212223242526普通声明：var arr = [5]int{} // 长度固定为5，不可扩展，{}中为初始值，默认为0arr := [5]string{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;}var arr [5]int // [0, 0, 0, 0]make关键字声明数组切片：var arr = make([], 2, 4) // 长度 len(arr) 为2，容量 cap(arr) 为4，长度决定存储量，容量不够时翻倍arr := make([], 1, 1)arr = append(arr, 1) // len(arr)=1 cap(arr)=1arr = append(arr, 2) // len(arr)=2 cap(arr)=2arr = append(arr, 3) // len(arr)=3 cap(arr)=4截取、拼接数组：arr1 :=[]int{1, 2, 3, 4, 5, 6}arr2 :=[]int{7, 8, 9}arr1[:3] // 等价于arr1[0:3] =&gt; [1, 2, 3]arr1[3:] // 等价于arr[3:5] =&gt; [4, 5, 6]arr1 = append(arr1, arr2...) // arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]二维数组：var arr = [2][2]int{} // [[0, 0], [0, 0]]遍历：for index, value := range arr { fmt.Println(index, value)} 区别于 javascript: 数组中只能存储相同类型的值 只有make关键字声明的切片长度可变 mapmap字典，对应于javascript中的对象，即为键值对的集合 123456789101112131415161718192021222324普通声明方式：var map = map[string]string{ &quot;name&quot;: &quot;ludis&quot;, &quot;age&quot;: &quot;18&quot;,}map := map[int]string{ 1: &quot;first&quot;, 2: &quot;second&quot;,}make关键字声明：var map = make(map[string]string) // map == nilmap[&quot;name&quot;] = &quot;ludis&quot; // 赋值delete(map, &quot;name&quot;) // 删除// 判断是否存在某属性if val, ok := map[&quot;name&quot;]; ok { fmt.Println(val) fmt.Println(ok)}遍历:for _,value := range map{ fmt.Println(value)} 函数123456789101112131415161718192021222324252627282930三种函数声明方式：func function(name string, age int) string{ reutrn name+string(int)}var function = func(name string, age int) string{ reutrn name+string(int)}function := func(name string, age int) string{ reutrn name+string(int)}函数类型为：(去掉函数名及变量名)func(string, int) string1、通过func关键字声明的为全局函数，等同于用var声明的全局函数，不能再函数体内用func声明函数2、在函数体内声明局部函数的方法为 := 简写方式3、函数声明会提升，变量声明不会提升回调函数/函数作为参数、函数作为返回值：func getUserName(name string, f func(name string, age int)){ f(name)}func getUserName(name string) func(string){ return func(name string){ fmt.Println(name) }} 类与继承、复合、重写123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475类的定义：通过关键字 type 定义type Animal struct { age int weight float64}类的方法定义：func (animal *Animal) setAge(age int){ animal.age = age}func (animal *Animal) getWeight() float64{ return animal.weight}// 通过 (animal *Animal) 将函数与类绑定，使其成为类的方法// (animal Animal) 不加地址符时为深拷贝，加地址符为浅拷贝创建类的对象：animal := Animal{18, 66.6}animal.setAge(8) // animal.age = 8fmt.Println(animal.getWeight()) // 66.6复合：(汽车有四个轮子、有品牌；轮子有半径。汽车复用轮子类)type Wheel struct { r float}type Car struct { wheels [4]intWheel brand string}wheel := Wheel{66.6}wheels := [4]Wheel{wheel, wheel, wheel, wheel}car := Car{ wheels: wheels, brand: &quot;Tesla&quot;,}fmt.Print(car)继承：（动物、狗）type Animal struct { age int weight float64}func (a *Animal) backAgeAndWeight() (int, float64) { return a.age, a.weight}// 方法重写func (d *Dog) backAgeAndWeight() (int, float64) { return d.age, d.weight}type Dog struct { // animal Animal -&gt; Animal 直接继承为自有属性 Animal name string age int}dog := Dog{ Animal: Animal{5, 6}, name: &quot;二哈&quot;, age: 18,}// 继承fmt.Println(dog.age)// 复合-&gt;模拟继承fmt.Println(dog.Animal.weight)// var animal Animal = Dog{}// 父类的指针指向子类的对象 -&gt; 多态// go模拟继承，非正真的继承 dog.age != dog.Animal.age，通过复合模拟真正的继承fmt.Println(dog.Animal.backAgeAndWeight())fmt.Println(dog.backAgeAndWeight()) go语言中的继承并非正真意义上的继承，而是通过复合的方式模拟继承，当子类继承父类后，子类创建的对象中，包含一个隐藏的父类对象，其中包括父类的属性及方法。当在子类创建的对象中定义重名的属性/方法时，并不会修改父类对象中的属性/方法，而是直接在子类创建的对象上添加，类似javascript中的原型链，当查询对象的属性/方法时，优先在对象上查找，未找到时才会去继承自父类的对象上查找。所以说golang的继承是伪继承。","link":"/2018/01/23/Golang%E6%95%B0%E7%BB%84%E3%80%81map%E3%80%81%E5%87%BD%E6%95%B0%E5%8F%8A%E7%B1%BB/"},{"title":"H5在全屏Webview中双端适配刘海屏","text":"背景：最近遇到一个看似常规的H5需求，是App内嵌的一个功能模块，看样子跟往常一样重复造轮子就OK了，客户端开个Webview加载页面即可。 正常我们遇到最多的是下面这种类型： 这种的话一般是封装一个Webview包含返回+标题+分享功能，然后加载H5即可，返回即关闭Webview，标题是读取网页的Title属性，分享是调起客户端的分享弹窗。 然是这次的H5有点不寻常的东西： 导航栏除了返回键、title、右侧的操作菜单(进入另一个H5页)，在title还有一个操作项❔，用于点击弹出说明框。 有一个穿透状态栏和导航栏的背景 大概长下面这样： 向上面的这种复杂页面一般是客户端做的，但是！！！ 因为种种原因，最后商量用H5做。那看到这样的设计图，机智的攻城狮们一般会跟产品争论一番讨论说你这背景图做不了，只能到导航栏以下，并且你这个问号得移到其他地方bulabulabula。。。 然而作为一名专业的攻城狮，我们当然是奔着最佳的视觉感官+用户体验去的，遇到问题要克服之！ 那么确定100%还原设计图后，首先想到的一个方法是和双端定义一系列协议，包括设置全屏背景图、在title后面加操作按钮（及隐藏方法，因为到其他页面就没了），在右侧加自定义的菜单，点击后可跳转其他页面。这个看着就很麻烦，涉及到一系列的交互想想就头疼，还不如直接原生写的痛快一点。和客户端你同学讨论后他们果然面露难色，在我说完第二秒就否决的这种做法，原因很简单： 1、交互太复杂2、扩展性太差，下次H5的设计换个样子又得加新交互 最终决定采用全屏Webview的形式，整个页面交给H5控制，这样不管页面设计成什么样都能实现，什么全屏背景，设么导航啦加各种东西通通不在话下。于是愉快的开发开始了。 然鹅在打码到一半的时候我意识到一个问题：双端的状态栏高度不一致，并且现在还有刘海屏存在🌚 这可肿么办？ 一、IOS适配首先对于IOS来说，乔帮主整的还是比较规范的，毕竟IOS闭源系统只能跑在Apple硬件上，设备型号有限，已知各机型尺寸如下： 注： 这里获取到的px值跟web中的px虽然单位一样，但并不是我们需要的值！！！Web所需的px实际为IOS中的pt值…，px转pt需要根据设备的ppi(Pixels Per Inch: 像素密度)进行转换： px: pixel 像素，是屏幕上的显示的基本点，他并不是长度单位，这个点可以很大，也可以很小。点小的话就很清晰，我们称之为“分辨率高”，反之就是“分辨率低”。所以像素是一个相对单位。 pt: point 准确的说法是一个专用印刷单位“镑”，大小为1/72英寸，是一个长度单位。也是绝对长度。 可以看到ios中的px转pt根据设备的ppi大概是3:1/2:1/1:1转换。转换完可以看到： 4.7寸6、6s、7、8，状态栏高度为20pt，导航栏高度为44pt. 5.5寸的6p、6sp、7p、8p，状态栏高度为18pt，导航栏高度为44pt. 拥有刘海屏的X、XR、XS、XS MAX、11等一系列刘海屏，状态栏高度为44pt，导航栏高度为44pt. 不难发现： 导航栏 高度所有机型都为44pt； 状态栏 高度大致可以根据是否为刘海屏分为两类。没有刘海屏的大小机型分别为18和20pt，可以近似的看成都是20pt来处理，问题不大，有刘海屏的则统一为44pt高，跟导航栏高度相同。 适配方案：iOS端的适配方案有两种：Apple官方适配方案、机型区分适配、jsBridge方案 Apple官方适配方案：1、在粪叉之后引入了一个新概念：“safe area（安全区域）”，安全区域指屏幕内不受圆角、齐刘海、底部小黑条等元素影响的可视窗口。如下图： 2、同时，从iOS11开始，为了适配刘海屏，Apple公司对HTML的viewport meta标签做了扩展 1&lt;meta name=&quot;viewport&quot; content=&quot;viewport-fit=cover&quot;&gt; viewport-fit=cover可设置为auto, contain, cover三种状态，这里我们重点使用cover值，指页面完全充满屏幕。 3、iOS11同时新增了一个特性，constant(safe-area-inset-*)，这是Webkit的一个CSS函数，用于获取安全区域与边界的距离，有四个预定义的变量（单位px）: safe-area-inset-left：安全区域距离左边界距离，横屏时适配 safe-area-inset-right：安全区域距离右边界距离，横屏时适配 safe-area-inset-top：安全区域距离顶部边界距离，竖屏下刘海屏为44px，iphone6系列20px，竖屏刘海适配关键 safe-area-inset-bottom：安全区域距离底部边界距离，竖屏下为34px，竖屏小黑条适配关键 这样适配方案就比较明确了： 首先通过设置&lt;meta name=&quot;viewport&quot; content=&quot;viewport-fit=cover&quot;&gt;让页面充满全屏 通过Webkit内置的CSS函数，获取安全区域与各边之间的间距，然后通过padding/margin/绝对定位等方式，让页面元素展示在安全区域内。 注： Webkit在iOS11中新增CSS Functions: env( )替代constant( )，文档中推荐使用env( )，而 constant( ) 从Safari Techology Preview 41 和iOS11.2 Beta开始会被弃用。在不支持env( )的浏览器中，会自动忽略这一样式规则，不影响网页正常的渲染。为了达到最大兼容目的，我们可以 constant( ) 和 env( ) 同时使用。 12padding-top: constant(safe-area-inset-top); /* iOS 11.0 */padding-top: env(safe-area-inset-top); /* iOS 11.2 */ 最终适配代码如下： 使用@supports查询机型是否支持constant() / env()实现兼容代码隔离，个别安卓也会成功进入这个判断，因此加上-webkit-overflow-scrolling: touch的判断可以有效规避安卓机。 12345678910111213@supports ((height: constant(safe-area-inset-top)) or (height: env(safe-area-inset-top))) and (-webkit-overflow-scrolling: touch) { .fullscreen { /* 适配齐刘海 */ padding-top: 20; padding-top: constant(safe-area-inset-top); padding-top: env(safe-area-inset-top); /* 适配底部小黑条 */ padding-bottom: 0; padding-bottom: costant(safe-area-inset-bottom); padding-bottom: env(safe-area-inset-bottom); }} 机型区分适配这个就比较简单粗暴无脑了。因为目前市面上已有的Apple手机尺寸我们都是已知的，那剩下的就是css中的media适配了： 12345678910111213/* iphone x / xs / 11 pro*/@media only screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) { ...}/* iphone xr / 11 */@media only screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) { ...}/* iphone xs max / 11 pro max */@media only screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) { ...}..... emmmmmm… 工作量大了点，另外每年9月份发布会后要及时更新代码🙈 jsBridge方案如果你跟客户端小哥哥的关系比较好的话，就用这种方案吧😳，让客户端写个方法获取状态栏高度，然后在页面加载的时候通过jsbridge调用获取到状态栏高度，然后设置页面样式即可。 好了，鄙人想到的iOS适配方案到此为止。 二、Android适配方案整完相对规范的iOS，开源的Android就相当眼花缭乱了，机器厂商百花齐放，各厂商的机型也是眼花缭乱。Android机型成百上千，适配方案反而变的简单了！！！why? 因为只有一种方案：JSBridge 像上述iOS的适配方案中，官方适配方案Android肯定是么得了，毕竟机型太多，搞不了官方规范。其次就是CSS media 查询精准适配，如果你的应用只针对于少数机型，那这种方案还是可以用用的，倘若不是那就拜拜了您嘞。 jsBridge方案同iOS，客户端获取状态栏高度后，H5通过JSBridge交互拿到状态栏高度，设置页面样式避开齐刘海区域。 参考： iOS 不同机型尺寸信息 px及pt区别 iOS齐刘海适配方案","link":"/2019/12/10/H5%E5%9C%A8%E5%85%A8%E5%B1%8FWebview%E4%B8%AD%E5%8F%8C%E7%AB%AF%E9%80%82%E9%85%8D%E5%88%98%E6%B5%B7%E5%B1%8F/"},{"title":"HTML5-canvas实现简单动画","text":"Canvas元素是HTML5的一部分，允许脚本语言动态渲染位图像。它最初由苹果内部使用自己Mac OS X WebKit推出，供应用程序使用像仪表盘的构件和Safari浏览器使用。 后来，有人通过Gecko内核的浏览器（尤其是Mozilla 和Firefox），Opera和Chrome ，和超文本网络应用技术工作组建议为下一代的网络技术使用该元素。Novell生产的XForms处理器插件作为Internet Explorer插件支持Canvas 元素。也有人努力使用VML和JavaScript在Internet Explorer支持Canvas功能而不需要插件。Google也已开始了一个项目，使用同样的技术在Internet Explorer支持Canvas能力。但Internet Explorer 自Internet Explorer 9起已经可以支持 canvas 元素。 Canvas由一个可绘制地区HTML代码中的属性定义决定高度和宽度。 JavaScript代码可以访问该地区，通过一套完整的绘图功能类似于其他通用二维的API ，从而使动态生成的图形。Canvas还有一些可能的用途， 包括使用Canvas构造图形，动画，游戏和图片。 下面是Canvas实现的简单动画：弹球动画 HTML5-canvasvar canvas = document.getElementById('ldsun');var flute=canvas.getContext(\"2d\");var width=400; //设置线条获得区域宽度var height=200; //设置线条获得区域高度var start=0 //设置线条起点var exp=1; //设置线条每次移动像素大小flute.strokeStyle = \"rgba(255,0,0,1)\"; //定义颜色function draw(){flute.clearRect(0,0,width,height) // 擦除画布一个区域xy、xyflute.fillStyle=\"blue\"; //定义颜色flute.beginPath(); //从新开始画，防止冲突重叠flute.arc(180,start,20,0,Math.PI2,1); //x坐标，y坐标，半径，Math.PI是圆周率flute.closePath(); //结束画布，防止冲突重叠flute.fill(); //结束渲染start=start+exp; //起点+活动像素位置if(start==0 || start==height-1){ //判断当前线的位置，控制在区域内exp=exp-1; //乘以负一用来调整线路方向}} Ps:两个函数的说明 setInterval(code,millisec) 按照指定的周期来调用函数,返回值为定时器的ID值 clearInterval(idofsetInterval)取消由setInterval()方法设置的定时器。","link":"/2014/02/04/HTML5-canvas%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%8A%A8%E7%94%BB/"},{"title":"HTML5的表单功能合集","text":"1、邮箱的自动验证 只需要type=“email” 2、日期的验证（年月日）：type=”date” 3、时间的验证（格式：00:00）：type=”time” 4、数字的验证 (可以向上加 向下减)type=”number” 5、月份（–年–月）type=”month” 6、周（–年–周）type=”week” 7、range(范围0-100) type=”range” 8、search type=”search” 9、颜色的颜色大全：type=”color” 10、url验证 (必须前面有http://—) type=”url” 邮箱： 日期： 时间： 数字： 月份： 星期： range： search： 颜色： 呵呵呵 喂喂喂 嘿嘿嘿 url: 用户名： html新增表单属性 1、required=“required” 验证时 需要必填 2、placeholder=”请输入用户名” 默认值，给用户提示的,不是提交到服务器的 3、autofocus=”autofocus” 自动聚焦功能，提升用户友好 4、pattern=’\\w{5}’ 在html元素中填写正则表达式 在表单之外也可以提交表单 但是需要 在中 form=“Myform”需要和form表单中的id的值相等即： 自动填充表单:（效果感觉要比下拉列表好多了 而且感觉效果挺好的）list的值要和datalist中的id的值相等这样才能识别到我要显示你的内容： 呵呵呵 喂喂喂 嘿嘿嘿","link":"/2014/02/26/HTML5%E7%9A%84%E8%A1%A8%E5%8D%95%E5%8A%9F%E8%83%BD%E5%90%88%E9%9B%86/"},{"title":"HTTPS：为 Ghost 设置 SSL 连接","text":"HTTPS：超文本传输安全协议（Hypertext Transfer Protocol Secure）是一种网络安全传输协议。在计算机网络上，HTTPS经由超文本传输协议进行通信，但利用SSL/TLS来对数据包进行加密。HTTPS开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性。 HTTPS连接经常被用于万维网上的交易支付和企业信息系统中敏感信息的传输。 HTTPS 与 HTTP 的差异 与HTTP的URL由**http://** 起始且默认使用端口 80 不同，HTTPS的URL由**https://** 起始且默认使用端口**443**。 HTTP是不安全的，且攻击者通过监听和中间人攻击等手段，可以获取网站帐户和敏感信息等。HTTPS被设计为可防止前述攻击，并（在没有使用旧版本的SSL时）被认为是安全的。 Ghost设置SSL首先申请SSL证书，可选择startSSL（免费一年）或自行购买。 具体申请过程较为繁琐，自行search，得到crt证书及key 环境：centos、nginx、nodejs、ghost ssh后执行： mkdir /etc/nginx/ssl cp server.crt /etc/nginx/ssl/server.crt cp server.key /etc/nginx/ssl/server.key 将两个文件上传后，更新nginx配置： 编辑配置文件，以自己实际位置为准 vim /etc/nginx/conf.d/myconf.conf 修改server，监听443端口： 123456789101112131415server { listen 80;+ listen 443 ssl; server_name ldsun.com www.ldsun.com;+ ssl_certificate /etc/nginx/ssl/ldsun.com.crt;+ ssl_certificate_key /etc/nginx/ssl/ldsun.com.key; ... location / {+ proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;+ proxy_set_header Host $http_host;+ proxy_set_header X-Forwarded-Proto $scheme; proxy_pass http://127.0.0.1:2368; ... } } 重启nginx：service nginx restart 注： 从startSSL生成的key为加密key，每次重启nginx都需要输入密码解密，较为麻烦，也比较安全。可以直接将key文件解密，不用每次重启输入密码，相应的修改key文件权限即可保证安全性。 解密命令：openssl rsa -in www.ldsun.com.key -out /etc/nginx/ssl/ldsun.com.key 设置文件权限：chmod 600 ldsun.com.key","link":"/2016/08/01/HTTPS%EF%BC%9A%E4%B8%BA-Ghost-%E8%AE%BE%E7%BD%AE-SSL-%E8%BF%9E%E6%8E%A5/"},{"title":"How to prevent IFRAME from redirecting top-level window","text":"I use sandbox=”…” allow-forms allows form submission allow-popups allows popups allow-pointer-lock allows pointer lock allow-same-origin allows the document to maintain its origin allow-scripts allows JavaScript execution, and also allows features to trigger automatically allow-top-navigation allows the document to break out of the frame by navigating the top-level window Top navigation is what you want to prevent, so leave that out and it will not be allowed. Anything left out will be blocked ex. [php]&lt;iframe sandbox=”allow-same-origin allow-scripts allow-popups allow-forms” src=”http://www.example.com&quot;[/php]","link":"/2014/05/19/How-to-prevent-IFRAME-from-redirecting-top-level-window/"},{"title":"Hyperledger Fabric 环境搭建","text":"所有操作在centos7下完成，其他系统（ubuntu/macos..）类似，修改相应指令即可。 1. 安装Golang在 golang官网 获取最新版本 https://dl.google.com/go/go1.10.1.linux-amd64.tar.gz 下载最新版本 1wget https://dl.google.com/go/go1.10.1.linux-amd64.tar.gz 解压 1sudo tar -C /usr/local -xzf go1.10.1.linux-amd64.tar.gz 设置环境变量vi ~/.bash_profile，增加以下内容 1234export PATH=$PATH:/usr/local/go/bin export GOROOT=/usr/local/go export GOPATH=$HOME/go export PATH=$PATH:$HOME/go/bin 重新载入环境变量 1source ~/.bash_profile 至此 golang 安装成功，输入go version查看版本 2. 安装Docker下载并安装，使用阿里的源： 1curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh - 替换docker hub源的阿里源，加快镜像下载速度： 12345sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{ &quot;registry-mirrors&quot;: [&quot;https://obou6wyb.mirror.aliyuncs.com&quot;]}EOF 修改完后，重启docker，查看docker版本 123systemctl daemon-reloadsudo systemctl restart dockerdocker version 3. 安装docker-compose1、安装pip 1sudo get install python-pip 2、 下载docker-compose 1curl -L https://get.daocloud.io/docker/compose/releases/download/1.12.0/docker-compose-`uname -s`-`uname -m` &gt; ~/docker-compose 3、 将docker-compose移动至/usr/local/bin文件夹当中，使其作为可执行命令文件 1mv ./docker-compose /usr/local/bin/docker-compose 4、修改docker-compose权限 1chmod 755 /usr/local/bin/docker-compose 5、查看版本 1docker-compose version 4. 下载Fabric源码切换至go的GOROOT路径下，即第一步安装go的时候配置的路径，也可输入go env查看。 123456789101112131415161718192021222324[root@VM_162_219_centos ~]# go envGOARCH=&quot;amd64&quot;GOBIN=&quot;&quot;GOCACHE=&quot;/root/.cache/go-build&quot;GOEXE=&quot;&quot;GOHOSTARCH=&quot;amd64&quot;GOHOSTOS=&quot;linux&quot;GOOS=&quot;linux&quot;GOPATH=&quot;/root/go&quot;GORACE=&quot;&quot;GOROOT=&quot;/usr/local/go&quot;GOTMPDIR=&quot;&quot;GOTOOLDIR=&quot;/usr/local/go/pkg/tool/linux_amd64&quot;GCCGO=&quot;gccgo&quot;CC=&quot;gcc&quot;CXX=&quot;g++&quot;CGO_ENABLED=&quot;1&quot;CGO_CFLAGS=&quot;-g -O2&quot;CGO_CPPFLAGS=&quot;&quot;CGO_CXXFLAGS=&quot;-g -O2&quot;CGO_FFLAGS=&quot;-g -O2&quot;CGO_LDFLAGS=&quot;-g -O2&quot;PKG_CONFIG=&quot;pkg-config&quot;GOGCCFLAGS=&quot;-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build440227295=/tmp/go-build -gno-record-gcc-switches&quot; 切换至/usr/local/go目录后，进入src代码目录。如果不存在github.com文件夹，则新建一个。在github.com下新建hyperledger文件夹并进入，此时所在路径为： 1/usr/local/go/src/github.com/hyperledger 在当前目录下，从github拉取fabric源码 1git clone https://github.com/hyperledger/fabric.git 本次使用1.0.0版本（与后面安装的docker fabric镜像版本保持一致！） 12cd fabricgit checkout v1.0.0 到此为止，fabric源码下载成功。 5. 下载Docker Fabric镜像切换到下载的fabric源码目录 1cd /usr/local/go/src/github.com/hyperledger/fabric/examples/e2e_cli 利用源码中的脚本下载1.0.0版本的fabric docker镜像 1source ./download-dockerimages.sh -c x86_64-1.0.0 -f x86_64-1.0.0 下载完后可以执行docker images查看镜像 12345678910111213141516171819202122232425[root@VM_162_219_centos e2e_cli]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEdev-peer1.org2.example.com-mycc-1.0 latest 93a9797573ad 2 hours ago 173 MBdev-peer0.org1.example.com-mycc-1.0 latest bef7e3211370 2 hours ago 173 MBdev-peer0.org2.example.com-mycc-1.0 latest 2884f1a84570 2 hours ago 173 MBdocker.io/hello-world latest f2a91732366c 4 months ago 1.85 kBdocker.io/hyperledger/fabric-tools x86_64-1.0.0 0403fd1c72c7 8 months ago 1.32 GBhyperledger/fabric-tools latest 0403fd1c72c7 8 months ago 1.32 GBdocker.io/hyperledger/fabric-couchdb x86_64-1.0.0 2fbdbf3ab945 8 months ago 1.48 GBhyperledger/fabric-couchdb latest 2fbdbf3ab945 8 months ago 1.48 GBdocker.io/hyperledger/fabric-kafka x86_64-1.0.0 dbd3f94de4b5 8 months ago 1.3 GBhyperledger/fabric-kafka latest dbd3f94de4b5 8 months ago 1.3 GBdocker.io/hyperledger/fabric-zookeeper x86_64-1.0.0 e545dbf1c6af 8 months ago 1.31 GBhyperledger/fabric-zookeeper latest e545dbf1c6af 8 months ago 1.31 GBdocker.io/hyperledger/fabric-orderer x86_64-1.0.0 e317ca5638ba 8 months ago 179 MBhyperledger/fabric-orderer latest e317ca5638ba 8 months ago 179 MBhyperledger/fabric-peer latest 6830dcd7b9b5 8 months ago 182 MBdocker.io/hyperledger/fabric-peer x86_64-1.0.0 6830dcd7b9b5 8 months ago 182 MBdocker.io/hyperledger/fabric-javaenv x86_64-1.0.0 8948126f0935 8 months ago 1.42 GBhyperledger/fabric-javaenv latest 8948126f0935 8 months ago 1.42 GBdocker.io/hyperledger/fabric-ccenv x86_64-1.0.0 7182c260a5ca 8 months ago 1.29 GBhyperledger/fabric-ccenv latest 7182c260a5ca 8 months ago 1.29 GBdocker.io/hyperledger/fabric-ca x86_64-1.0.0 a15c59ecda5b 8 months ago 238 MBhyperledger/fabric-ca latest a15c59ecda5b 8 months ago 238 MBdocker.io/hyperledger/fabric-baseos x86_64-0.3.1 4b0cab202084 10 months ago 157 MB 6. 启动Fabric网络启动Fabric网络实际上是启动下载的Fabric Docker镜像，并执行一系列命令 123cd /usr/local/go/src/github.com/hyperledger/fabric/examples/e2e_cli./network_setup.sh up 最终出现以下提示时启动成功： 12345678910===================== Query on PEER3 on channel 'mychannel' is successful ========================================== All GOOD, End-2-End execution completed ===================== _____ _ _ ____ _____ ____ _____| ____| | \\ | | | _ \\ | ____| |___ \\ | ____|| _| | \\| | | | | | _____ | _| __) | | _|| |___ | |\\ | | |_| | |_____| | |___ / __/ | |___|_____| |_| \\_| |____/ |_____| |_____| |_____| 启动成功后，可以control+c退出，fabric并不会中止，而是在后台运行在docker中。 7. 使用合约测试Fabric网络前面下载的fabric源码中包含了一个合约示例，当启动Fabric网络之后，启动了一个名为mychannel的channel及一个名为mycc的链码。 首先连接到Fabric网络所在的docker容器： 1docker exec -it cli bash 该mycc的合约定义了两个账户a和b，分别查看他们的账户余额: 123peer chaincode query -C mychannel -n mycc -c '{&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]}'peer chaincode query -C mychannel -n mycc -c '{&quot;Args&quot;:[&quot;query&quot;,&quot;b&quot;]}' Query Result为账户余额 12345678910111213141516171819root@6762dba419ff:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer chaincode query -C mychannel -n mycc -c '{&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]}'2018-04-03 12:03:14.367 UTC [msp] GetLocalMSP -&gt; DEBU 001 Returning existing local MSP2018-04-03 12:03:14.367 UTC [msp] GetDefaultSigningIdentity -&gt; DEBU 002 Obtaining default signing identity2018-04-03 12:03:14.367 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 003 Using default escc2018-04-03 12:03:14.367 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 004 Using default vscc2018-04-03 12:03:14.367 UTC [msp/identity] Sign -&gt; DEBU 005 Sign: plaintext: 0A95070A6708031A0C0882DB8DD60510...6D7963631A0A0A0571756572790A01612018-04-03 12:03:14.367 UTC [msp/identity] Sign -&gt; DEBU 006 Sign: digest: 51A66C3205697E626DDDD25E6995FBCC04BDBD6D602E68959D2995EC13DEC8E1Query Result: 902018-04-03 12:03:14.373 UTC [main] main -&gt; INFO 007 Exiting.....2018-04-03 12:03:14.373 UTC [main] main -&gt; INFO 007 Exiting.....root@6762dba419ff:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer chaincode query -C mychannel -n mycc -c '{&quot;Args&quot;:[&quot;query&quot;,&quot;b&quot;]}'2018-04-03 12:08:36.201 UTC [msp] GetLocalMSP -&gt; DEBU 001 Returning existing local MSP2018-04-03 12:08:36.201 UTC [msp] GetDefaultSigningIdentity -&gt; DEBU 002 Obtaining default signing identity2018-04-03 12:08:36.201 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 003 Using default escc2018-04-03 12:08:36.201 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 004 Using default vscc2018-04-03 12:08:36.201 UTC [msp/identity] Sign -&gt; DEBU 005 Sign: plaintext: 0A94070A6608031A0B08C4DD8DD60510...6D7963631A0A0A0571756572790A01622018-04-03 12:08:36.201 UTC [msp/identity] Sign -&gt; DEBU 006 Sign: digest: 0E7915778933F605D5B7D04D52FFF7608F390E0AF2A7B37C6C3FA6027747DF56Query Result: 2102018-04-03 12:08:36.207 UTC [main] main -&gt; INFO 007 Exiting..... 使用合约的invoke方法，从a账户转账20给b账户： 1peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n mycc -c '{&quot;Args&quot;:[&quot;invoke&quot;,&quot;a&quot;,&quot;b&quot;,&quot;20&quot;]}' 转账成功后再次查询a和b的余额，此时余额已经发生变化。转账成功。 123456789101112131415161718root@6762dba419ff:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer chaincode query -C mychannel -n mycc -c '{&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]}'2018-04-03 12:03:14.367 UTC [msp] GetLocalMSP -&gt; DEBU 001 Returning existing local MSP2018-04-03 12:03:14.367 UTC [msp] GetDefaultSigningIdentity -&gt; DEBU 002 Obtaining default signing identity2018-04-03 12:03:14.367 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 003 Using default escc2018-04-03 12:03:14.367 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 004 Using default vscc2018-04-03 12:03:14.367 UTC [msp/identity] Sign -&gt; DEBU 005 Sign: plaintext: 0A95070A6708031A0C0882DB8DD60510...6D7963631A0A0A0571756572790A01612018-04-03 12:03:14.367 UTC [msp/identity] Sign -&gt; DEBU 006 Sign: digest: 51A66C3205697E626DDDD25E6995FBCC04BDBD6D602E68959D2995EC13DEC8E1Query Result: 702018-04-03 12:03:14.373 UTC [main] main -&gt; INFO 007 Exiting.....root@6762dba419ff:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer chaincode query -C mychannel -n mycc -c '{&quot;Args&quot;:[&quot;query&quot;,&quot;b&quot;]}'2018-04-03 12:08:36.201 UTC [msp] GetLocalMSP -&gt; DEBU 001 Returning existing local MSP2018-04-03 12:08:36.201 UTC [msp] GetDefaultSigningIdentity -&gt; DEBU 002 Obtaining default signing identity2018-04-03 12:08:36.201 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 003 Using default escc2018-04-03 12:08:36.201 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 004 Using default vscc2018-04-03 12:08:36.201 UTC [msp/identity] Sign -&gt; DEBU 005 Sign: plaintext: 0A94070A6608031A0B08C4DD8DD60510...6D7963631A0A0A0571756572790A01622018-04-03 12:08:36.201 UTC [msp/identity] Sign -&gt; DEBU 006 Sign: digest: 0E7915778933F605D5B7D04D52FFF7608F390E0AF2A7B37C6C3FA6027747DF56Query Result: 2302018-04-03 12:08:36.207 UTC [main] main -&gt; INFO 007 Exiting..... 至此fabric环境搭建成功，测试成功。 退出docker容器exit 停止fabric docker进程，中止fabric网络 123cd /usr/local/go/src/github.com/hyperledger/fabric/examples/e2e_cli./network_setup.sh down","link":"/2018/04/03/Hyperledger-Fabric-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"title":"IntersectionObserver","text":"IntersectionObserver最近发现一个有趣的API，实际上这个api已经面世好几年了，但最初浏览器兼容性有限，加上此功能使用场景不频繁，且有成熟的替代方案，所以知道的人并不多。 这个接口的功能，简单来说就是：监测页面中的某个元素的可视状态。可以是该元素相对于整个视窗的可见性，也可以是相对于某个父元素的可见性。我们平时使用较多的场景大概有： 举个栗子： 无限加载：滑动到底部时开始加载下页 吸顶效果：在页面滑动时触发某元素的悬浮效果（如下滑到一定位置，顶栏悬浮固定） 目前我们常用的成熟方案是，监听页面/元素的scroll事件，在scroll事件中通过判断元素的位置，来进行相应的逻辑处理。或者是分别通过touchstart touchmove touchend 等触摸事件，来判断滑动方向，滑动距离，再做出相应处理。主流的一些相关功能库基本也是这样的实现原理，如iscroll.js等。 从微信小程序的一个bug说起说起这些方案使用上并没有太明显的问题，然而最近在开发小程序时，有一个滑动吸顶的效果，需要根据滑动距离变换顶部的背景，采用的便是上述的方案，监听scroll-view的滚动事件，根据元素距离顶部的距离实时判断修改。 为了提高性能，多滚动事件采取了节流，在此过程中发现小程序的一个问题，那就是采用节流后，如果滑动过快，小程序bindscroll事件返回的组件距离顶部位置会有错误，比如我从距顶50像素迅速滑到0，此时回调函数返回的任然是50。试验了下跟节流时间关系不大，即便设置几毫秒的节流间隔，已然存在这个问题。而如果不设置节流，在低端机，尤其安卓机上频繁触发，导致页面相当卡顿。 最后搜索半天，在微信开发者社区发现了原因所在。根据官方给出的解决方案，给scroll-view组件增加一个属性throttle=&quot;{{false}}&quot;（官方文档中并无此属性），原因是官方的组件在配发滑动事件时，默认开启了节流，在滑动过快时，有部分事件可能被节流掉，就出现了上述情况，去掉官方节流，保证事件都能触发，然后自己再实现节流即可。 123&lt;scroll-view throttle=&quot;{{false}}&quot; bindscroll=&quot;handleScroll&quot;&gt; 说道半途记起的一个bug，回归正题。使用监听scrool事件的方法，不是用节流肯定是不行的，节流事件如果太短，那么节流效果不明显，时间太长的话，事件响应又不够及时。经过权衡设置了大概50~100ms的延时，让事件的配发频率和响应延时都能接受，但效果任然不够理想，达不到极致的体验。理想情况下，我们追求：响应及时、性能负担小。 无意间看到微信的一个新的api wx.createIntersectionObserver，简单了解后不明觉厉，然后发现浏览器端也有对应的IntersectionObserver API（“交叉观察器”）。由此引出一种新的更完美的解决方案，即抛弃scroll事件，采用新的“交叉观察器” scroll事件的一些缺点：1、响应密集，会造成性能问题2、为解决1，采用节流后响应不够及时3、实现某些需求较为复杂：如，当视频滑到可视区域时自动播放等，需要判断列表中某元素的位置，较为复杂4、统计列表中个元素的曝光量（这个用scroll时间监听的话感觉头都裂了） IntersectionObserverMDN doc介绍： 1IntersectionObserver接口 (从属于Intersection Observer API) 提供了一种异步观察目标元素与其祖先元素或顶级文档视窗(viewport)交叉状态的方法。祖先元素与视窗(viewport)被称为根(root)。 属性： IntersectionObserver.root 要监听元素的父级窗口，及我要监听的元素，是相对于那个视窗的可见性，是整个全屏的视窗，还是页面中某个容器。不传默认为全局的视窗 IntersectionObserver.rootMargin 相对于视窗的偏移量 IntersectionObserver.thresholds 阈值的列表, 按升序排列。阈值指所监听元素的可视比例，全部不可见为0，全部可见为1，配置此属性后，会在到达对应阈值后触发回调事件，如[0.1, 0.4, 1] 表示在可视比例达到10%、40%、100%时，会分别相应回调事件；如果不设置，默认是在元素全显和全隐时分别触发。 方法： IntersectionObserver.disconnect() 使IntersectionObserver对象停止监听工作。 IntersectionObserver.observe() 使IntersectionObserver开始监听一个目标元素。 IntersectionObserver.takeRecords() 返回所有观察目标的IntersectionObserverEntry对象数组。 IntersectionObserver.unobserve() 使IntersectionObserver停止监听特定目标元素。 示例： 12345678910var intersectionObserver = new IntersectionObserver(function(entries) { // If intersectionRatio is 0, the target is out of view // and we do not need to do anything. if (entries[0].intersectionRatio &lt;= 0) return; loadItems(10); console.log('Loaded new items');});// start observingintersectionObserver.observe(document.querySelector('.scrollerFooter')); 阮一峰老师有一篇文章写的很简洁易懂，推荐去看看。 微信小程序 wx.createIntersectionObserver小程序的此API与web端的API如出一辙，使用方法大致相似。 使用步骤： 1、wx.createIntersectionObserver 创建并返回一个IntersectionObserver 对象实例。 2、指定可视窗口参照物 IntersectionObserver.relativeTo 传入一个父级元素，作为可视窗口 IntersectionObserver.relativeToViewport 指定页面的整个窗口作为可视参照 3、IntersectionObserver.observe 开始监听 使用步骤大概就是这三步，具体的配置可参考文档。 总结研究哇这个api后，果断将判断吸顶时用的scroll时间替换为IntersectionObserver，体验就是写法上更简洁，性能更好，能满足更多需求。 所以基本上IntersectionObserver可以完爆scroll了，一些使用广泛的库也开始使用此方案了，so 赶快用起来吧。","link":"/2020/05/14/IntersectionObserver/"},{"title":"JS修改input,textarea,select标签的可读可写属性","text":"通过JS修改input,textarea,select标签的可读可写属性首先,控制input,与textarea只读属性是 readonly 在js中 可以这样去改变,这里要注意js中O要大写 readOnly [code lang=”js”] //按TagName得到input标签数组 var inputList = document.getElementsByTagName(“input”); //循环数组 for( var i = 0; i &lt; inputList.length; i++) { //修改只读属性 true为只读 false为可读可写, inputList[i].readOnly = true; } [/code] textarea也可以这么写，较为简单： [code lang=”js”] $(“form textarea”).prop(“readonly”, true); [/code] select标签没有readonly属性,但是有disabled,所以可以这么做 [code lang=”js”] //按TagName得到select标签数组 var selectList=document.getElementsByTagName(“select”); //循环数组 for( var i = 0; i &lt; selectList.length; i++) { //修改只读属性 true为只读 false为可读可写, inputList[i].disabled = true; } [/code]","link":"/2014/05/10/JS%E4%BF%AE%E6%94%B9input-textarea-select%E6%A0%87%E7%AD%BE%E7%9A%84%E5%8F%AF%E8%AF%BB%E5%8F%AF%E5%86%99%E5%B1%9E%E6%80%A7/"},{"title":"JS跨域抓取信息","text":"众所周知，JS是不能跨域抓取数据的，除非有授权。所以本文并非真的直接跨域抓取，而是换个思路。通过转折，先用PHP抓取所需信息，然后传给JS. 今日，应老师要求，给学校做一个无线网登陆页面。为了更好的适应PC，移动终端，选择bootstrap快速开发，静态页面马上完工。剩下的便是今天要说到的问题： 要从学校主页http://www.bistu.edu.cn抓取通知数据和http://news.bistu.edu.cn/zhxw/抓取学校要闻，都取最新的五条，由于是HTML页面，PHP显得苍白无力，只好用JS。。可惜JS基本白痴，Google发现还不能跨域，虽然有些解决办法，貌似很复杂，对JS小白是在做不到啊~ 于是想到了先用PHP正则抓到新闻，(期间也用php生成json数组供JS远程调用，略显麻烦)输出让JS舒服的数组，然后JS再上简单多了，说上就上，首先看需要抓取的页面的源码，找到所需信息的特定标签，然后直接PHP匹该标签。废话不说，直接贴出正则： [php] ]*>(.*?)/si’, $text,$match); foreach($match[0] as $key => $news) { if($key [/php] 运行一下，看看抓到了什么： 看来抓取成功了，到底抓到了什么，再看看，加一句print_r ($match[0]);再运行看看： Array ( [0] => 我校第二次党代会即将召开 [1] => “勤•信”文化大讲堂第30讲学习习近平总书记十八大以来重要讲话精神 [2] => 我校在2013北京高校红色“1+1”示范活动评选中获得佳绩 [3] => 2014新年致辞 [4] => 岁末大点兵 好稿共欣赏 [5] => 柳贡慧校长与20名新生畅谈大学青春 ) 正是所需信息，可是看看链接，发现不对，中的标签都是相对链接，不仅有./还有../（好贱）而我需要的是绝对链接，怎么办？正则出链接在替换？不用那么麻烦，直接上代码： [php] ]*>(.*?)/si’, $text,$match); $match = str_replace(‘../’, ‘http://news.bistu.edu.cn/’, $match[0]); //替换../ $match = str_replace(‘./’, ‘http://news.bistu.edu.cn/zhxw/’, $match); //替换./ foreach($match as $key => $news) { if($key [/php] 这回再看看： 我校第二次党代会即将召开 “勤•信”文化大讲堂第30讲学习习近平总书记十八大以来重要讲话精神 我校在2013北京高校红色“1+1”示范活动评选中获得佳绩 2014新年致辞 岁末大点兵 好稿共欣赏 好了，链接换成绝对链接了，php的工作完成了，剩下的交给JS，让js调用php正则好的五条新闻即可，用innerHTML直接将五条信息输出到html指定的id下面。直接上代码： [code lang=”js”] var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function () { if(xhr.readyState==4){ if((xhr.status>=200&&xhr.status","link":"/2014/05/18/JS%E8%B7%A8%E5%9F%9F%E6%8A%93%E5%8F%96%E4%BF%A1%E6%81%AF/"},{"title":"MYSQL ID自增","text":"1. select max(id) from tablename **2.**SELECT LAST_INSERT_ID() 函数 LAST_INSERT_ID 是与table无关的，如果向表a插入数据后，再向表b插入数据，LAST_INSERT_ID会改变。 在多用户交替插入数据的情况下max(id)显然不能用。这时就该使用LAST_INSERT_ID了，因为LAST_INSERT_ID是基于Connection的，只要每个线程都使用独立的 Connection对象，LAST_INSERT_ID函数将返回该Connection对AUTO_INCREMENT列最新的insert or update 操作生成的第一个record的ID。这个值不能被其它客户端（Connection）影响，保证了你能够找回自己的 ID 而不用担心其它客户端的活动，而且不需要加锁。使用单INSERT语句插入多条记录, LAST_INSERT_ID返回一个列表。 3. select @@IDENTITY; @@identity 是表示的是最近一次向具有identity属性(即自增列)的表插入数据时对应的自增列的值，是系统定义的全局变量。一般系统定义的全局变量都是以@@开头，用户自定义变量以@开头。 比如有个表A，它的自增列是id，当向A表插入一行数据后，如果插入数据后自增列的值自动增加至101，则通过select @@identity得到的值就是101。使用@@identity的前提是在进行insert操作后，执行select @@identity的时候连接没有关闭，否则得到的将是NULL值。 4. SHOW TABLE STATUS; 得出的结果里边对应表名记录中有个Auto_increment字段，里边有下一个自增ID的数值就是当前该表的最大自增ID.","link":"/2014/02/02/MYSQL-ID%E8%87%AA%E5%A2%9E/"},{"title":"Mac Photoshop 2018（Adobe全家桶）下载破解","text":"请支持正版软件！！！ 适用于Adobe所有软件的安装破解，以 Photoshop 2018 为例。根据电脑语言为中文/英文，安装完的软件自动为中文/英文。 1、下载安装 Adobe creative cloud下载地址：https://www.adobe.com/creativecloud/desktop-app.html 可以理解为Adobe的下载器，可以使用这个下载器下载所有Adobe产品。 下载完成后，选择登陆/注册Adobe账户，然后你就可以看到如下页面： 而事实上，从官网介绍来看，我们需要的是这样的（Apps页面可下载Adobe的产品）： 猜测可能是因为注册的账户是天朝或者所在地为天朝的原因，好多功能被屏蔽了，大天朝还真是一枝独秀，且看我手势 🖕 解决方法： macOS修改 Adobe creative cloud 的配置文件：false 改为 true： sudo vi /Library/Application Support/Adobe/OOBE/Configs/ServiceConfig.xml 1&lt;config&gt;&lt;panel&gt;&lt;name&gt;AppsPanel&lt;/name&gt;&lt;visible&gt;false&lt;/visible&gt;&lt;/panel&gt;&lt;feature&gt;&lt;name&gt;SelfServeInstalls&lt;/name&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/feature&gt;&lt;/config&gt; 1&lt;config&gt;&lt;panel&gt;&lt;name&gt;AppsPanel&lt;/name&gt;&lt;visible&gt;true&lt;/visible&gt;&lt;/panel&gt;&lt;feature&gt;&lt;name&gt;SelfServeInstalls&lt;/name&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/feature&gt;&lt;/config&gt; 然后重启应用后，Apps Tab已经出现，第一步完成。 2、下载在Apps页面选择自己需要的软件下载即可。例如Photoshop 3、激活下载 Adobe zii 激活软件。此神器适用于所有Adobe产品！！！ 在所有软件下载完成后，依次进行以下操作： 断网 打开/试用一遍所有需要激活的Adobe产品，然后退出 打开Adobe zii一键激活即可 此时软件已经激活完成，可以正常使用。以下步骤为扩展步骤。 4、阻止联网监测（非必须）此操作是防止有些Adobe产品自行联网检测激活状态，导致激活时效。这么说吧，用了高枕无忧，不用可能会中奖，自行选择。 下载 Little Snitch 防火墙软件，安装后，将一切以Adobe开头的软件全部禁止联网即可。 5、软件升级如果进行了第四步，那么在升级时先暂停 Little Snitch，先解除联网限制。 然后运行 Adobe Creative Cloud 进行软件升级，会有升级提示。 最后重复激活的步骤即可。 注：请支持正版软件！！！","link":"/2018/10/14/Mac-Photoshop-2018%EF%BC%88Adobe%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%89%E4%B8%8B%E8%BD%BD%E7%A0%B4%E8%A7%A3/"},{"title":"Mac Terminal：zsh+oh-my-zsh","text":"将bash切换为zsh1chsh -s /bin/zsh 其实还可以用which来定位（特别是ubuntu的童鞋） chsh -s which zsh`` 直接用zsh会很蛋疼，因为zsh功能很强大但是太复杂，所以需要oh-my-zsh来将它简单化。如果要切换回去： 1chsh -s /bin/bash 下载oh-my-zsh 直接用git从github上面下载包： 1git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh 备份已有的zshrc(一般不需要) 1cp ~/.zshrc ~/.zshrc.orig 替换zshrc cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc","link":"/2015/05/26/Mac-Terminal%EF%BC%9Azsh-oh-my-zsh/"},{"title":"Mac下SVN的使用","text":"在Windows环境中，一般使用TortoiseSVN来搭建svn环境。在Mac环境下，由于Mac自带了svn的服务器端和客户端功能，所以我们可以在不装任何第三方软件的前提下使用svn功能，不过还需做一下简单的配置。 如果你有安装XCode，只需要在code &gt; Preferences &gt; download &gt; Command Line Tools &gt; Install即可，速度很快，基本1分钟搞定。 这个Command Line Tools包含最新的SVN。然后如果你没有安装XCode的话，就会很痛苦，采用这种办法就会很痛苦，因为XCode接近于1.5GB了！尤其是对于那些只是需要SVN，而不会用到XCode的朋友来讲。 幸运的是，可以做到在没有安装XCode 的前提下安装SVN，只需要在Apple Developer网站下载一个116MB的https://developer.apple.com/downloads/index.action Command Line Tools(OS X Mountain Lion)独立安装包。当然你需要一个Apple Developer的ID（可以免费注册的）。 安装之后，可以适用Terminal来确认一下你的SVN版本：svn –version 一、在Mac环境下搭建svn服务器端环境。 创建代码仓库，用来存储客户端所上传的代码我先在/User/apple目录下新建一个svn目录，以后可以在svn目录下创建多个仓库目录 打开终端，创建一个mycode仓库，输入指令：svnadmin create /Users/apple/svn/mycode 指令执行成功后，会发现硬盘上多了个/Users/apple/svn/mycode目录，目录结构如下： 配置svn的用户权限主要是修改/svn/mycode/conf目录下的三个文件 1.打开svnserve.conf，将下列配置项前面的#和空格都去掉 anon-access = read # auth-access = write # password-db = passwd # authz-db = authzanon-access = read代表匿名访问的时候是只读的，若改为anon-access = none代表禁止匿名访问，需要帐号密码才能访问 2.打开passwd，在[users]下面添加帐号和密码，比如： [users] mj = 123 jj = 456 帐号是mj，密码是123 3.打开authz，配置用户组和权限 我们可以将在passwd里添加的用户分配到不同的用户组里，以后的话，就可以对不同用户组设置不同的权限，没有必要对每个用户进行单独设置权限。 在[groups]下面添加组名和用户名，多个用户之间用逗号(,)隔开 [groups] topgroup=mj,jj 说明mj和jj都是属于topgroup这个组的，接下来再进行权限配置。 使用[/]代表svn服务器中的所有资源库 [/] @topgroup = rw 上面的配置说明topgroup这个组中的所有用户对所有资源库都有读写(rw)权限，组名前面要用@ 如果是用户名，不用加@，比如mj这个用户有读写权限 [/] mj = rw 至于其他精细的权限控制，可以参考authz文件中的其他内容 4.启动svn服务器 前面配置了这么多，最关键还是看能否正常启动服务器，若启动不来，前面做再多工作也是徒劳。 在终端输入下列指令：&lt;strong&gt;svnserve -d -r /Users/apple/svn&lt;/strong&gt; 或者输入：&lt;strong&gt;svnserve -d -r /Users/apple/svn&lt;/strong&gt;&lt;strong&gt;/mycode&lt;/strong&gt; 没有任何提示就说明启动成功了 5.关闭svn服务器 如果你想要关闭svn服务器，最有效的办法是打开实用工具里面的“活动监视器” 综合上述，我们就可以轻松搭建svn服务器环境了 使用svn客户端功能1.从本地导入代码到服务器(第一次初始化导入) 在终端中输入 [php] svn import /Users/apple/Documents/eclipse_workspace/weibo svn://localhost/mycode/weibo –username=mj –password=123 -m “初始化导入”[/php] 我解释下指令的意思：将/Users/apple/Documents/eclipse_workspace/weibo中的所有内容，上传到服务器mycode仓库的weibo目录下，后面双引号中的”初始化导入”是注释 2.从服务器端下载代码到客户端本地 在终端中输入[php]svn checkout svn://localhost/mycode –username=mj –password=123 /Users/apple/Documents/code[/php] 我解释下指令的意思：将服务器中mycode仓库的内容下载到/Users/apple/Documents/code目录中 3.提交更改过的代码到服务器 在步骤2中已经将服务器端的代码都下载到/Users/apple/Documents/code目录中，现在修改下里面的一些代码，然后提交这些修改到服务器 1&gt; 打开终端，先定位到/Users/apple/Documents/code目录，输入：&lt;strong&gt;cd/Users/apple/Documents/code&lt;/strong&gt; 2&gt; 输入提交指令：&lt;strong&gt;svn commit -m &quot;修改了main.m文件&quot;&lt;/strong&gt; 这个指令会将/Users/apple/Documents/code下的所有修改都同步到服务器端，假如这次我只修改了main.文件 可以看到终端的打印信息： Sending weibo/weibo/main.m Transmitting file data . Committed revision 2. 4.更新服务器端的代码到客户端 这个应该是最简单的指令了，在终端中定位到客户端代码目录后，比如上面的/Users/apple/Documents/code目录，然后再输入指令：&lt;strong&gt;svn update&lt;/strong&gt; 5.至于svn的其他用法，可以在终端输入：&lt;strong&gt;svn help&lt;/strong&gt; 这里列出一大堆svn指令，后面括号中的内容的一般代表着指令的简称，比如我们可以用svn ci代替svn commit，用svn co代替svn checkout","link":"/2014/10/18/Mac%E4%B8%8BSVN%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"title":"Microsoft Office 2016 for Mac (15.11.2) 正式版下载 附送破解补丁","text":"微软于7.10号发布Microsoft office 2016 for Mac正式版，版本号 15.11.2。 Microsoft Office for Mac 2016 （15.11.2）完整安装包下载： MS官网直链：http://officecdn.microsoft.com/pr/C1297A47-86C4-4C1F-97FA-950631F94777/OfficeMac/Microsoft_Office_2016_Installer.pkg 百度网盘下载： 链接: http://pan.baidu.com/s/1o6vcbhg 密码: 57cr 迅雷快传下载： http://kuai.xunlei.com/d/6PniBQIqOAAL2Z9Vbb2 有订阅的话，直接下载上述的pkg安装包就好了。 没有订阅的话，安装完 Office 后，退出所有 Office 相关程序（Word Excel 什么的）。然后双击运行后面提供的补丁：MSO15.11.2Patch，运行之前请在终端里修改这个补丁的权限，以确保可以运行。首先切换到MSO15.11.2Patch所在目录，然后执行（没有安装Xcode的可以在终端中输入OTOOL点回车，安装插件）： sudo chmod u+x MSO15.11.2Patch 修改完权限后直接运行即可，可以直接双击MSO15.11.2Patch或终端下执行： ./MSO15.11.2Patch 成功后终端显示 All Done Enjoy 。 免365订阅补丁： 百度网盘下载：http://pan.baidu.com/s/1qWKG0m4 密码：8te6 转载而来，如有冒犯，请通知删除，仅供交流，请支持正版，谢谢。","link":"/2015/07/23/Microsoft-Office-2016-for-Mac-15-11-2-%E6%AD%A3%E5%BC%8F%E7%89%88%E4%B8%8B%E8%BD%BD-%E9%99%84%E9%80%81%E7%A0%B4%E8%A7%A3%E8%A1%A5%E4%B8%81/"},{"title":"Mweb使用腾讯COS作为图床","text":"新入一盆小老弟同款熊爪，取名金风。 回归主题。接上上上上篇，使用腾讯COS替代七牛作为图床之后。平时使用Mweb作为Markdown写作软件，用着蛮舒服的。但是Mweb集成的图床是七牛的图床，腾讯COS的没有集成。每次发布文章前要把文章中的图片手动上传，然后复制链接。😂 当文章中的图片比较多的时候，我发现太扯淡了…所以想着整个上传的API。结果找了一圈没发现现成的轮子，只能自己造一个了。 思路比较简单，就是利用Mweb可配置自定义的图片上传功能。写一个腾讯COS上传图片的接口，然后配置到Mweb中即可。同时可配置CDN加速、图片处理规则。 github: https://github.com/flute/Mweb_tencet_cos 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889/** * MWeb使用腾讯云存储COS作为图床 * 利用COS API，用nodejs作为server上传图片，添加至MWeb的配置中即可 * 2019-01-25 23:00 * author: ludis * github: https://github.com/flute/Mweb_tencet_cos * COS Doc: https://cloud.tencent.com/document/product/436/8629 */const express = require('express');// form表单需要的中间件。const mutipart = require('connect-multiparty');// Tecent COSconst COS = require('cos-nodejs-sdk-v5');const config = { // 本地文件临时路径 temporaryUploadDir: './temporary', // node服务启动端口 defaultPort: 3000, // 到 控制台密钥管理 获取您的项目 SecretId 和 SecretKey。 // https://console.cloud.tencent.com/capi secretId: 'AKIDsipmK32L..XXXXX..OuOtbSDFpair', secretKey: 'VzSwGaimpHj..XXXXX..IoQAn1FMMSVcUz', // 到 COS 对象存储控制台 创建存储桶，得到 Bucket（存储桶名称） 和 Region（地域名称）。 // https://console.cloud.tencent.com/cos4 bucket: 'ludis-1252396698', region: 'ap-beijing', // 文件上传后的路径前缀，如上传 test.png 后存储的目录为 ghost/flutter/test.png preUrl: 'ghost/images/flutter', // 文件上传后的域名 // 上传成功默认域名： ludis-1252396698.cos.ap-beijing.myqcloud.com // 实用万象优图，处理图片 // 默认图片处理域名： ludis-1252396698.picbj.myqcloud.com // 使用cdn加速域名： ludis-1252396698.image.myqcloud.com domain: 'ludis-1252396698.image.myqcloud.com', // 图片处理规则，没有可为空 rule: '!ghost'}// 使用永久密钥创建实例const cos = new COS({ SecretId: config.secretId, SecretKey: config.secretKey});const mutipartMiddeware = mutipart();const app = express();app.use(mutipart({ uploadDir: config.temporaryUploadDir}));app.set('port', process.env.PORT || config.defaultPort);app.listen(app.get('port'), function () { console.log(`Express started on http://localhost: ${app.get('port')} ; press Ctrl-C to terminate.`);});app.post('/upload', mutipartMiddeware, (req, res) =&gt; { // 获取文件名、路劲（临时路劲） const { name, path } = req.files.file // 上传 upload(name, path, url =&gt; { if (url) res.json({ url: url }) else res.send('upload failed!') })});const upload = (name, path, callback) =&gt; { // 分片上传 cos.sliceUploadFile({ Bucket: config.bucket, Region: config.region, Key: `${preUrl}/${name}`, FilePath: path }, function (err, data) { console.log(err, data); if (err) { callback(null) } else { callback(`https://${config.domain}/${data.Key}${config.rule}`) } });} 配置config中所需的各类信息后，启动node服务即可。 然后在Mwe偏好设置中进行配置： 配置完成后。上传图片至图床即可。 哦了，这样文章中的所有图片已经自动上传至腾讯COS，并返回正确的链接。舒服了🐣🐣🦉","link":"/2019/01/25/Mweb%E4%BD%BF%E7%94%A8%E8%85%BE%E8%AE%AFCOS%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A/"},{"title":"No Zuo No Die——谨以此文祭奠我的电脑","text":"我的电脑是在2012年底购买的LENOVO彪悍的小Y系列“Y485”，1T硬盘，4G内存，2G独显（专业游戏级显卡），真四核AMD A10处理器，JBL专业音箱，原装正版64位win8。在12年底算是最高配了。废话一堆，只为了纪念一下一年半的心酸史。 作为一名工科男，喜欢折腾电脑是理所当然的，大一也是热衷hacker，电脑里的黑客软件有100多G，由于hacker软件大多不兼容win8,所以果断装起了xp的双系统，可惜失败了，当时并不太清楚为什么，因为当时win8本来就不流行，而原装win8系统和自装的win8系统又是差之千里，所以百度谷歌也是找不到解决办法。做后只能有虚拟机，幸好电脑配置不错，所以虚拟机基本运行流畅，一口气装了xp,小红帽等等好多系统玩，重装系统的事也就这么过去了。期间有好几次做死搞得不能启动，比如需要用lunix破解无线，于是装lunix双系统，直接挂掉，后来只能做个U盘系统。不过有一键恢复功能啥也不怕，直接恢复出场设置，变身裸机。由于当时是新机，装的东西不多，虽然丢了些照片之类的挺可惜，不过没什么大碍，也就这样过了，没长什么记性。之后就到了大二，win8.1刚出就升级了。然后就是各种不兼容，很长一段时间LOL不能玩，只能找反TP补丁或者戒撸！大一下就开始接触web开发了，大二自然要玩玩lunix，ubuntu，毕竟配个服务器神马的虚拟机撑不住，而且伴随着电脑装的软件增多，虚拟机会越来越卡，一直想装上系统，可惜没装成，百度谷歌是各种不好使。恰巧在web组碰到一个自称装了好多系统的同学，给我打包票说没问题，于是交给他装。结果wubi还是USB装都不好使，他也就傻眼了，丢下个残废系统给我，只好一键还原，又是丢了好多东西，不过自己决定的也不能怪别人。只好继续卡卡的用着虚拟机，然后就是大神舍友帮忙装，他的电脑是原装32位win7，他装了好几个系统，win7,win8,ubuntu,lunix,mac什么的都装了，这里面装黑苹果最难了，搞定各种驱动实属不宜，所以他也是比较牛的。结果遇到了我的原装64位win8也是各种不好使，还是没装成。接着就是最近的win8.1出现，又是果断升级，一直走在最前段。然后就到了这一周的最强做死周，验证了no zuo no die的正确性。 说说这周都作了什么，这周一开始想再装一次双系统，由于win8.1+64位，经常的不兼容让我无时不刻在想着双系统，所以尽管之前失败了无数次，丢失数据的伤痛依然刺眼。但还是果断装起，突然发现就像舍友说的，我是这么有魄力的人啊（哈哈哈）。结果当然是失败了，虽然百度了几百篇文章了，有的哥们貌似很成功了，但还是果断死掉，因为国内搜索引擎的弊病就在此，一个人可以随便发点错误的教程吸引别人，然后是广大站长朋友和网友们机智的粘帖，千篇一律，真正技术性的问题，百度前十页很少能找到答案。所以如果看到真篇文章的朋友真的建议去谷歌，国外的朋友确实做的好，他们的回答基本都是自己的实际经历，而且他们乐于解决别人的问题，类似stackoverflow这样的社区真的让人感到温暖，当你一遍遍的在这找到自己需要的答案真的会让人感动到掉泪，感谢这么优秀的人们，虽然我英语不好，但对于技术性的问题，相比百度，我更乐意大大咧咧的去看英语。至于搜索的事先说到这里，继续说本周的经历，在失败后，继续坚持不懈的精神，在大神舍友的帮助下继续做死，这回了解到原装win8的UEFI启动模式的特别，64位系统的犀利，然后借用了例如老毛桃这样的专业PE工具，胸有成竹的搞起，可惜没我们想的那么简单，之后导致引导错误，只能一键恢复，C盘积累了半年的软件就什么都没了，有一次的心如刀割，还好我的宝贝照片都还在，我也就忍了。一键恢复后，接着当然是继续装了，结果D盘光荣牺牲，D盘文件一个都不剩了。我觉得一般人早都放弃了……我呢？接着来，抱着死猪不怕开水烫的原则，反正只要有一键恢复，不行了继续恢复，其他盘的文件也不受影响，至于C盘，反正没东西了，爱咋咋地。于是又是好多次恢复。最后终于装不成了，只能悲催的选择放弃，于是从win8的裸机开始一路升级到win8.1update，把常用的软件装好，装了整整一天，默默的想着以后就用单系统吧，再也不做死了。本来以为就这么过去了，不料第二天大神舍友又勾引我，说用老毛桃把C盘格式改成mar肯定好使，经不住诱惑的我忘记了数据丢失和重装系统的心酸，只有装过的人知道还原后装软件，装无数个漏洞补丁，数不清的更新是多煎熬。继续做死历程，老毛桃走起，又一次的C盘格式化，前一天从win8到win8.1update的所有努力白费，装了半天才发现想得太简单了，考虑的太不成熟了，只好拉到，这一次真的是打心底死心了，一键恢复win8我想着再也不试了，舍友也被征服了，决定此事就此不提。只好继续从win8的裸机再升级到8.1update，装软件，打补丁，从晚上6点整到半夜两点终于搞定，至此之一周内一键恢复系统6次，有两次是从win8升级到8.1update（基本每次耗时6小时）后又到win8裸机。所以这个做死周电脑基本没用成过，每天在装系统。 有时候发现自己真的撅的不可理喻，从大一到大二，一年半里因为装双系统的伤真是千刀万刮了，可我竟然在做出放弃的决定半天后接着继续装双系统了！！！而这次的决定完全是因为我无意见看到一篇文章，也是原装64位win8升级到8.1update后装ubuntu的双系统，所有情况跟我一模一样，我觉得一年半的坚持怎么着也得再试一次。这次我真的成功了，那真是一个开心啊，装了一年半的系统终于圆满了，64位win8.1update+64位ubuntu kylin14.04，我做到了，用一年半的尝试和坚持，伴随着一次次的心痛。 然而爱做死的我可没就此罢休，玩ubuntu时不小心删除了一些包，导致桌面图标不显示，半天解决未果，决定重装ubuntu的双系统，反正成功一次了，第二次只是再来一便而已，然而正是这个决定将我的做死推向了顶峰！U盘启动，由于装过一次了，所以驾轻就熟，很快来到了选择安装方法的时候，第一次装的时候是选择覆盖win8,或者与win8并存，或自定义。而第二次由于已经存在一个ubuntu了，所以是选择覆盖win8或与win8并存或与ubuntu并存，或卸载原来的ubuntu并安装，或自定义。由于第一次装的ubuntu已经损坏，我就理所当然的选择卸载ubuntu重新安装，正是这一步把自己送向绝路。一切安装正常，装好后重启电脑，结果发现只剩下ubuntu，windows完全不见了，立刻进入老毛桃PE查看分区，结果原来win8 的五个分区全没了，只剩下一块931G的硬盘和装ubuntu的盘，原来ubuntu直接全盘安装了，整个1T硬盘被格式化了！所有分区消失！所有数据消失！当时基本上就懵掉了，我的宝贝照片啊，数据无价啊，好多宝贝丢不起啊。 第一个反应是一键恢复，虽然会回到win8,但至少数据能回来，出乎意料的是一键恢复不见了，因为恢复分区被ubuntu删除了，这下是彻底做死了。只好开始谷歌硬盘数据恢复软件，看了好多资料，发现也有跟我一样的人，他们大多使用ubuntu下的硬盘数据恢复软件找回了宝贝数据，于是我报着最后一点希望在ubuntu下用testdisk尝试恢复数据，按着教程走，慢慢看到了扫描出来的分区，心里一阵窃喜，由于硬盘里的东西比较多，检测所坏分区用了3个小时！这三个小时真是煎熬啊，结果等了三个小时检测完，终端却死机了！我真是想哭了，只好再等三个小时让它再检测一遍。然后等扫出来结果重启时死机了。。泪奔啊，第二天由于testdisk比较慢（其实是我的文件太多）就用pe的分区恢复扫，结果发现比testdisk还慢，不过也等它扫完了，可惜只扫出来两个盘，剩下三个没找到。看来还是testdisk靠谱，只好回到ubuntu下再扫三小时，由于前两次的经验，这次扫完后设置成功，重启后原来的五个盘都出现了，所有文件都在，完好无损，至此全盘格式化的文件全部恢复！ 由于恢复分区，仅剩的ubuntu也挂了，至此又没有系统了。并且恢复的几个分区只是都是逻辑分区，只存数据，至于启动区之类的一概丢失，由于没有启动区，并且恢复后分区及其混乱，所以装系统屡屡出错，最后决定将恢复的所有数据copy到移动硬盘，没有顾虑之后果断全盘格了，把坑人的gpt格式转成mbr格式，放弃UEFI启动模式，先装win7 x64,然后是win8 x64,然后是ubuntu14.04，期间也出现了些问题，不过都解决了，最终三系统完美运行，后续还会增加xp，mac等系统。 结尾了，漫漫的折腾之路，伤痛是难免的，幸好没放弃，最终一切解决。这期间学会了很多原来不知道的东西，现在对于电脑也不怕什么了，毕竟全盘格式化了也能找回所有数据，还能怕什么？哈哈，今天5.1劳动节，祝劳者健康幸福！也纪念一下我的折腾之路。","link":"/2014/05/01/No-Zuo-No-Die%E2%80%94%E2%80%94%E8%B0%A8%E4%BB%A5%E6%AD%A4%E6%96%87%E7%A5%AD%E5%A5%A0%E6%88%91%E7%9A%84%E7%94%B5%E8%84%91/"},{"title":"Nodejs  package.json","text":"pacakage.json中各属性说明 1234567891011121314151617181920212223“name”：包名。“description”：包简介。“author”：包作者。“version”：版本号。“repository”：源码托管地址。“maintainers”：包维护者列表，一般由name,email,web三个属性组成。“contributors”：贡献者列表。“dependencies”：当前包使用时所需要依赖包的列表。devDependencies：当前包开发时所需要依赖包的列表。keywords：关键词数组。main：模块引入入口。scripts：脚本说明对象。主要被包管理器用来安装、编译、测试和卸载包。","link":"/2016/02/02/Nodejs-package-json/"},{"title":"Nodejs 爬虫使用 eventproxy 控制并发","text":"use superagent 抓取 cheerio 解析 eventproxy 控制并发 target url：https://cnodejs.org/ cd nodejs mkdir test &amp;&amp; cd test touch node.js 抓取其首页数据，共40篇文章。 首先爬取首页篇文章的URL，将得到的40篇文章的URL存入数组articleUrlArr 然后爬取每篇文章的详细内容。 12345678910111213141516171819202122var eventproxy = require('eventproxy');var superagent = require('superagent');var cheerio = require('cheerio');var articleUrlArr = [], baseUrl = 'https://cnodejs.org/';superagent.get(baseUrl).end(function(err, res) { if (err) { console.log(err); } var $ = cheerio.load(res.text); // 获取该页所有文章的链接 $('#topic_list .topic_title').each(function(idx, elements) { var href = baseUrl+elements.attribs.href; articleUrlArr.push(href); }); //打印文章数据 console.log(articleUrlArr);}); 然后再分别爬取40篇文章的详细内容，即发出40个并发请求，同时爬取数据，调用eventproxy 的 #after API。 1234567891011121314151617181920212223articleUrlArr.forEach(function (url) { superagent.get(url).end(function (err, res) { console.log('fetch ' + url + ' successful'); ep.emit('task', [url, res.text]); });});ep.after('task', articleUrlArr.length, function (data) { // data为一个数组，包含了40次ep.emit('task', pair)中的pair data = data.map(function (topicPair) { // 接下来都是 jquery 的用法了 var url = topicPair[0]; var html = topicPair[1]; var $ = cheerio.load(html); return ({ title: $('.topic_full_title').text().trim(), href: url, comment1: $('.reply_content').eq(0).text().trim(), }); }); console.log('final:'); console.log(data);});","link":"/2016/08/02/Nodejs-%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8-eventproxy-%E6%8E%A7%E5%88%B6%E5%B9%B6%E5%8F%91/"},{"title":"PHP Parse error: syntax error, unexpected end of file in","text":"本地编好代码后传到服务器啥都不显示，心里极度不爽。 打开php.ini /etc/php5/apache2/php.ini display_errors = Off 改为 display_errors = On 开启报错。 结果一运行出来个Parse error: syntax error, unexpected end of file in 。 我呵呵一笑，原来是PHP短标记没开，去死吧。 short_open_tag = Off 改为 short_open_tag = On 。 sudo /etc/init.d/apache2 restart","link":"/2015/04/02/PHP-Parse-error-syntax-error-unexpected-end-of-file-in/"},{"title":"PHP图片裁剪、缩放","text":"根据自定义的目标图, 按目标图高宽比裁剪、缩放源图. 传入参数: $source_path string 源图路径 $target_width integer 目标图宽度 $target_height integer 目标图高度 支持图片类型: image/gif, image/jpeg, image/png. function imagecropper($source_path, $target_width, $target_height) { $source_info = getimagesize($source_path); $source_width = $source_info[0]; $source_height = $source_info[1]; $source_mime = $source_info[‘mime’]; $source_ratio = $source_height / $source_width; $target_ratio = $target_height / $target_width; // 源图过高 if ($source_ratio &gt; $target_ratio) { $cropped_width = $source_width; $cropped_height = $source_width * $target_ratio; $source_x = 0; $source_y = ($source_height - $cropped_height) / 2; } // 源图过宽 elseif ($source_ratio &lt; $target_ratio) { $cropped_width = $source_height / $target_ratio; $cropped_height = $source_height; $source_x = ($source_width - $cropped_width) / 2; $source_y = 0; } // 源图适中 else { $cropped_width = $source_width; $cropped_height = $source_height; $source_x = 0; $source_y = 0; } switch ($source_mime) { case ‘image/gif’: $source_image = imagecreatefromgif($source_path); break; case ‘image/jpeg’: $source_image = imagecreatefromjpeg($source_path); break; case ‘image/png’: $source_image = imagecreatefrompng($source_path); break; default: return false; break; } $target_image = imagecreatetruecolor($target_width, $target_height); $cropped_image = imagecreatetruecolor($cropped_width, $cropped_height); // 裁剪 imagecopy($cropped_image, $source_image, 0, 0, $source_x, $source_y, $cropped_width, $cropped_height); // 缩放 imagecopyresampled($target_image, $cropped_image, 0, 0, 0, 0, $target_width, $target_height, $cropped_width, $cropped_height); header(‘Content-Type: image/jpeg’); imagejpeg($target_image); imagedestroy($source_image); imagedestroy($target_image); imagedestroy($cropped_image); }","link":"/2014/03/22/PHP%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E3%80%81%E7%BC%A9%E6%94%BE/"},{"title":"PHP抓取静态页面源码及资源并保存","text":"这是一个可以获取网页的html代码以及css,js,font和img资源的小工具，主要用来快速获取模板。如果你来不及设计UI或者看到不错的模板，则可以使用这个工具来抓取网页和提取资源文件。提取的内容会按相对路径来保存资源，因此你不必担心资源文件的错误url导入。 首页 index.php： 网页抓取器 Web Grabber Url Get Save All List 抓取页面代码 grab.php: [php]&lt;?PHP /* flute 2014/03/31 / if(isset($_POST[‘url’])) { if(isset($_POST[‘project’]) &amp;&amp; !is_dir($_POST[‘project’])) mkdir($_POST[‘project’], 0777); echo json_encode(grab($_POST[‘url’])); } function grab($url) { //$url = ‘http://www.ldsun.com/wp-content/uploads/leaves/test.html’; $data = array(); $file = preg_replace(‘/^.*//’, ”, $url); if(($content = file_get_contents($url)) !== false) { if(isset($_POST[‘project’])) file_put_contents($_POST[‘project’].’/’.$file, $content); $pattern = ‘/&lt;link.*?href=(\\’|”)(.*?.css)\\1.*?&gt;/i’; if(preg_match_all($pattern, $content, $matches)) { $data[‘css’] = $matches[2]; } $pattern = ‘/&lt;script.*?src=(\\’|”)(.*?.js)\\1.*?&gt;/i’; if(preg_match_all($pattern, $content, $matches)) { $data[‘js’] = $matches[2]; } $pattern = ‘/&lt;img.*?src=(\\’|”)(.*?)\\1.*?&gt;/i’; if(preg_match_all($pattern, $content, $matches)) { $data[‘img’] = $matches[2]; } $pattern = ‘/url((\\’|”|\\s)(.*?)\\1)/i’; if(preg_match_all($pattern, $content, $matches)) { $data[‘src’] = $matches[2]; } } return $data; } function vardump($obj) { echo ‘’; print_r($obj); echo ‘’; } ?&gt;[/php] 保存css,js,img等资源的页面 save.php: [php]&lt;?PHP /* flute 2014/03/31 / if(isset($_POST[‘url’]) &amp;&amp; isset($_POST[‘project’]) &amp;&amp; isset($_POST[‘domain’])) { extract($_POST); $url = preg_replace(‘/?.*$/’, ”, $url); $file = $url; $arr = explode(‘/’, $file); $length = sizeof($arr); $filename = $arr[$length – 1]; $root = $project; $dir = $root; if($domain == ‘http’) { $dir = $root.’/http’; if(!is_dir($dir)) mkdir($dir, 0777); } else { $file = $domain.’/’.$url; for($i = 0; $i &lt; $length -1; $i++) { if(!empty($arr[$i])) { $dir .= ‘/’.$arr[$i]; if(!is_dir($dir)) mkdir($dir, 0777); } } } if(!file_exists($dir.’/’.$filename) || filesize($dir.’/’.$filename) == 0) { $content = file_get_contents($file); file_put_contents($dir.’/’.$filename, $content); } } ?&gt;[/php] 使用方法： 1. 打开index页，输入项目名和要抓取的网址，网址必须是文件名结尾，如index.html； 2. 点Get按钮，得到当前页面所有的css,js,img等资源列表； 3. 点击css链接会获取css文件中的背景资源图片，附加在列表后头； 4. 点击Save All即可保存列表中所有的文件，并按相对路径生成； 5. 如果网页上有http远程文件，将会直接保存在http文件夹下; 6. Get和Save有时会失败，没关系重试几次即可。 效果图：","link":"/2014/03/31/PHP%E6%8A%93%E5%8F%96%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E6%BA%90%E7%A0%81%E5%8F%8A%E8%B5%84%E6%BA%90%E5%B9%B6%E4%BF%9D%E5%AD%98/"},{"title":"PHP报错Unknown column &#39;name&#39; in &#39;field list&#39;","text":"常见错误为&lt;span style=&quot;color: #ff6600;&quot;&gt;Unknown column '字段' in 'field list'&lt;/span&gt; 意为在数据库中不存在这样的字段，如Unknown column 'name' in 'field list'指表中不存在name字段，这是需要检查SQL语句中的表名是否与数据库中表名对应，检查修改即可。","link":"/2014/05/10/PHP%E6%8A%A5%E9%94%99Unknown-column-name-in-field-list/"},{"title":"PHP文件上传类","text":"class uploadFile { public $max_size = ‘1000000’;//设置上传文件大小 public $file_name = ‘date’;//重命名方式代表以时间命名，其他则使用给予的名称 public $allow_types;//允许上传的文件扩展名，不同文件类型用“|”隔开 public $errmsg = ‘’;//错误信息 public $uploaded = ‘’;//上传后的文件名(包括文件路径) public $save_path;//上传文件保存路径 private $files;//提交的等待上传文件 private $file_type = array();//文件类型 private $ext = ‘’;//上传文件扩展名 /** * 构造函数，初始化类 * @access public * @param string $file_name 上传后的文件名 * @param string $save_path 上传的目标文件夹 / publicfunction* __construct($save_path = ‘./upload/‘,$file_name = ‘date’,$allow_types = ‘’) { $this-&gt;file_name = $file_name;//重命名方式代表以时间命名，其他则使用给予的名称 $this-&gt;save_path = (preg_match(‘//$/‘,$save_path)) ? $save_path : $save_path . ‘/‘; $this-&gt;allow_types = $allow_types == ‘’ ? ‘jpg|jpeg|gif|png|zip|rar’ : $allow_types; } /** * 上传文件 * @access public * @param $files 等待上传的文件(表单传来的$_FILES[]) * @return boolean 返回布尔值 / publicfunction* upload_file($files) { $name = $files[‘name’]; $type = $files[‘type’]; $size = $files[‘size’]; $tmp_name = $files[‘tmp_name’]; $error = $files[‘error’]; switch ($error) { case 0 : $this-&gt;errmsg = ‘’; break; case 1 : $this-&gt;errmsg = ‘*超过了php.ini中文件大小’; break; case 2 : $this-&gt;errmsg = **’*超过了MAX_FILE_SIZE 选项指定的文件大小’; break; case 3 : $this-&gt;errmsg = **’*文件只有部分被上传’; break; case 4 : $this-&gt;errmsg = **’*没有文件被上传’; break; case 5 : $this-&gt;errmsg = **’*上传文件大小为0’; break; default : $this-&gt;errmsg = **’上传文件失败！’; break; } if($error == 0 &amp;&amp; is_uploaded_file($tmp_name)) { //检测文件类型 if($this-&gt;check_file_type($name) == FALSE){ *return***FALSE; } //检测文件大小 if($size &gt; $this-&gt;max_size){ $this-&gt;errmsg = ‘*上传文件‘.$name.*’*太大，最大支持‘.ceil($this-&gt;max_size/1024).*’kb*的文件’**; returnFALSE*; } $this-&gt;set_save_path();//设置文件存放路径 $new_name = $this-&gt;file_name != ‘date’ ? $this-&gt;file_name.*’.’**.$this-&gt;ext : date(*’YmdHis’**).*’.’.$this-&gt;ext;//设置新文件名 $this-&gt;uploaded = $this-&gt;save_path.$new_name;//上传后的文件名 //移动文件 if(move_uploaded_file($tmp_name,$this-&gt;uploaded)){ $this-&gt;errmsg = ‘*文件‘.$this-&gt;uploaded.‘上传成功！’; *return***TRUE; }else{ $this-&gt;errmsg = ‘文件‘.$this-&gt;uploaded.**’上传失败！’; *return***FALSE; } } } /** * 检查上传文件类型 * @access public * @param string $filename 等待检查的文件名 * @return 如果检查通过返回TRUE 未通过则返回FALSE和错误消息 / public*function check_file_type($filename){ $ext = $this-&gt;get_file_type($filename); $this-&gt;ext = $ext; $allow_types = explode(**’|’,$this-&gt;allow_types);//分割允许上传的文件扩展名为数组 //echo $ext; //检查上传文件扩展名是否在请允许上传的文件扩展名中 if(in_array($ext,$allow_types)){ return*TRUE**; }else{ $this-&gt;errmsg = ‘*上传文件‘.$filename.*’*类型错误，只支持上传‘.str_replace(*’|’,**’,’,$this-&gt;allow_types).‘ 等文件类型!’; *return***FALSE; } } /** * 取得文件类型 * @access public * @param string $filename 要取得文件类型的目标文件名 * @return string 文件类型 / publicfunction* get_file_type($filename){ $info = pathinfo($filename); $ext = $info[‘extension’]; return $ext; } /** * 设置文件上传后的保存路径 / publicfunction* set_save_path(){ $this-&gt;save_path = (preg_match(‘//$/‘,$this-&gt;save_path)) ? $this-&gt;save_path : $this-&gt;save_path . ‘/‘; if(!is_dir($this-&gt;save_path)){ //如果目录不存在，创建目录 $this-&gt;set_dir(); } } / * 创建目录 * @access public * @param string $dir 要创建目录的路径 * @return boolean 失败时返回错误消息和FALSE / publicfunction* set_dir($dir = null){ //检查路径是否存在 if(!$dir){ $dir = $this-&gt;save_path; } if(is_dir($dir)){ $this-&gt;errmsg = ‘*需要创建的文件夹已经存在！’; } $dir = explode(*’/‘, $dir); foreach($dir as $v){ if($v){ $d .= $v . ‘/‘; if(!is_dir($d)){ $state = mkdir($d, 0777); if(!$state) $this-&gt;errmsg = ‘在创建目录‘ . $d . ‘时出错！’; } } } *return***true; } } /******************************************* * 图片处理类 * * 可以对图片进行生成缩略图，打水印等操作 * 本类默认编码为UTF8 如果要在GBK下使用请将img_mark方法中打中文字符串水印iconv注释去掉 * * 由于UTF8汉字和英文字母大小(像素)不好确定，在中英文混合出现太多时可能会出现字符串偏左 * 或偏右,请根据项目环境对get_mark_xy方法中的$strc_w = strlen($this-&gt;mark_str)*7+5进 * 行调整 * 需要GD库支持，为更好使用本类推荐使用GD库2.0+ * * @author kickflip@3ppt.com *************************************************/ class uploadImg extends uploadFile { public $mark_str = ‘kickflip@3ppt.com‘; //水印字符串 public $str_r = 0; //字符串颜色R public $str_g = 0; //字符串颜色G public $str_b = 0; //字符串颜色B public $mark_ttf = ‘./upload/SIMSUN.TTC’; //水印文字字体文件(包含路径) public $mark_logo = ‘./upload/logo.png’; //水印图片 public $resize_h;//生成缩略图高 public $resize_w;//生成缩略图宽 public $source_img;//源图片文件 public $dst_path = ‘./upload/‘;//缩略图文件存放目录，不填则为源图片存放目录 /** * 生成缩略图 生成后的图 * @access public * @param integer $w 缩小后图片的宽（px） * @param integer $h 缩小后图片的高（px） * @param string $source_img 源图片(路径+文件名) / publicfunction* img_resized($w,$h,$source_img = NULL){ $source_img = $source_img == NULL ? $this-&gt;uploaded : $source_img;//取得源文件的地址，如果为空则默认为上次上传的图片 if(!is_file($source_img)) { //检查源图片是否存在 $this-&gt;errmsg = ‘*文件’.$source_img.*’不存在’; *return***FALSE; } $this-&gt;source_img = $source_img; $img_info = getimagesize($source_img); $source = $this-&gt;img_create($source_img); //创建源图片 $this-&gt;resize_w = $w; $this-&gt;resize_h = $h; $thumb = imagecreatetruecolor($w,$h); imagecopyresized($thumb,$source,0,0,0,0,$w,$h,$img_info[0],$img_info[1]);//生成缩略图片 $dst_path = $this-&gt;dst_path == ‘’ ? $this-&gt;save_path : $this-&gt;dst_path; //取得目标文件夹路径 $dst_path = (preg_match(**’//$/‘,$dst_path)) ? $dst_path : $dst_path . ‘/‘;//将目标文件夹后加上/ if(!is_dir($dst_path)) $this-&gt;set_dir($dst_path); //如果不存在目标文件夹则创建 $dst_name = $this-&gt;set_newname($source_img); $this-&gt;img_output($thumb,$dst_name);//输出图片 imagedestroy($source); imagedestroy($thumb); } /** *打水印 *@access public @param string $source_img 源图片路径+文件名 @param* integer $mark_type 水印类型(1为英文字符串，2为中文字符串，3为图片logo,默认为英文字符串) ***@param** integer $mark_postion 水印位置(1为左下角,2为右下角,3为左上角,4为右上角,默认为右下角); @return 打上水印的图片 / publicfunction img_mark($source_img = NULL,$mark_type = 1,$mark_postion = 2) { $source_img = $source_img == NULL ? $this-&gt;uploaded : $source_img;//取得源文件的地址，如果为空则默认为上次上传的图片 if(!is_file($source_img)) { //检查源图片是否存在 $this-&gt;errmsg = **’*文件’.$source_img.*’不存在’; *return***FALSE; } $this-&gt;source_img = $source_img; $img_info = getimagesize($source_img); $source = $this-&gt;img_create($source_img); //创建源图片 $mark_xy = $this-&gt;get_mark_xy($mark_postion);//取得水印位置 $mark_color = imagecolorallocate($source,$this-&gt;str_r,$this-&gt;str_g,$this-&gt;str_b); switch($mark_type) { case 1 : //加英文字符串水印 $str = $this-&gt;mark_str; imagestring($source,5,$mark_xy[0],$mark_xy[1],$str,$mark_color); $this-&gt;img_output($source,$source_img); break; case 2 : //加中文字符串水印 if(!is_file($this-&gt;mark_ttf)) { //检查字体文件是否存在 $this-&gt;errmsg = **’*打水印失败：字体文件’.$this-&gt;mark_ttf.*’不存在!’; *return***FALSE; } $str = $this-&gt;mark_str; //$str = iconv(‘gbk’,’utf-8’,$str);//转换字符编码 如果使用GBK编码请去掉此行注释 imagettftext($source,12,0,$mark_xy[2],$mark_xy[3],$mark_color,$this-&gt;mark_ttf,$str); $this-&gt;img_output($source,$source_img); break; case 3 : //加图片水印 if(is_file($this-&gt;mark_logo)){ //如果存在水印logo的图片则取得logo图片的基本信息,不存在则退出 $logo_info = getimagesize($this-&gt;mark_logo); }else{ $this-&gt;errmsg = **’*打水印失败：logo文件’.$this-&gt;mark_logo.*’不存在！’; *return***FALSE; } $logo_info = getimagesize($this-&gt;mark_logo); if($logo_info[0]&gt;$img_info[0] || $logo_info[1]&gt;$img_info[1]) { //如果源图片小于logo大小则退出 $this-&gt;errmsg = **’*打水印失败：源图片’.$this-&gt;source_img.*’*比’.$this-&gt;mark_logo.*’小！’; *return***FALSE; } $logo = $this-&gt;img_create($this-&gt;mark_logo); imagecopy ( $source, $logo, $mark_xy[4], $mark_xy[5], 0, 0, $logo_info[0], $logo_info[1]); $this-&gt;img_output($source,$source_img); break; default: //其它则为文字图片 $str = $this-&gt;mark_str; imagestring($source,5,$mark_xy[0],$mark_xy[1],$str,$mark_color); $this-&gt;img_output($source,$source_img); break; } imagedestroy($source); } /* * 取得水印位置 * @access private * @param integer $mark_postion 水印的位置(1为左下角,2为右下角,3为左上角,4为右上角,其它为右下角) * @return array $mark_xy 水印位置的坐标(索引0为英文字符串水印坐标X,索引1为英文字符串水印坐标Y， * 索引2为中文字符串水印坐标X，索引3为中文字符串水印坐标Y,索引4为水印图片坐标X，索引5为水印图片坐标Y) / privatefunction* get_mark_xy($mark_postion){ $img_info = getimagesize($this-&gt;source_img); $stre_w = strlen($this-&gt;mark_str)9+5 ; //水印英文字符串的长度(px)(5号字的英文字符大小约为9px 为了美观再加5px) //(12号字的中文字符大小为12px,在utf8里一个汉字长度为3个字节一个字节4px 而一个英文字符长度一个字节大小大约为9px // 为了在中英文混合的情况下显示完全 设它的长度为字节数7px) $strc_w = strlen($this-&gt;mark_str)7+5 ; //水印中文字符串的长度(px) if(is_file($this-&gt;mark_logo)){ //如果存在水印logo的图片则取得logo图片的基本信息 $logo_info = getimagesize($this-&gt;mark_logo); } //由于imagestring函数和imagettftext函数中对于字符串开始位置不同所以英文和中文字符串的Y位置也有所不同 //imagestring函数是从文字的左上角为参照 imagettftext函数是从文字左下角为参照 switch($mark_postion){ case 1: //位置左下角 $mark_xy[0] = 5; //水印英文字符串坐标X $mark_xy[1] = $img_info[1]-20;//水印英文字符串坐标Y $mark_xy[2] = 5; //水印中文字符串坐标X $mark_xy[3] = $img_info[1]-5;//水印中文字符串坐标Y $mark_xy[4] = 5;//水印图片坐标X $mark_xy[5] = $img_info[1]-$logo_info[1]-5;//水印图片坐标Y break; case 2: //位置右下角 $mark_xy[0] = $img_info[0]-$stre_w; //水印英文字符串坐标X $mark_xy[1] = $img_info[1]-20;//水印英文字符串坐标Y $mark_xy[2] = $img_info[0]-$strc_w; //水印中文字符串坐标X $mark_xy[3] = $img_info[1]-5;//水印中文字符串坐标Y $mark_xy[4] = $img_info[0]-$logo_info[0]-5;//水印图片坐标X $mark_xy[5] = $img_info[1]-$logo_info[1]-5;//水印图片坐标Y break; case 3: //位置左上角 $mark_xy[0] = 5; //水印英文字符串坐标X $mark_xy[1] = 5;//水印英文字符串坐标Y $mark_xy[2] = 5; //水印中文字符串坐标X $mark_xy[3] = 15;//水印中文字符串坐标Y $mark_xy[4] = 5;//水印图片坐标X $mark_xy[5] = 5;//水印图片坐标Y break; case 4: //位置右上角 $mark_xy[0] = $img_info[0]-$stre_w; //水印英文字符串坐标X $mark_xy[1] = 5;//水印英文字符串坐标Y $mark_xy[2] = $img_info[0]-$strc_w; //水印中文字符串坐标X $mark_xy[3] = 15;//水印中文字符串坐标Y $mark_xy[4] = $img_info[0]-$logo_info[0]-5;//水印图片坐标X $mark_xy[5] = 5;//水印图片坐标Y break; default : //其它默认为右下角 $mark_xy[0] = $img_info[0]-$stre_w; //水印英文字符串坐标X $mark_xy[1] = $img_info[1]-5;//水印英文字符串坐标Y $mark_xy[2] = $img_info[0]-$strc_w; //水印中文字符串坐标X $mark_xy[3] = $img_info[1]-15;//水印中文字符串坐标Y $mark_xy[4] = $img_info[0]-$logo_info[0]-5;//水印图片坐标X $mark_xy[5] = $img_info[1]-$logo_info[1]-5;//水印图片坐标Y break; } return $mark_xy; } /* * 创建源图片 * @access private * @param string $source_img 源图片(路径+文件名) * @return img 从目标文件新建的图像 / privatefunction* img_create($source_img) { $info = getimagesize($source_img); switch ($info[2]){ case 1: if(!function_exists(‘imagecreatefromgif’)){ $source = @imagecreatefromjpeg($source_img); }else{ $source = @imagecreatefromgif($source_img); } break; case 2: $source = @imagecreatefromjpeg($source_img); break; case 3: $source = @imagecreatefrompng($source_img); break; case 6: $source = @imagecreatefromwbmp($source_img); break; default: $source = FALSE; break; } return $source; } /** * 重命名图片 * @access private * @param string $source_img www.3ppt.com 源图片路径+文件名 * @return string $dst_name 重命名后的图片名(路径+文件名) / privatefunction* set_newname($sourse_img) { $info = pathinfo($sourse_img); $new_name = $this-&gt;resize_w.‘_’.$this-&gt;resize_h.‘_’.$info[‘basename’];//将文件名修改为：宽_高_文件名 if($this-&gt;dst_path == ‘’){ //如果存放缩略图路径为空则默认为源文件同文件夹 $dst_name = str_replace($info[‘basename’],$new_name,$sourse_img); }else{ $dst_name = $this-&gt;dst_path.$new_name; } return $dst_name; } /** * 输出图片 * @access private * @param $im 处理后的图片 * @param $dst_name 输出后的的图片名(路径+文件名) * @return 输出图片 / publicfunction* img_output($im,$dst_name) { $info = getimagesize($this-&gt;source_img); switch ($info[2]){ case 1: if(!function_exists(‘imagegif’)){ imagejpeg($im,$dst_name); }else{ imagegif($im, $dst_name); } break; case 2: imagejpeg($im,$dst_name); break; case 3: imagepng($im,$dst_name); break; case 6: imagewbmp($im,$dst_name); break; } } } ?&gt;","link":"/2014/01/16/PHP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%B1%BB/"},{"title":"PHP通过date()函数取得时间错误","text":"通过date()函数获取时间后，发现小时时间不对，比现在的时间小8个小时，无论用H，还是用h都一样，这个是因为当前获取的是格林威治时间，与北京时间相差8小时。 解决方法如下： 1、修改php.ini配置文件 打开php.ini文件，一般在php配置根目录下，找到其中的 ;date.timezone，删掉前面的分号，并改为date timezone = PRC。保存，重启Apahce服务即可（有时用restart会有问题，先stop然后start就行了）。 2、加上date_default_timezone_set(timezone_identifier)函数 这个函数的意思是，设置当前时区，对时间进行初始化，在页头或获取时间语句前加上这句话。 例如： date_default_timezone_set(PRC); echo date(“Y-m-d H-i-s”); 参数如下设置： date_default_timezone_set(PRC) –设置为北京时间，PRC代表中华人民共和国 date_default_timezone_set(‘Asia/Shanghai’) –设置为上海时间，大陆可用的还有‘Chongqi’(重庆)、‘Urumqi’(乌鲁木齐)同样可以的 港台地区可用：Asia/Macao ，Asia/Hong_Kong ，Asia/Taipei （依次为澳门，香港，台北） 新加坡地区：Asia/Singapore （好像就是没看到北京的） 此函数永远会返回True，但一定要输入timezone_identifier，不然会报错。 下面是所有的时区标识符：（供大家参考） CET CST6CDT Cuba EET Egypt Eire EST EST5EDT Etc/GMT Etc/GMT+0 Etc/GMT+1 Etc/GMT+10 Etc/GMT+11 Etc/GMT+12 Etc/GMT+2 Etc/GMT+3 Etc/GMT+4 Etc/GMT+5 Etc/GMT+6 Etc/GMT+7 Etc/GMT+8 Etc/GMT+9 Etc/GMT-0 Etc/GMT-1 Etc/GMT-10 Etc/GMT-11 Etc/GMT-12 Etc/GMT-13 Etc/GMT-14 Etc/GMT-2 Etc/GMT-3 Etc/GMT-4 Etc/GMT-5 Etc/GMT-6 Etc/GMT-7 Etc/GMT-8 Etc/GMT-9 Etc/GMT0 Etc/Greenwich Etc/UCT Etc/Universal Etc/UTC Etc/Zulu Factory GB GB-Eire GMT GMT+0 GMT-0 GMT0 Greenwich Hongkong HST Iceland Iran Israel Jamaica Japan Kwajalein Libya MET MST MST7MDT Navajo NZ NZ-CHAT Poland Portugal PRC PST8PDT ROC ROK Singapore Turkey UCT Universal UTC W-SU WET","link":"/2015/05/10/PHP%E9%80%9A%E8%BF%87date-%E5%87%BD%E6%95%B0%E5%8F%96%E5%BE%97%E6%97%B6%E9%97%B4%E9%94%99%E8%AF%AF/"},{"title":"React Native 初始化项目慢的解决办法","text":"初始化React Native：react-native init ProjectName 由于墙的原因，即便开ss也会经常卡着不动。再次感谢方教授！ 先看下NMP官网对 node-gyp 的介绍 node-gyp Node.js native addon build tool node-gyp is a cross-platform command-line tool written in Node.js for compiling native addon modules for Node.js. It &gt;bundles the gyp project used by the Chromium team and takes away the pain of dealing with the various differences in build platforms. It is the replacement to the node-waf program which is removed for node v0.8. If you have a native addon for node that still has a wscript file, then you should definitely add a binding.gyp file to support the latest versions of node. 在初始化的过程中，npm 会下载源码然后使用 node-gyp 进行编译，而 node-gyp 编译时候需要 NodeJs 源码来提供头文件，所以它会先尝试下载 NodeJs 源码，而在天朝墙外 CDN 经常抽风，下载 NodeJs 源码奇慢无比，那么自然要卡很久。 解决方法：先把 NodeJs 源码下载到本地，然后提取给 node-gyp。 terminal下（ nodejs 及 wget 自行安装 ）： touch node-gyp.sh vi node-gyp.sh 123456789101112131415161718# nodejs 版本号NODE_VERSION=`node -v | cut -d'v' -f 2`echo ${NODE_VERSION}# 下载源码包(淘宝镜像)wget http://npm.taobao.org/mirrors/node/v$NODE_VERSION/node-v$NODE_VERSION.tar.gz# 删除现有内容不完整的目录rm -rf ~/.node-gypmkdir ~/.node-gyp# 解压缩并重命名到正确格式tar zxf node-v$NODE_VERSION.tar.gz -C ~/.node-gypmv ~/.node-gyp/node-v$NODE_VERSION ~/.node-gyp/$NODE_VERSION# 创建一个标记文件printf &quot;9\\n&quot;&gt;~/.node-gyp/$NODE_VERSION/installVersion 保存退出后执行 bash node-gyp.sh 最后再替换 npm 淘宝镜像： npm config set registry=http://registry.npm.taobao.org/ 这样 React Native初始化会快很多。","link":"/2016/08/03/React-Native-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"},{"title":"SAE下修改wordpress的密码","text":"用WordPress做了好多WordPress站点玩，有的做完就扔着不管了（ihtao.cn），好久才记起来看看，悲催的是密码已经不记得了，用户名也是想了好久才记起来= =！。 看到提示可以邮箱重置，于是乎准备发个邮件重置密码，不料SAE禁用了mail函数，这可怎么办，于是想到上SAE进MySQL修改字段值。 不出预料，password果断给加密了。想改也不行啊，怎么办，只能机智的用万能密码了~ 只要在mysql中wp_user表中user_pass（密码）字段改成 $P$BFa8u8FLXok7Q5IoIbiDYvOEUqNEGW/即可 表示密码是：123456 然后再进入后台更新成你想要的密码就ok了。","link":"/2014/04/26/SAE%E4%B8%8B%E4%BF%AE%E6%94%B9wordpress%E7%9A%84%E5%AF%86%E7%A0%81/"},{"title":"SAE搭建discuz","text":"SAE（Sina App Engine）是新浪研发中心于2009年8月开始内部开发，并在2009年11月3日正式推出第一个Alpha版本的国内首个公有App Engine，SAE是新浪云计算战略的核心组成部分。 SAE 功能 SAE作为国内的公有云计算，从开发伊始借鉴吸纳Google、Amazon等国外公司的公有云计算的成功技术经验，并很快推出有别于国外公司并具有自身特色的App Engine。SAE选择在国内流行最广的Web开发语言PHP作为首选的支持语言，Web开发者可以在Linux/Mac/Windows上通过SVN或者Web版在线代码编辑器进行开发、部署、调试，团队开发时还可以进行成员协作，不同的角色将对代码、项目拥有不同的权限；SAE提供了一系列分布式计算、存储服务供开发者使用，包括分布式文件存储（Storage）、分布式数据库集群（MySQL）、分布式缓存（Memcache）、分布式定时服务（Cron）等，这些服务将大大降低开发者的开发成本。同时又由于SAE整体架构的高可靠性和新浪的品牌保证，大大降低了开发者的运营风险。另外，作为典型的云计算，SAE采用“所付即所用，所付仅所用”的计费理念，通过日志和统计中心精确的计算每个应用的资源消耗（包括CPU、内存、磁盘等）。 本文将讲解，在新浪SAE云服务上，搭建属于自己的Discuz x2.0论坛，并对网上过时、错误、模糊的教程进行了修正和扩展。 本教程搭建的论坛实例： http://dzsae.sinaapp.com/SAE是国内首个公有云计算平台，也是国内第一件云计算平台，具有简单，高效，快捷等一系列优点，使用Sina App Engine，不用租服务器就可以做各种应用、网站，不需要花一分钱，今天教大家的就是利用新浪SAE云空间免费搭建一个属于自己的Discuz x2.0论坛。 1.SAE账号注册注册网址：http://weibo.com/signup/signup.php新浪微博和SAE账号互通，利用新浪微博账号即可登录SAE，注册时需手机号验证 2.Discuz 下载由于SAE不支持IO操作，上传的代码目录没有写入权限，因此无法安装Discuz原生版本（需在服务器上修改部分安装目录的写入权限），所以只能安装专门针对SAE移植的Discuz版本。 3.下载最新版本： Discuz!X 2.0 For SAE.zip 4.SAE 创建应用 1） 登陆进入SAE首页后，进入“我的首页”——》”创建新应用“——》如下图填写应用名称等信息（iforum我已创建，因此提示已经被占用） 2） 点击”创建应用“按钮后，第一次登陆会弹出“安全认证”，如下图: 5.如果没有开通微盾，则”安全密码“即为你登陆SAE账号的密码；如果开通了微盾，则”安全密码“为你SAE账号密码+微盾动态密码（6位数字），在你手机上一分钟动态生成1次 4、 初始化准备工作创建完bisto应用后，点击bisto，进入一些初始化工作，主要有MySQL、Memcache、Storage，具体步骤如下： 1）MySQL 初始化进入”iforum“应用后，依次点击“服务管理”——》MySQL，如下图 点击“点此初始化Mysql”，完成后如下图： 2） Memcache 初始化进入”iforum“应用后，依次点击“服务管理”——》Memcache，如下图: 点击“点此初始化MC”，输入“10”M大小，提交3） Storage 初始化进入”bisto“应用后，依次点击“服务管理”——》Storage，如下图:![6.png](http://devbbs-discuzx.stor.sinaapp.com/data/attachment/forum/201312/25/183907ngc87gdn5bbbc3d8.png \"6.png\")点击“点此新建一个domain”，配置参数，如下:1） Domain名称设置为“discuzx”，因为移植版的discuzx4sae默认为“discuzx”，后面会介绍，这里一定设置为“discuzx” 2） 不得勾选“私有”，否则外面的http请求无法访问到资源3） 缓存器和防盗链，根据自己情况设置 5、上传Discuzx代码 1） 进入”bisto“应用后，依次点击“应用管理”——》“代码管理”， 2） 点击”上传代码包“——》”选择文件“——》上传步骤2下载的zip代码，如下图： 6、 Discuzx 安装1）上传Discuzx代码完成后，点击bisto链接，在浏览器输入： http://bisto.sinaapp.com/install/ 2） 点击“我同意”，继续 3） 不要管当前状态的提示，直接点击“下一步”，继续 4）如上图，选择“全新安装Discuz！（含UCenter Server），点击”下一步“，继续 5）如上图，数据库前缀，根据自己爱好修改； 系统邮箱和管理员邮箱，修改成自己邮箱； 管理员密码，一定要设置，登陆管理discuz论坛时使用，点击”下一步“，继续 6） 数据库安装完成后，会自动跳转到管理界面： http://bisto.sinaapp.com/admin.php 7）输入管理员账户和密码，登陆管理页面，如下图： 8） 如上图，提示删除安装目录”install“下的”index.php“页面，进入”应用管理“——》”代码管理“ 9） 如上图，点击”编辑代码“，依次进入”iforum”——》“install”——》右键删除“index.php”即可。 10） 访问论坛首页： http://bisto.sinaapp.com/index.php 11）如上图，发现论坛排版格式混乱，这是由于css引用路径不对，利用chrome浏览器，按F12调试，找出原因如下： 12）如上图，css路径指向不对并找不到，并且js的路径也找不到，他们都是相对路径，这是因为移植版的discuzx把需要在服务器上修改写入权限的目录（资源），改放到了SAE的storage文件存储上了，解决办法是在浏览器输入： http://bisto.sinaapp.com/uploadimg.php 13） 如上图，uploadimg.php上传静态资源到storage，回到storage查看验证一下，如下图： 14）如上图，storage——》discuzx——》static目录下，存在了uploadimg.php上传的文件或目录。此时访问论坛首页： 发现css排版还是不正确，这是由于discuzx使用了缓存的缘故，请见步骤11）红色方框内”data/cache/xxx”，解决办法就是清除缓存即可： 依次进入discuz论坛——》管理中心——》工具——》更新缓存——》勾选“数据缓存”和“模板缓存”——》确定，如下图： 15）清除缓存后，再访问论坛首页，css样式正确： 至此，已经在 SAE 上，成功搭建起了属于自己的 Discuzx 论坛！！ 本教程搭建的论坛：http://bisto.sinaapp.com/ 原文地址：http://www.ldsun.com/644.html","link":"/2013/12/26/SAE%E6%90%AD%E5%BB%BAdiscuz/"},{"title":"Prevent Bootstrap Modal from disappearing when clicking outside or pressing escape","text":"How to close modal dialog only by close icon? code: If using javascript then: [js] $(‘#myModal’).modal({ backdrop: ‘static’, keyboard: false }) [/js] and if HTML: [html] [/html]","link":"/2015/05/21/Prevent-Bootstrap-Modal-from-disappearing-when-clicking-outside-or-pressing-escape/"},{"title":"React&#x2F;Antd Warning移除大法——整个世界清净了","text":"好久没更了，真的是好久... 续个命233 HP+100最近在搬砖搞一套后台系统，用的react 17.0.1 + antd 4.12.3.闲下来瞅了瞅控制台，艾玛，几十个warning...90%都是eslint对react hook依赖的警告。虽然说可以直接 eslint-disable-next-line 一劳永逸，然而总感觉不太专业...于是乎，为了去除warning，按照react官方推荐写法，简简单单的一段代码就变得emmmmmm....消除hook warning后，最终剩下两个不明所以的warning：这两个警告只能通过升级库解决，并非自身代码问题。一、SharedArrayBuffer will require cross-origin isolation as of M91, around May 2021. See原因是react 17.0.1 使用了 SharedArrayBuffer 这个API，这个API在将来随着chrome的更新，可能会导致旧功能不可用，所以会报警告。解决方法： 将react 17.0.1 升级至 17.0.2 。react在新版本中解决了这一隐患二、You are using a whole package of antd, please use https://www.npmjs.com/package/babel-plugin-import to reduce app bundle size.这是antd报的警告，提示antd未按需加载。这个警告困扰了我许久，webpack已经设置babel-plugin-import插件来做tree-shaking了，而且分析打包出的文件，确实实现了按需加载。蛋柿，这个警告阴魂不散... 最终发现时antd的bug，已经在16.13.0修复在本地开发时会报 tree-shaking 警告信息的问题。解决方法： 将antd 4.12.3 升级至 4.13.0 以上即可。","link":"/2021/06/30/React-Antd-Warning%E7%A7%BB%E9%99%A4%E5%A4%A7%E6%B3%95%E2%80%94%E2%80%94%E6%95%B4%E4%B8%AA%E4%B8%96%E7%95%8C%E6%B8%85%E5%87%80%E4%BA%86/"},{"title":"SAE未备案域名加速","text":"众所周知，SAE对于未备案的域名比较的不仁慈，访问二级域名还好说，但对于大多数绑定顶级域名而又苦于备案的站长来说，不但得不到SAE的高速，反而变得更慢。虽然通过DNSPOD+加速乐/360DNS等免费资源可以实现双DNS加速，以及开启GZIP对网站改良的措施，对网站速度有了一定的改观，但毕竟使用的是海外代理，速度终究不理想。网站的速度无论从SEO角度还是用户体验方面来说，都是一个网站不可忽视的要素，相信众多站长长期奔走于对此优化的道路上，由此也引出了一些极其优秀的缓存软件，诸如Hyper Cache、W3 Total Cache、Wp Super Cache这些插件在网站的优化上有着极其优秀的表现，然而对于驻扎在SAE上的用户来说，目录写入权限是不可改变的硬伤。所以这些所谓的加速神器也是爱莫能助了，加之SAE的优化方法少之又少，除了压缩和DNS外似乎别无他法。本人也是经过长期致力于此，最终发现一个好方法，作为福利共享出来-SAE未备案域名加速插件：这个插件的作用主要是用来加速SAE未备案域名的访问速度，用创新的方法实现加速：采用的策略是将资源文件通过SAE二级域名进行访问，而将网站主要文件通过主域名访问，进而加快了访问速度。这个插件最初是由SAE云商店用于加速wordpress的访问，当然在SAE上也是可以使用的，由于SAE和云商店环境的细微差异，所以在SAE只需要稍加修改即可使用，下面是已经修改的可以在SAE使用的插件源代码。 插件下载：百度网盘","link":"/2014/02/19/SAE%E6%9C%AA%E5%A4%87%E6%A1%88%E5%9F%9F%E5%90%8D%E5%8A%A0%E9%80%9F/"},{"title":"SAE绑定域名后做301重定向","text":"落脚在SAE上的童鞋大多刚开始都用的是二级域名，到后来才绑定独立域名，就像我这样。绑定顶级域名后二级域名仍然可以使用，当初并没有在意这点。用SEO工具分析之后发现，有将近20%的流量流入到原二级域名，这样新域名的流量减少，而且会对新域名的收录造成一定的影响。 所以最好对原二级域名做301重定向： 在wordpress的根目录找到文件wp-blog-header.php，然后在之间适当的地方插入以下代码： if(strtolower($_SERVER[‘SERVER_NAME’])!=’www.ldsun.com') { $URIRedirect=$_SERVER[‘REQUEST_URI’]; if(strtolower($URIRedirect)==”/index.php”) { $URIRedirect=”/“; } header(‘HTTP/1.1 301 Moved Permanently’); header(‘Location:http://www.ldsun.com'.$URIRedirect); exit(); } 这是来路为非 www.ldsun.com 时301重定向到 www.ldsun.com，如果只是想只把sinaapp的二级域名重定向，第一句可以改成这样： if(strtolower($_SERVER['SERVER_NAME'])=='ldixing.sinaapp.com') 修改之后可以在这个网址进行验证：http://tool.chinaz.com/pagestatus/ 把重定向前的域名和重定向后的目标域名填上去，测试一下如果分别返回301状态码和200状态码就OK了。 PS:301重定向是什么？ 所谓301就是讲某个域名定向到另外一个域名，常见的301定向是将不带wwww.的域名定向到带www.域名。这样当我们登录不带www.的网址时，就会自动跳转到带www.的域名上。虽然这对于用于浏览网站没有任何差异，却可以告诉搜索引擎哪一个网址才是重要的，是网站的主域名。","link":"/2014/03/09/SAE%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%90%8E%E5%81%9A301%E9%87%8D%E5%AE%9A%E5%90%91/"},{"title":"SASS","text":"sass安装 install ruby sudo gem install sass申明变量12$value = 100px;$color = #fafafa; 编译sass style.scss style.css 编译风格 12345* nested：嵌套缩进的css代码，它是默认值。* expanded：没有缩进的、扩展的css代码。* compact：简洁格式的css代码。* compressed：压缩后的css代码。sass --style compressed style.scss build.css 监听文件 1234// watch a filesass --watch input.scss:output.css// watch a directorysass --watch app/sass:public/stylesheets 基本用法直接使用变量 1234$color:#fafafa;.div{ background:$color;} 变量嵌套在字符串中，需要写在#{}中 1234$side:left,.border{ border-#{$side}-color:$color;} 计算功能1234//除法需要加括号margin:(14px/2); //7pxleft:15px + 14; //29pxwidth:$var * (1/3) * 1%; //33.3% 嵌套 选择器嵌套12345678.container{ header{ height:30px; } footer{ display:block; }} 属性嵌套1234567p{ border:{//border后需加冒号 width:2px; style:solid; color:$var; }} 代码复用 继承12345678.div1{ width:20px; height:30px;}.div2{ @extend .div1; background:#fafafa;} Mixin12345678910111213141516@mixin border{ border-left:1px solid #233;}#box{ @include border;}传递参数@mixin size($height:30px){ display:inline-block; height:$height; width:100px;}#box{ @include size(50px);} 导入外部文件12@import &quot;path/style.scss&quot;@import &quot;path/main.css&quot; 条件语句123456789101112131415div{ @if 1&lt;2 { width:100%; } @if 1&gt;5 { width:50%; }}main{ @if $width&gt;100{ height:50px; }@else{ height:20px; }} 循环语句 for12345@for $i from 1 to 10{ .box-#{ $i }{ border:#{$i}px solid blue; }} while12345$i: 6;@while $i &gt; 0 { .item-#{$i} { width: 2em * $i; } $i: $i - 1;} each12345@each $item in left,right,top,bottom{ .box{ border-#{$item}:1px solid #333; }} 自定义函数123456@function setWidth($width:100px){ @return $width*2}.box{ width:setWidth(20px);}","link":"/2017/03/20/SASS/"},{"title":"SEO之meta标签","text":"SEO包涵很多方面，一般认为网站的高质量原创文章和高权重的外链尤为重要，其实meta标签是对网站发展非常重要它可以用于标注网站描述和关键字，设定页面格式，标注作者，以及刷新页面等等。meta标签的基本用法比较多，其中最重要的就是Keywords和description。这两个语句可以让搜索引擎准确的发现你的网站，吸引更多的人访问你的站点!根据现在流行搜索引擎(Lycos，AltaVista等)的工作原理,搜索引擎首先派出机器人自动在www上搜索，当发现新的网站时，便检索页面中的keywords和decription，并将其加入到自己的数据库，然后再根据关键词的密度将网站排序。所以meta标签对于SEO也是不可或缺的一部分。 meta标签分两大部分：HTTP-EQUIV和NAME变量。其中meat标签的NAME变量语法格式是：： 1.Keywords(关键字) 说明：keywords用来告诉搜索引擎你网页的关键字是什么。 举例：`` 2.description(简介) 说明：description用来告诉搜索引擎你的网站主要内容。 举例：`` **3.robots(机器人向导)** 说明：robots用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引。 CONTENT的参数有all,none,index,noindex,follow,nofollow。默认是all。 举例：`` **4.author(作者)** 说明：标注网页的作者 举例：&lt;META name=&quot;AUTHOR&quot; content=&quot;spider医生&quot;&gt; 注： 关键词尽量不要用形容词，如最好的，最大的等。同时避免使用用笼统的词，尽量做到精确。例如不用”三星手机”,改用”S4″等，寻找合适的关键词的一个技巧是：利用搜索引擎，搜索与你内容相仿的网站，查看排名前十位的网站的meta关键字，copy下来用到自己的站点上。 如果你的页面中根本没有Keywords和description的meta标签，那么机器人是无法将你的站点加入数据库，网友也就不可能搜索到你的站点。如果你的关键字选的不好，关键字的密度不高，被排列在几十甚至几百万个站点的后面被点击的可能性也是非常小的。所以,我们必须记住添加keywords和description的meta标签，并尽可能写好关键字和简介。","link":"/2014/02/18/SEO%E4%B9%8Bmeta%E6%A0%87%E7%AD%BE/"},{"title":"Sublime Text + zen coding编码神器","text":"欲利其工，必先利其器！我认为无论做什么，一款优秀的工具永远是极为重要的。这里分享程序猿的一款神器。 之前一直使用notepad++写代码，非常的轻量级，打开速度快，支持的语言多。后来又发现了zen coding的插件，安装后阵容为Notepad++ + Zen coding，zen coding支持代码缩写补全，尤其写前段页面html,css时简直是神器，效率非常的高，简直爱不释手。 换OSX系统后notepad不再支持，支持急需入手新的编码神器，换了好多总是不合人意。终于是找到Sublime Text，同样的轻量，高亮和黑色背景美到窒息，简洁的UI界面，配上行云流水操作，写代码简直是一种享受，不幸的是Sublime Text是收费软件，59刀也配的上它的优秀表现，不过好消息是作者还是比较厚道的，只是偶尔提醒购买，丝毫不影响编码。如果这么好的编辑器能用zen coding，绝对的完美，事实证明完美的东西是绝对的。简单操作后便可以舒适的享受写代码的过程了： 1.Sublime Text 官网下载http://www.sublimetext.com/对应的版本。Sublime Text 2是比较成熟稳定的版本，也是我的选择； 2.安装完Sublime Text 2后打开； 3.按shift+command+P打开命令行，输入install，会自动提示install package,回车选择； 4.然后输入Emmet（zen coding已经改名）回车即可； 5.等提示成功后重启Sublime Text即可，此时zencoding已添加，神器已经祭出！","link":"/2014/10/10/Sublime-Text-zen-coding%E7%BC%96%E7%A0%81%E7%A5%9E%E5%99%A8/"},{"title":"Sublime: There are no packages available for installation","text":"Mac下Sublime安装插件时突然报错 command+shift+p调出package control出现错误提示： There are no packages available for installation 出错原因：Intent服务提供者（ISP）不支持IPv6就会引发上述错误。 解决方法： 第一步： 获取 sublime.wbond.net 的 IPv4 地址； 打开terminal运行：dig @【DNS】 -t A sublime.wbond.net +noall +answer 输出结果如下： ; &lt;&lt;&gt;&gt; DiG 9.9.5-3-Ubuntu &lt;&lt;&gt;&gt; @8.8.8.8 -t A sublime.wbond.net +noall +answer ; (1 server found) ;; global options: +cmd sublime.wbond.net. 82 IN A 50.116.34.243 IPv4 地址就是： 50.116.34.243 第二步： 把该地址添加到 hosts 文件内； 键入 sudo vi /etc/hosts 以管理员权限编辑 /etc/hosts 文件； 将 【IPv4】 sublime.wbond.net（【IPv4】替换成 IPv4 地址）添加到 hosts 文件内。 问题解决。","link":"/2016/02/14/Sublime-There-are-no-packages-available-for-installation/"},{"title":"Svn-commit editor error on Mac","text":"If you are trying to commit the source code in SVN very first time and you see the following error that means You have not set the correct editor for the SVN. If you look closely the SVN suggests the possible fixes. svn commit svn: Commit failed (details follow): svn: Could not use external editor to fetch log message; consider setting the $SVN_EDITOR environment variable or using the –message (-m) or –file (-F) options svn: None of the environment variables SVN_EDITOR, VISUAL or EDITOR are set, and no ‘editor-cmd’ run-time configuration option was found Possible fixesYou can use either of the following options. Set the one of the following global variables’ value in ~/.bashrc file. The value can be your favorite editor command e.g vim, emac, nano, gedit etc. export SVN_EDITOR=vim export VISUAL=vim export EDITOR=vim Once the above line is set in the ~/.bashrc file, then run the following command. source ~/.bashrc Now try to run SVN commit command again. This time SVN will ask you to provide the commit message in the editor. You can provide the commit message, save it, and exit. If you don’t like setting the global variable, you can provide the editor command during the execution of svn commit command like as following. svn commit –editor-cmd vim In the above command I have specified vim . You can specify your favorite editor command. There is another shortcut, you can provide the commit message inline. svn commit -m “Your commit message!” Hope one of the above solutions will fix your problem. If you have figured out other way to fix it, then please share it in the comment section. If you like this post, please share it using social media buttons given on the left side of this page. Please feel free to leave your comments or suggestions about the above post or the website. Thank you.","link":"/2014/10/19/Svn-commit-editor-error-on-Mac/"},{"title":"Ubuntu 12.04下LAMP安装配置","text":"我是一个Linux新手，想要安装一台Ubuntu 12.04版的Linux服务器，用这台服务器上的LAMP套件来运行我自己的个人网站。LAMP套件就是“Linux+Apache+Mysql+PHP这四款软件组成了一个可以使网站运行的套装工具软件。”通过安装尝试，我获得了一些成功的安装配置经验，通过本文提供给Linux网站服务器系统的入门者学习。本次安装的网站软件环境中将使用Apache2网页服务软件、MySQL5网站后台数据库软件、以及PHP5角本解释语言软件，配置成的系统也可提供FTP服务。 LAMP 的安装 1. sudo apt-get install apache2 mysql-server mysql-client php5 php5-gd php5-mysql 由于LAMP大部分操作与/var/www目录相关，为了方便，修改该目录的权限为普通用户可访问。 1. sudo chmod 777 /var/www/ 2. phpmyadmin 安装 1. sudo apt-get install phpmyadmin 在安装过程中会要求选择Web server：apache2或lighttpd，选择apache2，按tab键然后确定。然后会要求输入设置的Mysql数据库密码连接密码 Password of the database’s administrative user。 然后将phpmyadmin与apache2建立连接，以我的为例：www目录在/var/www，phpmyadmin在/usr/share /phpmyadmin目录，所以就用命令：sudo ln -s /usr/share/phpmyadmin /var/www 建立连接。 phpmyadmin测试：在浏览器地址栏中打开http://localhost/phpmyadmin。 Apache 配置 （1）启用 mod_rewrite 模块 终端命令：sudo a2enmod rewrite （2）重启Apache服务器：sudo /etc/init.d/apache2 restart Apache重启后可以测试一下，在/var/www目录下新建文件test.php，写入代码： 保存，在地址栏输入http://127.0.0.1/test.php 或 http://localhost/test.php ，如果正确出现了Mysql已经正确配置，表明Apache和mysql都正常了。(记得重启Apache服务器后再测试)。 test.php 1. 4. 浏览器PHP中文乱码问题 上面在FireFox浏览器中打开test.php测试时，如果出现了中文乱码，则是默认语言设置问题，解决方法如下： 打开apache配置文件： udo gedit /etc/apache2/apache2.conf，在最后面加上：AddDefaultCharset UTF-8，如果还是乱码的，再将UTF-8改用gb2312。 重启Apache：sudo /etc/init.d/apache2 restart 再刷新test.php 中文乱码没有了 更多Ubuntu相关信息见ubuntu专题页面http://www.ldsun.com","link":"/2013/10/30/Ubuntu-12-04%E4%B8%8BLAMP%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"title":"Ubuntu安装wine时停止在&quot;正在设定ttf-mscorefonts-installer&quot;解决方法","text":"Ubuntu 安装wine时停止在”正在设定ttf-mscorefonts-installer”:[![0489bb224f4a20a4f72f646390529822730ed085](http://www.ldsun.com/wp-content/uploads/2014/04/0489bb224f4a20a4f72f646390529822730ed085.png)](http://www.ldsun.com/wp-content/uploads/2014/04/0489bb224f4a20a4f72f646390529822730ed085.png) 将滚动条下拉到底，按Tab键，即切换焦点，即选中【确定】，再回车，继续。。。 触类旁通。","link":"/2014/05/03/Ubuntu%E5%AE%89%E8%A3%85wine%E6%97%B6%E5%81%9C%E6%AD%A2%E5%9C%A8-%E6%AD%A3%E5%9C%A8%E8%AE%BE%E5%AE%9Attf-mscorefonts-installer-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"title":"VPS磁盘爆满导致ngnix无法启动","text":"昨天感觉VPN速度贼慢，访问了下博客发现速度也上不去，遂登录控制面板看了一眼。结果Disk usage直接爆满，红的相当感人。 实在是想不出什么占用了这么大的空间，直接重启看看，然后就没有然后了，因为重启完磁盘占用率依旧感人，同时ngnix没有启动。尝试手动启动，结果报错提示磁盘空间不足，无法启动ngnix服务器。最可悲的是ssh也因为磁盘空空间不足死活连不上，真是哔了小狗了。 万幸的是vps的控制面板自带的简易shell还能用，输入**df -h查看磁盘占用情况，结果是100%占用，然后一路df -sh *定位过去发现mysql目录下爆满(df -h查看哪个目录满，然后切款到该目录下后用df -sh *继续追踪**)，原来是装LNMP的时候默认开启了mysql的日志，然后满满的全是mysql-bin.*的日志文件。 解决方法： 1.直接删除已有日志文件root@ludis:/usr/local/mysql/var# rm -f ./mysql-bin.* 2.关闭Mysql的log-bin日志功能： vim /etc/my.cnf 找到： log-bin=mysql-bin binlog_format=mixed 在前面加上#注释掉，:wq保存退出。 最后service ngnix restart即可.","link":"/2015/09/22/VPS%E7%A3%81%E7%9B%98%E7%88%86%E6%BB%A1%E5%AF%BC%E8%87%B4ngnix%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/"},{"title":"Undefined property: Index::$load","text":"I just started to develop a new site with CI. For now, I only have three view files loaded on my index pages which are made strictly with HTML. When I visit the index page, I get the following error: *A PHP Error was encountered* *Severity: Notice* *Message: Undefined property: Index::$load* *Filename: controllers/index.php* Line Number: 7 And my controller index.php page as follows: [php] load->helper(‘url’); $this->load->view(‘index’); } } ?> [/php] So i just checked, and i found class such Controller,CI_Base,_ci_initialize,Default and index are reserved words . http://codeigniter.org.cn/user_guide/general/reserved_names.html Of course, you can also use index as your class name, before your use,add the follow code is OK: [php] load->helper(‘url’); $this->load->view(‘index’); } } ?> [/php]","link":"/2014/07/17/Undefined-property-Index-load/"},{"title":"Warning: Cannot modify header information - headers already sent by ......","text":"wordpress升级完一个主题后，出现了错误提示。 Warning: Cannot modify header information - headers already sent by (output started at /data1/www/htdocs/363/ihaotao/1/wp-content/themes/mitao/includes/creekoo_options.php:1) in wp-includes/option.php on line 563 Warning: Cannot modify header information - headers already sent by (output started at /data1/www/htdocs/363/ihaotao/1/wp-content/themes/mitao/includes/creekoo_options.php:1) in wp-includes/option.php on line 564 出这个错误是因为 header(‘Content-Type:text/html;charset= UTF-8‘);发送头之前不能有任何输出，空格也不行,需要将header(…)之前的空格去掉,或者其他输出的东西去掉，如果他上面include其他文件了，还要检查其他文件里是否有输出. 即根据路径把wp-content/themes/mitao/includes/creekoo_options.php文件第一行前的输出或空格去掉即可。","link":"/2013/12/22/Warning-Cannot-modify-header-information-headers-already-sent-by/"},{"title":"Win8.1上搭建IIS8+PHP+MySQL+phpMyAdmin","text":"怎么把自己的电脑搭建成服务器？本文演示Win8.1中安装配置IIS8，并搭建支持PHP和MySQL的运行环境，最后使用phpMyAdmin管理MySQL数据库。 一、IIS8的安装1.打开控制面板→程序和功能→启用或关闭Windows 功能 2.“Internet Information Services”→“Web管理工具”下面所有地的选项 ; 勾选“万维网服务”下面的“应用程序开发”下所有选项。如图所示，最后点击“确定”按钮，完成更新过程。 由于要支持PHP，因此记得在应用程序开发功能中选中CGI这一项，为了支持尽可能多的语言，最好全选。 3.更新完成后，再次进入“控制面板”→“系统和安全”→“管理工具”→“Internet（IIS）信息服务”。 4.依次展开“PC”→“网站”→“Default Web Site”，右击选择“内容视图”模式，右击“iisstart.htm”选择“浏览”项。（如果Default Web Site显示关闭，需要右击选择启动即可。） 如果此时能打开网页，则表示IIS已安装完成，Web服务器就搭建成功啦。 二.配置PHP环境 1.首先下载PHP，大家可以到官网下载最新版本的PHP程序，官网地址：http://windows.php.net/download/ 我下载的是php-5.5.6-Win32-VC11-x64.zip。是32位系统就下载x86，是64位就下载x64. 2.解压下载的zip压缩包到任意目录下，我解压到W:\\php下; 3.配置PHP：复制W:\\php\\php.ini-development到桌面并改名为php.ini （打开桌面上的php.ini使用CTRL+F搜索相关字段并按以下说明进行修改：) (1).修改当前的时区date.timezone =”Asia/Shanghai”，注意去掉前面的分号“;” (2).激活你需要的扩展选项，删除一下dll语句前的分号“;”以激活他们 extension=php_gd2.dll extension=php_mbstring.dll extension=php_mysql.dll extension=php_mysqli.dll extension=php_pdo_mysql.dll (3).设置DLL文件的路径extension_dir = “W:\\php\\ext\\”，记得去掉前面的分号“;” (4).保存修改并将php.ini复制到C:\\windows目录下 （注：可以直接在C:\\windows目录下进行修改，但win8.1有权限问题，不方便。） 三、配置IIS支持PHP （1）进入“控制面板”→“管理工具”→“Internet信息服务(IIS)管理器”→“处理程序映射” （2）选择“处理程序映射”双击，然后最右边选择“添加模块映射”： （3）”添加“→模块选择“FastCgiModule”，可执行文件选择“W:\\php\\php-cgi.exe” 再添加模块选择映射中选择“是” （4）给网站添加默认文档：default.php和index.php （5）测试PHP环境 在建立的网站目录下新建一个index.php文件内容为“”，然后再在浏览器中打开“localhost”，即可出现类似如下界面： （我的网站根目录：C:\\inetpub\\wwwroot） 四、安装配置MySQL数据库 （1）首先下载MySQL：http://dev.mysql.com/downloads/ 下载完之后根据引导安装即可，这里不做说明。 （2）为了让PHP能加载到MySQL的扩展，需要将C:\\Program Files\\MySQL\\MySQL Server 5.5\\lib\\libmysql.dll复制到C:\\WINDOWS\\SYSTEM32目录下 说明：这步很重要，由于上面配置php.ini时已经激活了extension=php_mysqli.dll，该功能需要libmysql.dll的支持。否则mysqli会激活失败，这也将影响到phpMyAdmin的使用。 此步骤需要重启IIS服务器，在命令行中输入“iisreset /RESTART” ** ** 五、安装配置phpMyAdmin phpMyAdmin是一个基于PHP环境用来管理MySQL数据库的一个WEB工具，如果phpMyAdmin能够成功运行，那么说明你前面IIS+PHP+MYSQL的安装配置完全正确了。 （1）下载phpMyAdmin. （2）将mysql-cluster-gpl-7.3.3-winx64.msi解压到W:\\phpMyAdmin中. （3）在IIS中创建一个虚拟目录php指向W:\\phpMyAdmin。 六、测试phpMyAdmin在浏览器中输入http://localhost/php如果出现下面的界面，说明成功了。 ** 至此安装好之后就可以登录数据库管理了。** 上面的步骤都是自己在搭建时记录下来的，绝对真实可用。你也动手试一试吧。 PS：以上方法也可适用于Win7/win8中，搭建方法大同小异，大家可以尝试一下。","link":"/2013/11/27/Win8-1%E4%B8%8A%E6%90%AD%E5%BB%BAIIS8-PHP-MySQL-phpMyAdmin/"},{"title":"Wordpress to Ghost","text":"环境： Centos-6、Ngnix Nodejs：v0.10.40 Npm：1.4.28 MySQL：5.1.73 前期准备 yum update 更新yum源 yum pdate 更新yum源 yum groupinstall &quot;Development Tools&quot; 安装开发工具包 安装Nginx 先编辑下Nginx的仓储地址，新建nginx.repo文件: vi /etc/yum.repos.d/nginx.repo 在文件中写入以下内容： 12345[nginx] name=nginx repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/ gpgcheck=0enabled=1 保存退出，然后使用yum下载Nginx，并安装： sudo yum install nginx -y sudo service nginx start 开启nginx sudo chkconfig nginx on 设置nginx为开机启动 这样Nginx的安装就完成了，在浏览器中输入VPS的IP或者域名就可以看见Nginx友好的提示：“Welcome to Nginx!” 使用Nginx配置反向代理 如果完成上一步并且在浏览器中看见Nginx的welcome，那么我们就可以开始配置反向代理，让代理从80端口指向2368端口 去到以下这个目录： cd /etc/nginx/conf.d 删掉default.conf配置文件 rm default.conf 在此目录下新建一个.conf文件，文件名随意 vi myself.conf 在文件中写入以下内容： 1234567891011server {listen 80;server_name zyden.vicp.cc; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:2368; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; }} 将server_name换成自己的域名，或者ip，保存退出，并重启nginx: service nginx restart ok，nginx的问题就close file了 安装配置Mysql Ghost v0.7.4 full (zh) 集成了sqlite3，不喜欢用Mysql的话可以忽略此步骤 :yum install mysql mysql-server service mysqld start 启动mysqlmysql chkconfig mysqld on 设置为开机启动 mysql_secure_installation 配置mysql 如下： 12345Set root password? [Y/n] //设置root密码 -- 根据个人需求anonymous users? [Y/n] //删除匿名用户 -- y Disallow root login remotely? [Y/n] //禁止root用户远程登录 --n Remove test database and access to it? [Y/n] //删除默认的 test 数据库 --y Reload privilege tables now? [Y/n] //是否马上应用最新的设置 --y 为了支持中文，我们还要修改mysql的字符支持，编辑MySQL的配置文件： vi /etc/my.cnf 在对应的位置加上对应的内容： 1234567[client]default-character-set=utf8 [mysql]default-character-set=utf8 [mysqld]character-set-server=utf8collation-server=utf8_general_ci 新建一个ghost专用的mysql用户和专用的database： mysql -u root -p //用root用户登录mysql create database ghost;//创建ghost数据库 GRANT ALL PRIVILEGES ON ghost.* To 'ghost'@'%' IDENTIFIED BY '密码';//创建ghost database 和 用户名为ghost的用户 //%代表能被所有地址访问 安装Node.js 这里根据Ghost官方的建议，我们安装v0.10.40版本 1234 wget http://nodejs.org/dist/v0.10.40/node-v0.10.40.tar.gz tar zxvf node-v0.10.40.tar.gz cd node-v0.10.40 ./configure mmake &amp;&amp; make install 安装Ghost 将ghost安装在/var/www下 cd /var/www 没有就创建该目录 wget http://dl.ghostchina.com/Ghost-0.7.4-zh-full.zip下载中文版的Ghost（原生版goole font会被墙，需要自己优化） 解压： unzip -d ghost ghost-latest.zip 进入ghost安装目录： cd ghost 安装Ghost： sudo npm install --production安装完成后可以通过如下命令启动ghost的开发模式，测试安装是否成功：npm start3.7.此时ghost将会运行在127.0.0.1:2368上，在浏览器中输入此地址即可访问。这里要将config.example.js重命名为config.js再对其进行修改配置mv config.example.js config.jsvi config.js我们找到生产环境的配置：production 1234567891011121314151617production: { url: 'www.ldsun.com', //这里是你自己VPS主机的域名，或者IP mail: {}, database: { client: 'mysql'这里我选择使用mysql作为我博客的数据库 connection: { host : '127.0.0.1', user : 'ghost', //mysql用户名 password : '', //密码 database : 'ghost', //之前创建的ghost数据库名称 charset : 'utf8' }, server: { host: '127.0.0.1', port: '2368'//若修改该端口记得在nginx中做相应改变 } } 用命令npm start来试试启动开发者模式的Ghost，启动后在浏览器输入自己blog地址如果能看见Ghost。至此ghost安装成功！ 使用PM2让Ghost永远在线 只要一断开ssh，Ghost的进程就会被关闭，这里使用PM2来守护Ghost服务进程，并让其运行在生产模式production上 12345678910//进到ghost的安装目录cd /var/www/ghost//安装pm2npm install pm2 -g//让ghost以production模式运作，指定程序的入口index.js，并且此进程命名为ghostNODE_ENV=production pm2 start index.js --name &quot;ghost&quot;//开机启动pm2 startup centos//保存设置pm2 save 这样进程守护就完成了，ghost会永远在线，并且会伴随vps重启运行，几个常见命令如下： pm2 restart 进程名 重启进程 pm2 list 或 pm2 status 查看运行的进程 pm2 show 进程名/进程ID 查看进程详情 数据转移 wp搜索“Ghost”插件，或手动下载经测试，1M左右的wp-posts数据表用该插件可以导出为ghost可用的json文件，我的wp-posts数据表接近3M，没有成功导出过，最后自己写个脚本跑出来即可。 图片处理 图片迁移我是选择将原wp的所有图片传到七牛，然后给nginx写rewrite规则。 wp的图片存在wp-content/uploads中，将所有图片下载下来。 注册七牛账号，新建一个Bucket仓库，下载上传所用命令行工具 切换到该工具的目录下，执行初始化： ./qrsboxcli init &lt;AccessKey&gt; &lt;SecretKey&gt; &lt;SyncDir&gt; &lt;Bucket&gt; [&lt;KeyPrefix&gt;] AccessKey、SecretKey可进入个人中心查看 SyncDir 是本地的同步目录，该目录下的文件会随时同步上传值七牛云存储。 Bucket 是保存同步文件的资源空间名。 KeyPrefix 是文件前缀，可选。如果设置了该参数，那么上传的文件名前都会加上前缀。这个前缀主要用于在空间中区分不同上传来源的文件。 然后使用以下命令开始文件同步： ./qrsboxcli sync &amp; 查看进程： ./qrsboxcli log 终止进程： ./qrsboxcli stop 设置Nginx Rewrite规则 图片上传到七牛之后，配置nginx.conf。打开之前创建的.conf文件： vim /etc/nginx/conf.d/myself.conf 由于wp文章中的图片请求都是wp-content/uploads/year/month/*.(jpg|png|gif)，所以可以按照如下规则rewrite图片地址： 123456location ^~ /wp-content/ { if (!-e $request_filename) { rewrite ^/wp-content/uploads/(.*)$ http://7xqpve.com1.z0.glb.clouddn.com/$1 last; break; }} 保存，重启nginx服务即可。","link":"/2016/07/21/Wordpress-to-Ghost/"},{"title":"Yii Property &quot;CDbConnection.tableprefix&quot; is not defined.","text":"I’m new to the Yii framework. I created a table named ‘tbl_user’, had set the tablePrefix to ‘tbl_’ in main.php in the ‘db’ array. When I ran the model command from the yii shell script , I got the following: Stack Trace: [php] #0 W:\\newwamp\\www\\shop\\framework\\YiiBase.php(220): CComponent-&gt;_set(“tableprefix”, “tbl“) #1 W:\\newwamp\\www\\shop\\framework\\base\\CModule.php(386): YiiBase::createComponent(array(“class” =&gt;”CDbConnection”,”connectionString” =&gt; “mysql:host=localhost;dbname=testdrive”, “emulatePrepare” =&gt; true, “username” =&gt; “root”, …)) #2 W:\\newwamp\\www\\shop\\framework\\base\\CModule.php(103): CModule-&gt;getComponent(“db”) #3 W:\\newwamp\\www\\shop\\shop\\protected\\controllers\\IndexController.php(7): CModule-&gt;__get(“db”) #4 W:\\newwamp\\www\\shop\\framework\\web\\actions\\CInlineAction.php(49): IndexController-&gt;actionIndex() #5 W:\\newwamp\\www\\shop\\framework\\web\\CController.php(308): CInlineAction-&gt;runWithParams(array(“r” =&gt; “index/index”)) #6 W:\\newwamp\\www\\shop\\framework\\web\\CController.php(286): CController-&gt;runAction(CInlineAction) #7 W:\\newwamp\\www\\shop\\framework\\web\\CController.php(265): CController-&gt;runActionWithFilters(CInlineAction, array()) #8 W:\\newwamp\\www\\shop\\framework\\web\\CWebApplication.php(282): CController-&gt;run(“index”) #9 W:\\newwamp\\www\\shop\\framework\\web\\CWebApplication.php(141): CWebApplication-&gt;runController(“index/index”) #10 W:\\newwamp\\www\\shop\\framework\\base\\CApplication.php(180): CWebApplication-&gt;processRequest() #11 W:\\newwamp\\www\\shop\\shop\\index.php(15): CApplication-&gt;run() [/php] I removed the tablePrefix entry from main.php. When I ran the model command again, it shows what i want, i have wrote var_dump(Yii::app()-&gt;db); in IndexController.php. it worked! object(CDbConnection)[13] public ‘connectionString’ =&gt;string‘mysql:host=localhost;dbname=testdrive’(length=37)public* ‘username’ =&gt;string‘root’*(length=4)*public ‘password’ =&gt;string‘528126’*(length=6)public* ‘schemaCachingDuration’ =&gt;int0public ‘schemaCachingExclude’ =&gt;*array(size=0)empty*public ‘schemaCacheID’ =&gt;string‘cache’*(length=5)*public ‘queryCachingDuration’ =&gt;int0public ‘queryCachingDependency’ =&gt;nullpublic ‘queryCachingCount’ =&gt;int0public ‘queryCacheID’ =&gt;string‘cache’*(length=5)*public ‘autoConnect’ =&gt;booleantruepublic ‘charset’ =&gt;string‘utf8’*(length=4)public* ‘emulatePrepare’ =&gt;booleantruepublic ‘enableParamLogging’ =&gt;booleanfalsepublic ‘enableProfiling’ =&gt;booleanfalsepublic ‘tablePrefix’ =&gt;nullpublic ‘initSQLs’ =&gt;nullpublic ‘driverMap’ =&gt;*array(size=9) ‘pgsql’ =&gt;string‘CPgsqlSchema’(length=12) ‘mysqli’ =&gt;string‘CMysqlSchema’(length=12) ‘mysql’ =&gt;string‘CMysqlSchema’(length=12) ‘sqlite’ =&gt;string‘CSqliteSchema’(length=13) ‘sqlite2’ =&gt;string‘CSqliteSchema’(length=13) ‘mssql’ =&gt;string‘CMssqlSchema’(length=12) ‘dblib’ =&gt;string‘CMssqlSchema’(length=12) ‘sqlsrv’ =&gt;string‘CMssqlSchema’(length=12) ‘oci’ =&gt;string‘COciSchema’*(length=10)public* ‘pdoClass’ =&gt;string‘PDO’*(length=3)private* ‘_attributes’ =&gt;*array(size=0)emptyprivate* ‘_active’ =&gt;booleantrueprivate ‘_pdo’ =&gt;object(PDO)[14] private ‘_transaction’ =&gt;nullprivate ‘_schema’ =&gt;nullpublic ‘behaviors’ =&gt;*array(size=0)**empty*private ‘_initialized’ (CApplicationComponent)=&gt;booleantrueprivate ‘_e’ (CComponent)=&gt;nullprivate ‘_m’ (CComponent)=&gt;null Any idea why I encountered this? Here’s what I have in main.php. [php]’db’=&gt;array( ‘class’=&gt;’CDbConnection’, ‘connectionString’ =&gt; ‘mysql:host=localhost;dbname=testdrive’, ’emulatePrepare’ =&gt; true, ‘username’ =&gt; ‘root’, ‘password’ =&gt; ‘528126’, ‘charset’ =&gt; ‘utf8’, ‘tableprefix’ =&gt; ‘tbl_’, ),[/php]","link":"/2014/04/15/Yii-Property-CDbConnection-tableprefix-is-not-defined/"},{"title":"WordPress怎么调整每页显示文章数量","text":"想改一下wordpress每页显示10篇文章的设置，本来以为要改代码，结果找了半天发现原来不用那么麻烦。 进入后台，【设置】→【阅读】，可以设置每页显示的日志数量。","link":"/2013/12/22/WordPress%E6%80%8E%E4%B9%88%E8%B0%83%E6%95%B4%E6%AF%8F%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%95%B0%E9%87%8F/"},{"title":"Yii框架学习笔记（三）将后台模板整合到框架","text":"将后台模板整合到框架中有两种方法，一种是两个入口文件，另一种可以把后台做为一个模块。 一，两个入口文件方法： 项目目录结构(图): 前后台引导文件分别如下： index.php: [php]require(‘path/to/yii.php’); Yii::app()-&gt;createWebApplication(‘protected/config/main.php’)-&gt;run();[/php] admin.php: [php]require(‘path/to/yii.php’); Yii::app()-&gt;createWebApplication(‘protected/admin/config/main.php’)-&gt;run();[/php] 这样配置比较麻烦一些,我们可以采用覆盖的方法,参考了一个贴子的方法,我又做了一些修改. protected/admin/config/main.php的代码如下: [php] &lt;?php $backend=dirname(dirname(FILE)); $frontend=dirname($backend); Yii::setPathOfAlias(‘backend’, $backend); $frontendArray=require($frontend.’/config/main.php’); $backendArray=array( ‘name’=&gt;’网站后台管理系统’, ‘basePath’ =&gt; $frontend, ‘controllerPath’ =&gt; $backend.’/controllers’, ‘viewPath’ =&gt; $backend.’/views’, ‘runtimePath’ =&gt; $backend.’/runtime’, // autoloading model and component classes ‘import’=&gt;array( ‘application.models.*’, ‘application.components.*’, ‘application.extensions.*’, ‘application.extensions.nestedset.*’, ‘backend.models.*’, ‘backend.components.*’, //这里的先后顺序一定要搞清 ), ‘components’=&gt;array( ‘user’=&gt;array( // enable cookie-based authentication ‘allowAutoLogin’=&gt;true, ), ), // main is the default layout //’layout’=&gt;’main’, // alternate layoutPath ‘layoutPath’=&gt;dirname(dirname(FILE)).DIRECTORY_SEPARATOR.’views’.DIRECTORY_SEPARATOR.’layouts’.DIRECTORY_SEPARATOR, ); if(!function_exists(‘w3_array_union_recursive’)) { /** This function does similar work to $array1+$array2, except that this union is applied recursively. @param array $array1 – more important array @param array $array2 – values of this array get overwritten @return array /function w3_array_union_recursive($array1,$array2){$retval=$array1+$array2;foreach($array1 as $key=&gt;$value){if(is_array($array1[$key]) &amp;&amp; is_array($array2[$key]))$retval[$key]=w3_array_union_recursive($array1[$key],$array2[$key]);}return $retval;}} return w3_array_union_recursive($backendArray,$frontendArray); [/php] 这里我们的model是公用的,controller和view是分开的,我们还可以通过命令行对后台进行model和crud,方法如下: [php] yiic shell path/to/site/admin.phpmodel Articlecrud Article [/php] 这样后台对应的controller和view就生成了!如果只对后台的变量进行配置的话,只需要修改protected/admin下的配置文件就可以了! 二，把后台做为一个模块方法： 第一步：用GII会成一个admin的模块； 第二步：打开（模块名+Module.php)的文件，我这里是oldweeklyadminModule.php文件进行编辑里面有一个OldweeklyadminModule的类继承于CWebModule首先我们调用init的方法： [php] public function init() { parent::init();//这步是调用main.php里的配置文件 //当Module创建时这个方法就会被调用 // 我们可以修改代码来定制Module // import the module-level models and components $this-&gt;setImport(array( ‘oldweeklyadmin.models.*’, ‘oldweeklyadmin.components.*’, )); //这里重写父类里的组件 //如有需要还可以参考API添加相应组件 Yii::app()-&gt;setComponents(array( ‘errorHandler’=&gt;array( ‘class’=&gt;’CErrorHandler’, ‘errorAction’=&gt;’oldweeklyadmin/default/error’, ), ‘user’=&gt;array( ‘class’=&gt;’CWebUser’, ‘stateKeyPrefix’=&gt;’oldweeklyadmin’, ‘loginUrl’=&gt;Yii::app()-&gt;createUrl(‘oldweeklyadmin/default/login’), ), ), false); $this-&gt;generatorPaths[]=’oldweeklyadmin.generators’; $this-&gt;controllerMap=$this-&gt;findGenerators(); } 如果进入module的时候要进行密码验证并且和前台登录分开 就要进行设置对执行的动作进行识别 public function beforeControllerAction($controller, $action) { if(parent::beforeControllerAction($controller, $action)) { $route=$controller-&gt;id.’/’.$action-&gt;id; if(!$this-&gt;allowIp(Yii::app()-&gt;request-&gt;userHostAddress) &amp;&amp; $route!==’default/error’) throw new CHttpException(403,”You are not allowed to access this page.”); $publicPages=array( ‘default/login’, ‘default/error’, ); if(Yii::app()-&gt;user-&gt;isGuest &amp;&amp; !in_array($route,$publicPages)) Yii::app()-&gt;user-&gt;loginRequired(); else return true; } return false; } protected function allowIp($ip) { if(empty($this-&gt;ipFilters)) return true; foreach($this-&gt;ipFilters as $filter) { if($filter===’’ || $filter===$ip || (($pos=strpos($filter,’’))!==false &amp;&amp; !strncmp($ip,$filter,$pos))) return true; } return false; } 设置资源文件路径 public function getAssetsUrl() { if($this-&gt;_assetsUrl===null) $this-&gt;_assetsUrl=Yii::app()-&gt;getAssetManager()-&gt;publish(Yii::getPathOfAlias(‘oldweeklyadmin.assets’)); return $this-&gt;_assetsUrl; } public function setAssetsUrl($value) { $this-&gt;_assetsUrl=$value; } [/php]","link":"/2014/04/12/Yii%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E5%B0%86%E5%90%8E%E5%8F%B0%E6%A8%A1%E6%9D%BF%E6%95%B4%E5%90%88%E5%88%B0%E6%A1%86%E6%9E%B6/"},{"title":"Yii框架学习笔记（二）将html前端模板整合到框架中","text":"上一节成功将Yii框架引入，并生成了要进行的项目文件夹shop。 进入protected文件夹，开始html模板的整合之旅; protected文件夹中需要注意controller，models以及views三个文件夹，这正是MVC模式所在，将html模板与Yii框架整合的关键也在于此。其中controller是控制器，控制器中的文件可以设置class方法，然后class方法访问对应的views中的视图。 比如controller中有SiteController.php这个控制器： [php] &lt;?php class SiteController extends Controller { /** Declares class-based actions. /public function actions(){return array(// captcha action renders the CAPTCHA image displayed on the contact page‘captcha’=&gt;array(‘class’=&gt;’CCaptchaAction’,‘backColor’=&gt;0xFFFFFF,),// page action renders “static” pages stored under ‘protected/views/site/pages’// They can be accessed via: index.php?r=site/page&amp;view=FileName‘page’=&gt;array(‘class’=&gt;’CViewAction’,),);} /** This is the default ‘index’ action that is invoked when an action is not explicitly requested by users. /public function actionIndex(){// renders the view file ‘protected/views/site/index.php’// using the default layout ‘protected/views/layouts/main.php’$this-&gt;render(‘index’);} /** This is the action to handle external exceptions. /public function actionError(){if($error=Yii::app()-&gt;errorHandler-&gt;error){if(Yii::app()-&gt;request-&gt;isAjaxRequest)echo $error[‘message’];else$this-&gt;render(‘error’, $error);}} /** Displays the contact page /public function actionContact(){$model=new ContactForm;if(isset($_POST[‘ContactForm’])){$model-&gt;attributes=$_POST[‘ContactForm’];if($model-&gt;validate()){$name=’=?UTF-8?B?’.base64_encode($model-&gt;name).’?=’;$subject=’=?UTF-8?B?’.base64_encode($model-&gt;subject).’?=’;$headers=”From: $name &lt;{$model-&gt;email}&gt;\\r\\n”.“Reply-To: {$model-&gt;email}\\r\\n”.“MIME-Version: 1.0\\r\\n”.“Content-Type: text/plain; charset=UTF-8”; mail(Yii::app()-&gt;params[‘adminEmail’],$subject,$model-&gt;body,$headers); Yii::app()-&gt;user-&gt;setFlash(‘contact’,’Thank you for contacting us. We will respond to you as soon as possible.’); $this-&gt;refresh(); } } $this-&gt;render(‘contact’,array(‘model’=&gt;$model)); } /** Displays the login page /public function actionLogin(){$model=new LoginForm; // if it is ajax validation request if(isset($_POST[‘ajax’]) &amp;&amp; $_POST[‘ajax’]===’login-form’) { echo CActiveForm::validate($model); Yii::app()-&gt;end(); } // collect user input data if(isset($_POST[‘LoginForm’])) { $model-&gt;attributes=$_POST[‘LoginForm’]; // validate user input and redirect to the previous page if valid if($model-&gt;validate() &amp;&amp; $model-&gt;login()) $this-&gt;redirect(Yii::app()-&gt;user-&gt;returnUrl); } // display the login form $this-&gt;render(‘login’,array(‘model’=&gt;$model)); } /** Logs out the current user and redirect to homepage. /public function actionLogout(){Yii::app()-&gt;user-&gt;logout();$this-&gt;redirect(Yii::app()-&gt;homeUrl);}}[/php] 可以看到这个控制器中有很多class方法，默认走的方法是public function actionIndex()，这个方法中$this-&gt;render('index');意为渲染views/site文件夹中index.php这个视图。 这样就理解了打开首页事出现的内容的来由: 网站从shop/index.php入口文件进入，然后访问默认控制器SiteController.php，该控制器访问默认的方法actionIndex()，然后访问views视图中的index.php，呈现出首页内容。 搞清楚了这个，将html模板整合到框架中就比较简单了，首先创建所需的控制器，然后再控制器中定义方法，让这个方法跳转到views视图中对应的模板文件即可。比如像把一个首页模板整合到框架中，先在controller中新建一个控制器IndexCotroller.php（也可以使用默认的SiteController控制器），并定义方法actionIndex()，让它访问视图VIEWS中的index.php文件，这个index.php文件正是我们的首页模板。 IndexCotroller.php： [php] render(‘index’); } } ?> [/php] 如果是新建的控制器，比如IndexCotroller，就需要在views中创建相应的文件夹，如index（SiteController控制器对应的视图文件夹为site），然后再相应的视图文件夹中建立你的class方法访问的文件即可，如本例的方法actionIndex()对应的$this-&gt;render(‘index’);就是访问views/index/index.php，这样就通过controller控制器和views视图——MV模式将html模板和Yii整合到了一起。 views/index/index.php： &lt;h1&gt;html 模板成功和Yii框架整合&lt;/h1&gt; 整合到一起之后怎么访问整合的这个首页呢？如果直接访问，那会跳转到默认控制器SiteController，而不是我们自己定义的IndexCotroller控制器，这时就需要用路由来访问： http://localhost/shop/shop/index.php?r=index/index 这个路由中，http://localhost/shop/shop/是网站根目录，index.php就是shop文件夹中的入口文件，r=index表示控制器为IndexCotroller，/index表示IndexCotroller控制器中的index方法，访问结果就是我们达到的效果： 当然可以创建别的控制器，比如登陆页面可以创建UserController控制器。对于同一个控制器，如IndexCotroller，可以在IndexCotroller.php中创建多个方法，对应views/index/中不同的页面。访问的时候遵从路由的原则即可： http://网站域名/index.php?r=控制器/方法 大同小异，这样就可以吧各种html前端模板整合到Yii框架中，这里还需要注意样式文件CSS，JS以及图片的存放位置。前面已经说过shop文件夹下的assets文件夹中用来存放静态资源，如CSS,JS,IMG等，所以就把这些资源存到assets文件夹中，这里整合的是前台页面，js一般前后台公用，css和img一般前后台分离，所以可以采取以下目录： 这样将前端html 模板和Yii整合就全部完成了。 【注】：在模板中引入CSS,JS,IMG等由于路径问题及易出错，小技巧是在/protected/config/constants.php中把路径设置成常量，只需调用即可： 设置完静态资源目录后还需要把constants.php这个配置文件引入到入口文件中使其生效。 总结： 1.首页模板与Yii框架整合： 1.创建IndexController控制器 2.创建视图views/index/index.php 3.控制器调用视图$this-&gt;render(index); 4.引入css和图片，将样式目录与图片目录放入常量，统一调用。 2.路由 在框架里边我们通过路由获得控制器和方法 我们有了控制器的方法，就可以进一步与视图或模型进行交互 http://网址/index.php?r=控制器/方法 3.控制器和视图理解好 控制器：IndexController (名字Controller) 方法： actionIndex (action名字) Views/ 下边有许多目录，目录原则是：每个控制器名字在views下都有对应名字的目录存在，里边存放具体模板文件 PS：MVC设计模式原理图：","link":"/2014/04/10/Yii%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B0%86html%E5%89%8D%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%95%B4%E5%90%88%E5%88%B0%E6%A1%86%E6%9E%B6%E4%B8%AD/"},{"title":"Yii框架学习笔记（四）连接数据库","text":"YII采用ORM(object-Relation Mapping)的设计模式进行数据库编程。 配置数据库连接 在protected/config/main.php文件中： [php]’db’=&gt;array( ‘connectionString’=&gt;’mysql:host=localhost;dbname=testdrive’, ’emulatePreare’=&gt;true, ‘username’=&gt;’root’, ‘password’=&gt;”, ‘charset’=&gt;’utf8’, ),[/php] 定义数据库操作类：models [php]&lt;?php class User extends CActiveRecord{ public static function model(CLASS){ return parent::model($className); } //静态方法model()是每一个AR类所必须的。 public function tableName(){ return ‘’; } } ?&gt;[/php] 实例化数据库操作类：controllers [php]&lt;?php class UserController extends Controller{ public function actionIndex(){ $model = new User; $model-&gt;username = ‘admin’; $model-&gt;password = ‘123456’; $model-&gt;email = ‘admin@admin.com’; var_dump($model-&gt;save()); exit; $this-&gt;render(‘index’); } } ?&gt;[/php] 读取记录： [php] //查找满足指定条件的结果中的一行 $user = User::model-&gt;find($condition,$params); //查找具有指定主键值得那一行 $user = User::model-&gt;findByPk($postId,$condition,$params); //查找具有指定属性值的行 $user = User::model-&gt;findByAttributes($attributes,$condition,$params); //通过指定的SQL语句查找结果中的第一行 $user = User::model-&gt;findBySql($sql,$params); // 查找满足指定条件的所有行 $posts=Post::model()-&gt;findAll($condition,$params); // 查找带有指定主键的所有行 $posts=Post::model()-&gt;findAllByPk($postIDs,$condition,$params); // 查找带有指定属性值的所有行 $posts=Post::model()-&gt;findAllByAttributes($attributes,$condition,$params); // 通过指定的SQL语句查找所有行 $posts=Post::model()-&gt;findAllBySql($sql,$params);[/php] 我们可以让$condition成为一个CDbCriteria的实例。 [php]$criteria = new CDbCriteria; $criteria-&gt;select = ‘title’; //只选择’title’列 $criteria-&gt;condition = ‘postID=:postID’; $criteria-&gt;params = array(‘:postID’=&gt;10); $post = Post::model-&gt;find($criteria); //$params不需要了 // 获取满足指定条件的行数 $n=Post::model()-&gt;count($condition,$params); // 通过指定的 SQL 获取结果行数 $n=Post::model()-&gt;countBySql($sql,$params); // 检查是否至少有一行复合指定的条件 $exists=Post::model()-&gt;exists($condition,$params);[/php] 更新记录： [php] $post = Post::model-&gt;findByPk(10); $post-&gt;title = ‘new post title’; $post-&gt;save(); //将更改保存到数据库 //更新符合指定条件的行 Post::model-&gt;updateAll($attributes,$condition,$params); //更新符合指定条件和主键的行 Post::model-&gt;updateByPk($pk,$attributes,$condition,$params); //更新满足指定条件的行的计数列 Post::model-&gt;updateCounters($counters,$condition,$params);[/php] 删除数据： [php]$post=Post::model()-&gt;findByPk(10); // 假设有一个帖子，其 ID 为 10 $post-&gt;delete(); // 从数据表中删除此行 // 删除符合指定条件的行 Post::model()-&gt;deleteAll($condition,$params); // 删除符合指定条件和主键的行 Post::model()-&gt;deleteByPk($pk,$condition,$params);[/php]","link":"/2014/04/13/Yii%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"title":"Yii框架学习笔记（一）引入Yii框架","text":"Yii Framework是一个基于组件、用于开发大型 Web 应用的高性能 PHP 框架。Yii提供了今日Web 2.0应用开发所需要的几乎一切功能。Yii是最有效率的PHP框架之一。Yii是创始人薛强的心血结晶，于2008年1月1日开始开发。 Yii同样是一个MVC框架，适合各种网站开发，非常灵活，并且性能极高，以下的图表展示了与其他流行的PHP框架比较下Yii的高效率。在这个图表中, RPS代表“每秒请求”，描述了此框架每秒执行多少个请求。这个数字越大，此框架的性能越高，我们可以看到，在这个比较中 Yii 胜过其他框架。 【1】首先到官网下载最新版的Yii框架1.1.14。 解压后可以看到Yii框架包含三个文件夹和四个文件，其中四个文件是版本说明，更新日志等，不用细究。我们需要的是framework文件夹，它是Yii框架的核心所在。 【2】引入Yii框架。 1.首先前提是有WAMP的开发环境，这里不多说，然后在网站目录下创建项目文件夹，将framework文件夹复制过去。 2.运行cmd，先转到framework文件夹的目录，然后执行yiic webapp ../shop(任意名称)： PS：这里需要注意的是要在环境变量里加入php的路径。 设置完后就ok了~ 出现Your application has been created successfully under W:\\newwamp\\www\\shop\\shop.说明成功引入Yii框架 这是会发现framework 同级目录多了一个文件夹shop，这个文件夹中便是引入了Yii框架的文件，项目也会后续在生成的这个文件夹中进行：","link":"/2014/04/09/Yii%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5Yii%E6%A1%86%E6%9E%B6/"},{"title":"background滤镜效果及高斯模糊","text":"background滤镜效果场景及实现：父级div嵌套子div，父div有背景图片，子div中有文字，需要实现背景图加黑色半透明遮罩，不影响子div中文字的显示效果。 CSS的filter滤镜效果的Brightness属性可以实现遮罩效果，但是类似于opacity属性，这种效果会影响子div的显示效果：解决方法： 1234&lt;div id=&quot;section1&quot;&gt; &lt;div id=&quot;content&quot;&gt; &lt;/div&gt;&lt;/div&gt; 1234567891011121314151617#section1 { background: url('../images/bg-img.jpg') center center no-repeat; background-size: cover; position: relative;}#content { position: absolute;}#section1::before { content: ''; display: block; position: absolute; background-color: #000; opacity: 0.5; width: 100%; height: 100%;} 效果： 模拟iOS实现高斯模糊效果使用filter的blur属性实现背景高斯模糊: 1234div { -webkit-filter: blur(5px); /* Chrome, Safari, Opera */ filter: blur(5px);}","link":"/2016/10/31/background%E6%BB%A4%E9%95%9C%E6%95%88%E6%9E%9C%E5%8F%8A%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/"},{"title":"bash: tightvncserver: command not found","text":"Mac远程ssh连接到树莓派，使用VNC Viewer连接远程桌面，输入tightvncserver提示： bash: tightvncserver: command not found 由于树莓派精简后缺少组件，需要安装TightVNCServer： 输入sudo apt-get install tightvncserver xrdp完成即可。 在输入tightvncserver指令后，需要输入一个连接的密码，用于验证客户端的输入（我试了一下直接回车，会提示密码过短而失败，所以还是输入一个密码好了。 然后还会提示输入一个只读密码，输不输没有影响。","link":"/2014/11/16/bash-tightvncserver-command-not-found/"},{"title":"burg美化grub引导的多系统启动选择菜单（ubuntu14.04可用）","text":"我是win7+win8.1+ubuntu14.04的三系统，如果用win7引导win8和ubuntu，显然黑底白字的引导大煞风景，换成win8引导win7和ubuntu，win8的引导瞬间显的高达上。然而用win引导的话，进入ubuntu时又得重启进入，显然很耗时。最终选择用ubuntu的grub引导win，可惜grub也不怎么好看，只好美化一下了： 安装条件：非wubi安装的多操作系统; 启动引导用的是grub。 1、添加源：sudo add-apt-repository ppa:n-muench/burg 2、sudo apt-get update 3、安装相关包：sudo apt-get install burg burg-themes burg-emu 4、sudo burg-install “(hd0)” //现在安装BURG的MBR（主引导记录） 5、安装完成后：sudo update-burg //更新启动项。 到此你可以终端运行sudo burg-emu查看效果。 6、按下F2可以选择你喜欢的主题，f可以把一些recovery mode的启动项屏蔽掉，变得简洁。 下面是我的部分启动效果：","link":"/2014/05/02/burg%E7%BE%8E%E5%8C%96grub%E5%BC%95%E5%AF%BC%E7%9A%84%E5%A4%9A%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E9%80%89%E6%8B%A9%E8%8F%9C%E5%8D%95%EF%BC%88ubuntu14-04%E5%8F%AF%E7%94%A8%EF%BC%89/"},{"title":"coub.com 内容抓取","text":"抓取说明1、总共17个分类。2、数据获取url：https://coub.com/api/v2/timeline/hot/movies/half?per_page=25说明：movies 为分类。 per_page 为每页返回的数据量[1,25]。首次获取只需传入 page=1 即为第一页的数据。下次请求附带字段 anchor 为上次请求返回的 next 参数即可。3、每个资源的属性：唯一标志： id、permalink资源描述： titile4、下载coub.com的音频和视频是分开的，下载的时候需要将音视频分别下载，然后使用FFmpeg合并。下载及合并使用开源项目 https://github.com/TeeSeal/coub-dl5、分类数组[\"animals-pets\", \"mashup\", \"anime\", \"movies\", \"gaming\", \"cartoons\", \"art\", \"music\", \"sports\", \"science-technology\", \"celebrity\", \"nature-travel\", \"fashion\", \"dance\", \"cars\", \"nsfw\"] 核心代码：/** * 获取视频列表，每次请求返回10个视频 * @param {number} page 请求的页数 * @param {number} anchor 保证数据的不重复性 */ function getCoubVideoList(c, page = 1, anchor, next) { if (!c) { log.error('category empty', c) return next(new Error('category empty'), null) } var options = { method: 'GET', url: `https://coub.com/api/v2/timeline/hot/${c}/${time}`, //url: `https://coub.com/api/v2/timeline/hot/${c}/half`, qs: { page: page, per_page: per_page } }; if (anchor) options.qs.anchor = anchor request(options, function (error, response, body) { if (error) { next(error, null) return } let data = JSON.parse(body) if (data &amp;amp;&amp;amp; data.coubs &amp;amp;&amp;amp; data.coubs.length) { log.info(`获取视频列表成功 page ${page}`, data.next, data.coubs.length) //videoList.push(data.data) videoList = videoList.concat(data.coubs) return next(null, c, ++data.page, data.next) } else { log.info('获取内容为空 page ${page}') return next(null, c, ++data.page, data.next) } }); } /** 获取指定分类的总页数 /const getTotalPage = (c) =&gt; { var options = { method: 'GET', url: `https://coub.com/api/v2/timeline/hot/${c}/${time}`, //url: `https://coub.com/api/v2/timeline/hot/${c}/half`, qs: { page: 1, per_page: per_page } }; return new Promise((resolve, reject) =&gt; { request(options, function (error, response, body) { if (error) return reject(new Error(error)) let data = JSON.parse(body) if (data &amp;amp;&amp;amp; data.total_pages) { log.info(`获取${c}总页数成功`, data.total_pages) return resolve(data.total_pages) } else { log.info(`获取${c}总页数失败`) return reject(new Error('页数为空')) } }); }) } /** 获取多页的视频 /const getMultiVideo = async c =&gt; { // 总页数 let totalPage = await getTotalPage(c) // 每页依次队列获取 let actions = [async.constant(c, startPage, startAnchor)] for (let i = 1; i &lt;= totalPage; i++) { actions.push(getCoubVideoList) } return new Promise((resolve, reject) =&gt; { async.waterfall(actions, function (err, result) { log.info(`finish crawler ${c} videos`, err, videoList.length) if (err) return reject(new Error(err)) return resolve(videoList) }) })} /** 根据视频的permalink下载视频 @param {string} id video permalink /async function downloadFile(c, video, next) { if (!video || !video.permalink) return next(null, ‘’) let id = video.permalink let filename = ${dlPath}/${id}.mp4 let isExist = isFileExist(id) // 文件已存在 if (isExist) { return next(null, filename) } // 下载操作 const coub = await Coub.fetch(http://coub.com/view/${id}).catch(error =&gt; { console.log('fetch error', error) return next(null, '') }) if (!coub) return next(null, ‘’) coub.attachAudio() if (fastMode) coub.addOption(‘-c’, ‘copy’) coub.addOption(‘-shortest’) let ts = new Date() coub.write(filename) .then(result =&amp;gt; { let te = new Date() let tu = (te - ts) / 1000 log.info(`${downloadCount}：finish download ${c} ${id}.mp4`, filename, `用时${tu}s`) downloadCount++ // 视频信息 let videoInfo = { desc: video.title, category: c, filename: `${id}.mp4` } // 实时写入json saveJsonData(videoInfo) dlFilesJson.push(videoInfo) return next(null, result) //return resolve(result) }) .catch(error =&amp;gt; { log.error(`download error ${id}.mp4`, error) return next(error, '') //return reject(error) }) } /** 视频是否已下载 /const isFileExist = id =&gt; { let oldPath = path.resolve(__dirname, ./src/video/${id}.mp4); let newPath = path.resolve(__dirname, ./downloads/video/${id}.mp4); let weeklyPath = path.resolve(__dirname, ./weekly/video/${id}.mp4); let monthlyPath = path.resolve(__dirname, ./monthly/video/${id}.mp4); let quarterPath = path.resolve(__dirname, ./quarter/video/${id}.mp4); let halfPath = path.resolve(__dirname, ./half/video/${id}.mp4); if (fs.existsSync(oldPath)) { log.info('file exist', oldPath) return true } else if (fs.existsSync(newPath)) { log.info('file exist', newPath) return true } else if(fs.existsSync(weeklyPath)){ log.info('file exist', weeklyPath) return true } else if(fs.existsSync(monthlyPath)){ log.info('file exist', monthlyPath) return true } else if(fs.existsSync(quarterPath)){ log.info('file exist', quarterPath) return true } else if(fs.existsSync(halfPath)){ log.info('file exist', halfPath) return true } else return false} /** 视频下载成功后，实时更新json数据。防止程序中途奔溃后视频信息未保存 @param {*} data /const saveJsonData = data =&gt; { try { // 读取已有json信息 let jsonFile = `${jsonPath}/all.json` let jsonData = [] if (fs.existsSync(jsonFile)) { fileData = fs.readFileSync(jsonFile, { encoding: 'utf8' }) if (fileData) { jsonData = JSON.parse(fileData) } } // 写入 jsonData.push(data) fs.writeFileSync(jsonFile, JSON.stringify(jsonData)); } catch (error) { log.error('写入json文件失败', data) } } /** 使用-C模式，将视频与音频快速合并，速度快，但问题视频较多，视频声音不正常。 使用非-C模式，速度较慢，且由于合并时占用cpu较大，多个视频合并任务同时进行时，电脑基本会卡死 最终采用非-C模式，保证每个视频的音频正常。同时为保证电脑不死机，以队列模式依次处理。唯一缺陷是耗时。 /async function doDownload(c) { let result = await getMultiVideo(c) videoList = [] let data = [] result.forEach(item =&gt; data = data.concat(item)) log.info(要抓取的 ${c} 类型的视频总数为 ${data.length} 个) let actions = data.map(video =&gt; next =&gt; { downloadFile(c, video, next) }) return new Promise((resolve, reject) =&gt; { let st = new Date() async.series(actions, function (err, result) { let et = new Date() let ut = timeUsed((et - st) / 1000) log.info(`finish download ${c} video, 耗时 ${ut}`, err, result.length) if (err) return reject(new Error(err)) // 每个分类的json fs.writeFileSync(`${jsonPath}/${c}.json`, JSON.stringify(dlFilesJson)); dlFilesJson = [] downloadCount = 1 return resolve(result) }) }) } async function main() { let animals_pets = await doDownload('animals-pets') let mashup = await doDownload('mashup') let anime = await doDownload('anime') let movies = await doDownload('movies') let gaming = await doDownload('gaming') let cartoons = await doDownload('cartoons') let art = await doDownload('art') let music = await doDownload('music') let news = await doDownload('news') let sports = await doDownload('sports') let science_technology = await doDownload('science-technology') let celebrity = await doDownload('celebrity') let nature_travel = await doDownload('nature-travel') let fashion = await doDownload('fashion') let dance = await doDownload('dance') let cars = await doDownload('cars') let nsfw = await doDownload('nsfw') return true } /** 用时显示 /const timeUsed = t =&gt; { // [1s, 1m) if (t &lt; 60) return ${Math.round(t)}s // [1m, 1h) else if (t &gt;= 60 &amp;&amp; t &lt; 60 * 60) return ${Math.floor(t/60)}m${Math.floor(t%60)}s // [1h, 1d) else if (t &gt;= 60 * 60 &amp;&amp; t &lt; 60 * 60 * 24) return ${Math.floor(t/(60*60))}h${Math.floor(t%(60*60)/60)}m // [1d, ~) else return ${ Math.floor(t/(24*60*60)) }d ${ Math.floor( t%(24*60*60)/(60*60) ) }h} main() .then(result =&gt; { let endTime = new Date() let usedTime = timeUsed((endTime - startTime) / 1000) log.info(all downloads finish，${result} 个视频，共耗时 ${usedTime}, ) }) .catch(error =&gt; { log.error(‘download error’, error) }) .then(() =&gt; { process.exit(0) }) process.on(‘uncaughtException’, err =&gt; { log.info(err) log.info(JSON.stringify(dlFilesJson))})完整代码： https://github.com/flute/coub-crawler","link":"/2018/09/26/coub-com-%E5%86%85%E5%AE%B9%E6%8A%93%E5%8F%96/"},{"title":"css中px、em和rem的区别","text":"国内的设计师大都喜欢用px，而国外的网站大都喜欢用em和rem，那么三者有什么区别，又各自有什么优劣呢？ PX特点 1. IE无法调整那些使用px作为单位的字体大小； 2. 国外的大部分网站能够调整的原因在于其使用了em或rem作为字体单位； 3. Firefox能够调整px和em，rem，但是96%以上的中国网民使用IE浏览器(或内核)。 px像素（Pixel）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。(引自CSS2.0手册)em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。(引自CSS2.0手册) 任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。 **EM特点 ** 1. em的值并不是固定的； 2. em会继承父级元素的字体大小。 所以我们在写CSS的时候，需要注意两点： 1. body选择器中声明Font-size=62.5%； 2. 将你的原来的px数值除以10，然后换上em作为单位； 3. 重新计算那些被放大的字体的em数值。避免字体大小的重复声明。 也就是避免1.2 * 1.2= 1.44的现象。比如说你在#content中声明了字体大小为1.2em，那么在声明p的字体大小时就只能是1em，而不是1.2em, 因为此em非彼em，它因继承#content的字体高而变为了1em=12px。 **rem特点 ** rem是CSS3新增的一个相对单位（root em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。下面就是一个例子： p {font-size:14px; font-size:.875rem;} 注意： 选择使用什么字体单位主要由你的项目来决定，如果你的用户群都使用最新版的浏览器，那推荐使用rem，如果要考虑兼容性，那就使用px,或者两者同时使用。 在这里为大家提供一个px,em,rem单位转换工具 地址：http://pxtoem.com/","link":"/2014/03/26/css%E4%B8%ADpx%E3%80%81em%E5%92%8Crem%E7%9A%84%E5%8C%BA%E5%88%AB/"},{"title":"curl获取远程文件内容","text":"/** 获取远程文件内容 @param $url 文件http地址 */ function fopen_url($url) { if (function_exists(‘file_get_contents’)) { $file_content = @file_get_contents($url); } else if (ini_get(‘allow_url_fopen’) &amp;&amp; ($file = @fopen($url, ‘rb’))) { $i = 0; while (!feof($file) &amp;&amp; $i++ &lt; 1000) { $file_content .= strtolower(fread($file, 4096)); } fclose($file); } else if (function_exists(‘curl_init’)) { $curl_handle = curl_init(); curl_setopt($curl_handle, CURLOPT_URL, $url); curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT,2); curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER,1); curl_setopt($curl_handle, CURLOPT_FAILONERROR,1); curl_setopt($curl_handle, CURLOPT_USERAGENT, ‘Trackback Spam Check’); $file_content = curl_exec($curl_handle); curl_close($curl_handle); } else { $file_content = ‘’; } return $file_content; }","link":"/2014/03/03/curl%E8%8E%B7%E5%8F%96%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/"},{"title":"document.getElementById(&quot;xx&quot;).style.xxx中的所有属性","text":"盒子标签和属性对照CSS语法（不区分大小写）JavaScript语法（区分大小写）borderborderborder-bottomborderBottomborder-bottom-colorborderBottomColorborder-bottom-styleborderBottomStyleborder-bottom-widthborderBottomWidthborder-colorborderColorborder-leftborderLeftborder-left-colorborderLeftColorborder-left-styleborderLeftStyleborder-left-widthborderLeftWidthborder-rightborderRightborder-right-colorborderRightColorborder-right-styleborderRightStyleborder-right-widthborderRightWidthborder-styleborderStyleborder-topborderTopborder-top-colorborderTopColorborder-top-styleborderTopStyleborder-top-widthborderTopWidthborder-widthborderWidthclearclearfloatfloatStylemarginmarginmargin-bottommarginBottommargin-leftmarginLeftmargin-rightmarginRightmargin-topmarginToppaddingpaddingpadding-bottompaddingBottompadding-leftpaddingLeftpadding-rightpaddingRightpadding-toppaddingTop颜色和背景标签和属性对照CSS 语法（不区分大小写）JavaScript 语法（区分大小写）backgroundbackgroundbackground-attachmentbackgroundAttachmentbackground-colorbackgroundColorbackground-imagebackgroundImagebackground-positionbackgroundPositionbackground-repeatbackgroundRepeatcolorcolor 样式标签和属性对照CSS语法（不区分大小写）JavaScript 语法（区分大小写）displaydisplaylist-style-typelistStyleTypelist-style-imagelistStyleImagelist-style-positionlistStylePositionlist-stylelistStylewhite-spacewhiteSpace 文字样式标签和属性对照CSS 语法（不区分大小写）JavaScript 语法（区分大小写）fontfontfont-familyfontFamilyfont-sizefontSizefont-stylefontStylefont-variantfontVariantfont-weightfontWeight 文本标签和属性对照CSS 语法（不区分大小写）JavaScript 语法（区分大小写）letter-spacingletterSpacingline-breaklineBreakline-heightlineHeighttext-aligntextAligntext-decorationtextDecorationtext-indenttextIndenttext-justifytextJustifytext-transformtextTransformvertical-alignverticalAlign","link":"/2014/10/22/document-getElementById-xx-style-xxx%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7/"},{"title":"face++人脸识别","text":"上星期去参加TC 北京（Tech China Beijing）峰会，当然是免费学生票啦…..2800的门票我就呵呵了，不过学生票除了参加论坛之外权限慢慢，很满足啦展会上体验了些类似iwatch，自平衡脚踏车，虚拟3D等设备，整体来说还不错，其实我就是奔着两样东西去的：午餐+Google glass。哈哈哈，不多说了，跑远了。Google glass一直就想玩玩，毕竟一万多买不起，这次算是实现了。只不过比较坑的是只搭载了出门问问一个app，只能问问路。我最想体验的是人脸识别功能，可惜了 刚好最近在做微信，鉴于此，于是想到了加入人脸识别功能。 算是试玩吧，我就选择了face++，看上去还不错的样子。 首先当然是注册，创建应用，获取API Key和API Secret了，这里不多说。 Face++提供人脸识别接口，检测给定图片(Image)中的所有人脸(Face)的位置和相应的面部属性接口地址如下： http://apicn.faceplusplus.com/v2/detection/detect?api_key=YOUR_API_KEY&amp; api_secret=YOUR_API_SECRET&amp;url=http%3A%2F%2Ffaceplusplus.com%2Fstatic%2Fimg%2Fdemo%2F1.jpg &amp;attribute=glass,pose,gender,age,race,smiling **参数** **是否必须** **含义** api_key 必须 App的Face++ API Key api_secret 必须 APP的Face++ API Secret url 或 img[POST] 必须 待检测图片的URL 或者 通过POST方法上传的二进制数据，原始图片大小需要小于3M mode 可选 检测模式可以是normal(默认) 或者 oneface 。在oneface模式中，检测器仅找出图片中最大的一张脸。 attribute 可选 可以是none或者由逗号分割的属性列表。默认为gender, age, race, smiling。目前支持的属性包括：gender, age, race, smiling, glass, pose tag 可选 可以为图片中检测出的每一张Face指定一个不包含^@,&=*'”等非法字符且不超过255字节的字符串作为tag，tag信息可以通过 /info/get_face 查询 async 可选 如果置为true，该API将会以异步方式被调用；也就是立即返回一个session id，稍后可通过/info/get_session查询结果。默认值为false。 返回结果如下： [php] { “face”: [ { “attribute”: { “age”: { “range”: 5, “value”: 24 }, “gender”: { “confidence”: 99.9999, “value”: “Female” }, “glass”: { “confidence”: 99.4157, “value”: “None” }, “pose”: { “pitch_angle”: { “value”: 1e-06 }, “roll_angle”: { “value”: 0.650337 }, “yaw_angle”: { “value”: -0.42409 } }, “race”: { “confidence”: 98.058, “value”: “Asian” }, “smiling”: { “value”: 3.78394 } }, “face_id”: “9b4e21eba34985325293d5add1c7e255”, “position”: { “center”: { “x”: 50.121951, “y”: 35.97561 }, “eye_left”: { “x”: 43.465122, “y”: 30.670488 }, “eye_right”: { “x”: 56.80878, “y”: 30.821951 }, “height”: 27.560976, “mouth_left”: { “x”: 45.649512, “y”: 45.041707 }, “mouth_right”: { “x”: 55.134878, “y”: 44.858049 }, “nose”: { “x”: 50.183415, “y”: 38.410732 }, “width”: 27.560976 }, “tag”: “” } ], “img_height”: 410, “img_id”: “438d1eea1ba05fb112c8f3430f0b219b”, “img_width”: 410, “session_id”: “d48f8e1acb2d421c8ae2cb146298a7f4”, “url”: “http://faceplusplus.com/static/img/demo/1.jpg&quot; } [/php] 取结果参数中的gender，age，race，smiling等参数 ，如 [php] “attribute”: { “age”: { “range”: 5, “value”: 17 }, “gender”: { “confidence”: 99.9781, “value”: “Female” }, “glass”: { “confidence”: 99.9815, “value”: “None” }, “pose”: { “pitch_angle”: { “value”: 0.000019753399999999996 }, “roll_angle”: { “value”: 1.75177 }, “yaw_angle”: { “value”: 4 } }, “race”: { “confidence”: 99.471, “value”: “Asian” }, “smiling”: { “value”: 87.1365 } [/php] 上述结果表示： 年龄age为17，误差在5岁 性别为female，表示女，置信度为99% 种族为亚洲Asian， 微笑度 87% 和图片比较一下，还是比较一致的 face++的SDK如下： [php] &lt;!–?PHP /** * Face++ PHP SDK * author: Tianye * since: 2013-12-11 **/ class Facepp{ ###################################################### If you choose Amazon(US) server,please use thehttp://apius.faceplusplus.com/v2 ### ### orhttps://apius.faceplusplus.com/v2 ###################################################### var $server = ‘http://apicn.faceplusplus.com/v2’; #var $server = ‘https://apicn.faceplusplus.com/v2’; #var $server = ‘http://apius.faceplusplus.com/v2’; #var $server = ‘https://apius.faceplusplus.com/v2’; ############################################# set your api key and api secret here. ############################################# var $api_key = ‘你的api_key ‘; var $api_secret = ‘你的api_secret ‘; public function __construct($api_key=NULL, $api_secret=NULL, $server=NULL) { if($api_key){ $this—&gt;api_key = $api_key; } if($api_secret){ $this-&gt;api_secret = $api_secret; } if($server){ $this-&gt;server = $server; } } /** @param $method : The Face++ API @param $params : Request Parameters @return : Array {‘http_code’:’Http Status Code’, ‘request_url’:’Http Request URL’,’body’:’ JSON Response’} */public function execute($method,$params){if(empty($params)){$params=array();}$params[‘api_key’] = $this-&gt;api_key;$params[‘api_secret’] = $this-&gt;api_secret; return $this-&gt;request(“{$this-&gt;server}{$method}”,$params); } private function request($request_url , $request_body){ $useragent = ‘Faceplusplus PHP SDK/1.0’; $curl_handle = curl_init(); curl_setopt($curl_handle, CURLOPT_URL, $request_url); curl_setopt($curl_handle, CURLOPT_FILETIME, TRUE); curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, FALSE); curl_setopt($curl_handle, CURLOPT_CLOSEPOLICY, CURLCLOSEPOLICY_LEAST_RECENTLY_USED); curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5); curl_setopt($curl_handle, CURLOPT_HEADER, FALSE); curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, TRUE); curl_setopt($curl_handle, CURLOPT_TIMEOUT, 5184000); curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 120); curl_setopt($curl_handle, CURLOPT_NOSIGNAL, TRUE); curl_setopt($curl_handle, CURLOPT_REFERER, $request_url); curl_setopt($curl_handle, CURLOPT_USERAGENT, $useragent); if (extension_loaded(‘zlib’)){ curl_setopt($curl_handle, CURLOPT_ENCODING, ”); } curl_setopt($curl_handle, CURLOPT_POST, TRUE); if(array_key_exists(‘img’,$request_body)){ $request_body[‘img’] = ‘@’.$request_body[‘img’]; }else{ $request_body=http_build_query($request_body); } curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $request_body); $response_text = curl_exec($curl_handle); $reponse_header = curl_getinfo($curl_handle); curl_close($curl_handle); return array(‘http_code’=&gt;$reponse_header[‘http_code’],’request_url’=&gt;$request_url,’body’=&gt;$response_text); } } [/php] 调用方法： [php] &lt;!–?PHP require_once ‘facepp_sdk.php’; ######################## ### example ### ######################## $facepp = new Facepp(); #detect local image $params=array(‘img’=–&gt;’{image file path}’); $params[‘attribute’] = ‘gender,age,race,smiling,glass,pose’; $response = $facepp-&gt;execute(‘/detection/detect’,$params); print_r($response); #detect image by url $params=array(‘url’=&gt;’http://www.faceplusplus.com.cn/wp-content/themes/faceplusplus/assets/img/demo/1.jpg’); $response = $facepp-&gt;execute(‘/detection/detect’,$params); print_r($response); if($response[‘http_code’]==200){ #json decode $data = json_decode($response[‘body’],1); #get face landmark foreach ($data[‘face’] as $face) { $response = $facepp-&gt;execute(‘/detection/landmark’,array(‘face_id’=&gt;$face[‘face_id’])); print_r($response); } #create person $response = $facepp-&gt;execute(‘/person/create’,array(‘person_name’=&gt;’unique_person_name’)); print_r($response); #delete person $response = $facepp-&gt;execute(‘/person/delete’,array(‘person_name’=&gt;’unique_person_name’)); print_r($response); } [/php] 在微信中再将结果整理成文本消息就可以了。下面是实际使用结果： 感兴趣的可以关注服务号bistu体验。 当然了，这只是最简单的face++和微信结合使用的案例，face++还有许多更为强大的功能等待着大家的实际应用。 悲剧的是本人识别了几张。。奈何长相太老成，识别最低年龄也要28…..俺才大二啊。。说多了都是泪~","link":"/2014/08/20/face-%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"},{"title":"foreach的两种用法","text":"foreach 语句只是一种遍历数组简便方法。foreach 仅能用于数组，当试图将其用于其它数据类型或者一个未初始化的变量时会产生错误。有两种语法，第二种比较次要但却是第一种的有用的扩展。 1 . `foreach (array_expression as $value) statement`第一种格式遍历给定的 `array_expression` 数组。每次循环中，当前单元的值被赋给` $value `并且数组内部的指针向前移一步（因此下一次循环中将会得到下一个单元）。example：foreach(array_name as $value) { statement; } 这里的`array_name`是你要遍历的数组名，每次循环中，`array_name`数组的当前元素的值被赋给`$value`,并且数组内部的下标向下移一步，也就是下次循环回得到下一个元素。2 . `foreach (array_expression as $key => $value) statement`第二种格式做同样的事，只除了当前单元的键名也会在每次循环中被赋给变量` $key`。example：foreach(array_name as $key => $value) { statement; } 这里跟第一种方法的区别就是多了个`$key`,也就是除了把当前元素的值赋给`$value`外，当前元素的键值也会在每次循环中被赋给变量`$key`。键值可以是下标值，也可以是字符串。比如`book[0]=1`中的`0`,以及`book[id]='001'`中的`id`.【自php 5 起，还可能遍历对象。】**注: **当 foreach 开始执行时，数组内部的指针会自动指向第一个单元。这意味着不需要在 foreach 循环之前调用 **reset()**。**注: **除非数组是被引用，foreach 所操作的是指定数组的一个拷贝，而不是该数组本身。因此数组指针不会被 **each()** 结构改变，对返回的数组单元的修改也不会影响原数组。不过原数组的内部指针*的确*在处理数组的过程中向前移动了。假定 foreach 循环运行到结束，原数组的内部指针将指向数组的结尾。自 php 5 起，可以很容易地通过在 $value 之前加上 & 来修改数组的单元。此方法将以引用赋值而不是拷贝一个值。此方法仅在被遍历的数组可以被引用时才可用（例如是个变量）。","link":"/2014/01/21/foreach%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%94%A8%E6%B3%95/"},{"title":"formbuilder-拖拽式表单生成器","text":"formbuilder-拖拽式表单生成项目地址：https://github.com/flute/formbuilder感谢https://github.com/dobtco/formbuilder汉化及修改部分功能 新增类型： - 1.手机 2.性别","link":"/2015/06/29/formbuilder-%E6%8B%96%E6%8B%BD%E5%BC%8F%E8%A1%A8%E5%8D%95%E7%94%9F%E6%88%90%E5%99%A8/"},{"title":"html+css+js好看的梅花","text":"meihua.html: flute | Welcome to blog leaves.css: .leave { position: fixed; width: 25px; height: 20px; -webkit-animation-iteration-count: infinite, infinite; -webkit-animation-direction: normal, normal; -webkit-animation-timing-function: linear, ease-in; -moz-animation-iteration-count: infinite, infinite; -moz-animation-direction: normal, normal; -moz-animation-timing-function: linear, ease-in; -o-animation-iteration-count: infinite, infinite; -o-animation-direction: normal, normal; -o-animation-timing-function: linear, ease-in; animation-iteration-count: infinite, infinite; animation-direction: normal, normal; animation-timing-function: linear, ease-in; } .leave&gt;img { position: fixed; width: 25px; height: 20px; -webkit-animation-iteration-count: infinite; -webkit-animation-direction: alternate; -webkit-animation-timing-function: ease-in-out; -webkit-transform-origin: 50% -100%; -moz-animation-iteration-count: infinite; -moz-animation-direction: alternate; -moz-animation-timing-function: ease-in-out; -moz-transform-origin: 50% -100%; -o-animation-iteration-count: infinite; -o-animation-direction: alternate; -o-animation-timing-function: ease-in-out; -o-transform-origin: 50% -100%; animation-iteration-count: infinite; animation-direction: alternate; animation-timing-function: ease-in-out; transform-origin: 50% -100%; } @-webkit-keyframes fade { 0% { opacity: 1 } 95% { opacity: 1 } 100% { opacity: 0 } } @-webkit-keyframes drop { 0% { -webkit-transform: translate(30px, -50px) } 100% { -webkit-transform: translate(-200px, 650px) } } @-webkit-keyframes clockwiseSpin { 0% { -webkit-transform: rotate(-50deg) } 100% { -webkit-transform: rotate(50deg) } } @-webkit-keyframes counterclockwiseSpinAndFlip { 0% { -webkit-transform: scale(-1, 1) rotate(50deg) } 100% { -webkit-transform: scale(-1, 1) rotate(-50deg) } } @-moz-keyframes fade { 0% { opacity: 1 } 95% { opacity: 1 } 100% { opacity: 0 } } @-moz-keyframes drop { 0% { -moz-transform: translate(30px, -50px) } 100% { -moz-transform: translate(-200px, 650px) } } @-moz-keyframes clockwiseSpin { 0% { -moz-transform: rotate(-50deg) } 100% { -moz-transform: rotate(50deg) } } @-moz-keyframes counterclockwiseSpinAndFlip { 0% { -moz-transform: scale(-1, 1) rotate(50deg) } 100% { -moz-transform: scale(-1, 1) rotate(-50deg) } } @-o-keyframes fade { 0% { opacity: 1 } 95% { opacity: 1 } 100% { opacity: 0 } } @-o-keyframes drop { 0% { -o-transform: translate(30px, -50px) } 100% { -o-transform: translate(-200px, 650px) } } @-o-keyframes clockwiseSpin { 0% { -o-transform: rotate(-50deg) } 100% { -o-transform: rotate(50deg) } } @-o-keyframes counterclockwiseSpinAndFlip { 0% { -o-transform: scale(-1, 1) rotate(50deg) } 100% { -o-transform: scale(-1, 1) rotate(-50deg) } } @keyframes fade { 0% { opacity: 1 } 95% { opacity: 1 } 100% { opacity: 0 } } @keyframes drop { 0% { transform: translate(30px, -50px) } 100% { transform: translate(-200px, 650px) } } @keyframes clockwiseSpin { 0% { transform: rotate(-50deg) } 100% { transform: rotate(50deg) } } @keyframes counterclockwiseSpinAndFlip { 0% { transform: scale(-1, 1) rotate(50deg) } 100% { transform: scale(-1, 1) rotate(-50deg) } } #meihua { background: url(images/xbg.png) no-repeat; width: 278px; height: 155px; right: 0; top: 0; position: fixed; z-index: 1; } leaves.js:~(function(doc) { var FallingLeaves = function(num, id) { this.body = doc.body; this.support = false; this.container = id ? doc.getElementById(‘id’) : this.body; this.num = num ? num : 5; this.init() }; FallingLeaves.prototype = { init: function() { this.supportNot(); if (this.support != false) { for (var i = 0; i &lt; this.num; i++) { this.container.appendChild(this.createLeaf()) } } }, supportNot: function() { var domPrefixes = ‘Webkit Moz O ms a’.split(‘ ‘); for (var i = 0; i &lt; domPrefixes.length; i++) { if (this.container.style[domPrefixes[i] + ‘AnimationName’] !== undefined) { this.support = domPrefixes[i]; break } if (domPrefixes[i] == “a”) { if (this.container.style.animationName !== undefined) { this.support = domPrefixes[i]; break } } } }, imgurl: function() { var i = 0, got = -1, len = doc.getElementsByTagName(‘script’).length; while (i &lt;= len &amp;&amp; got == -1) { var js_url = doc.getElementsByTagName(‘script’)[i].src, got = js_url.indexOf(‘leaves.js’); i++ } return js_url.replace(‘leaves.js’, ‘images/‘) }, randomInteger: function(low, high) { return low + Math.floor(Math.random() * (high - low)) }, randomFloat: function(low, high) { return low + Math.random() * (high - low) }, pixelValue: function(value) { return value + ‘px’ }, durationValue: function(value) { return value + ‘s’ }, createLeaf: function() { var self = this, leafDiv = doc.createElement(‘div’), image = doc.createElement(‘img’), spinAnimationName = (Math.random() &lt; 0.5) ? ‘clockwiseSpin’ : ‘counterclockwiseSpinAndFlip’, fadeAndDropDuration = self.durationValue(self.randomFloat(5, 11)), spinDuration = self.durationValue(self.randomFloat(4, 8)), leafDelay = self.durationValue(self.randomFloat(0, 5)); leafDiv.className = “leave”; image.src = self.imgurl() + self.randomInteger(1, self.num) + ‘.png’; leafDiv.style.top = self.pixelValue(30); leafDiv.style.right = self.pixelValue(self.randomInteger(0, 50)); if (self.container.style[self.support + ‘AnimationName’] !== undefined) { image.style[self.support + ‘AnimationName’] = spinAnimationName; image.style[self.support + ‘AnimationDuration’] = spinDuration; leafDiv.style[self.support + ‘AnimationName’] = ‘fade, drop’; leafDiv.style[self.support + ‘AnimationDelay’] = leafDelay + ‘, ‘ + leafDelay; leafDiv.style[self.support + ‘AnimationDuration’] = fadeAndDropDuration + ‘, ‘ + fadeAndDropDuration } if (this.support == “a”) { image.style.animationName = spinAnimationName; image.style.animationDuration = spinDuration; leafDiv.style.animationName = ‘fade, drop’; leafDiv.style.animationDelay = leafDelay + ‘, ‘ + leafDelay; leafDiv.style.animationDuration = fadeAndDropDuration + ‘, ‘ + fadeAndDropDuration } leafDiv.appendChild(image); return leafDiv } }; new FallingLeaves(); })(document); 查看示例 ![](http://www.ldsun.com/wp-content/uploads/leaves/images/4.png)![](http://www.ldsun.com/wp-content/uploads/leaves/images/1.png)![](http://www.ldsun.com/wp-content/uploads/leaves/images/2.png)![](http://www.ldsun.com/wp-content/uploads/leaves/images/2.png)![](http://www.ldsun.com/wp-content/uploads/leaves/images/1.png)","link":"/2014/01/22/html-css-js%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%A2%85%E8%8A%B1/"},{"title":"html5绘图程序","text":"众所周知，html 的canvas属性可以帮助我们画出漂亮的图片，还能做出炫酷的动画特效，可以说是HTML的一大亮点，做出来的动画甚至超过flash。 这里罗列出几个比较有名的html5绘图网站。 1. Canvascape 3D 用HTML5 实现简单的第一人称射击游戏，虽然画面显得简单粗糙，但是一样能让人佩服。 2. CanvasGraph 一个用HTML5 Canvas 绘图的JavaScript 类库，不用再去辛苦画柱状图了。 3.Image reflections 用HTML5 Canvas 实现图像倒影，制作图片倒影从此轻松了。 4.Canvas Painter 一个超简单的Canvas画图程序，调色、笔触大小，该有的都有了，画完了还可以回放你操作的录影。 5. Sketchpad 6.painter 当然优秀的画图和动画制作软件还有谷歌的Google Web Designer(图形化的HTML5编程工具)","link":"/2014/02/04/html5%E7%BB%98%E5%9B%BE%E7%A8%8B%E5%BA%8F/"},{"title":"instagram 内容抓取","text":"抓取说明1、需要登录信息，即抓取时需要附带cookie，同时需要user-agent。2、数据获取接口及下载均有频率限制，无间隔的请求（几百个资源）会被限制，在被限制后睡眠一定时间继续。3、内容抓取分为两个入口一个是抓取某个用户发布的所有资源一个是抓取某个tag下的所有资源两种入口附带的cookie不同，请求的URL不同。4、抓取步骤：电脑端登陆ins，保存 cookie、query_hash、user-agent信息。后续所有请求附带cookie及user-agent。模拟请求个人主页/tag主页，通过解析HTML页面，得到userId/tag name。同时拿到第一页的数据及下页cursor。通过API接口，根据cursor持续获取多页数据。所有数据获取完毕后开始下载。返回的数据中，图片资源可以直接下载。视频资源需要再次请求视频地址获取接口获得视频地址，然后再下载。5、请求数据接口：user:https://www.instagram.com/graphql/query/?query_hash=a5164aed103f24b03e7b7747a2d94e3c&amp;variables=%7B%22id%22%3A%22%s%22%2C%22first%22%3A${purePage}%2C%22after%22%3A%22%s%22%7D tag:https://www.instagram.com/graphql/query/?query_hash=1780c1b186e2c37de9f7da95ce41bb67&amp;variables=%7B%22tag_name%22%3A%22%s%22%2C%22first%22%3A${purePage}%2C%22after%22%3A%22%s%22%7D 获取视频的地址:https://www.instagram.com/p/%s/?__a=1 核心代码/** * 获取指定用户的主页 */ const getHtml = item =&gt; { let userName = item.name, type = item.type let url if (item.type == 'user') { url = `${baseUrl}${userName}/` headers.cookie = userCookie } else { url = `${baseUrl}explore/tags/${userName}/` headers.cookie = tagCookie } let options = { method: 'GET', url: url, headers: headers } return new Promise((resolve, reject) =&amp;gt; { request(options, function (error, response, body) { if (error) return reject(error); const $ = cheerio.load(body) let html = $.html() // 获取uid/tag name userId = item.type == 'user' ? html.match(/&quot;profilePage_([0-9]+)&quot;/)[1] : html.match(/&quot;name&quot;:&quot;([a-zA-Z_]+)&quot;,/)[1] log.info(`${userName} id/name 获取成功 ${userId}`) // 获取首页数据 data = html.match(/&amp;lt;script type=&quot;text\\/javascript&quot;&amp;gt;window._sharedData = (.*?);&amp;lt;\\/script&amp;gt;/)[1] data = JSON.parse(data) let edges, count, pageInfo, cursor, flag, totalPage let firstPageDate if (item.type == 'user') { firstPageDate = data.entry_data.ProfilePage[0].graphql.user.edge_owner_to_timeline_media } else { firstPageDate = data.entry_data.TagPage[0].graphql.hashtag.edge_hashtag_to_media } edges = firstPageDate.edges count = firstPageDate.count pageInfo = firstPageDate.page_info cursor = pageInfo.end_cursor flag = pageInfo.has_next_page totalPage = Math.ceil(count / purePage) // 存储首页信息 edges.forEach(item =&amp;gt; { item.mode = type storeMedia(item) }) // 返回分页信息 return resolve({ totalPage: totalPage, userId: userId, cursor: cursor }) }); }) } /** 获取该用户的所有内容 /const getAllUrls = (item, totalPage, uid, cursor) =&gt; { let userName = item.name let actions = [async.constant(item, uid, cursor)] let limit = totalPage &gt; pageLimit ? pageLimit : totalPage for (let i = 0; i &lt; limit; i++) { actions.push(fetchData) } log.info(${userName} 数据共 ${totalPage} 页) return new Promise((resolve, reject) =&gt; { async.waterfall(actions, (error, result) =&amp;gt; { log.info(`${userName} 的所有帖子数据获取成功，共${media.length}个帖子，视频${videoCount}个，图片${imgCount}个`, ) fetchPageCount = 0 //console.log(media) return resolve(media) }) }) } /** 请求获取数据 /const fetchData = (item, uid, offset, next) =&gt; { let userName = item.name, type = item.type let url if (item.type == ‘user’) { url = util.format(fetchUserUrl, uid, offset) headers.cookie = userCookie } else { url = util.format(fetchTagUrl, uid, offset) headers.cookie = tagCookie } let options = { method: 'GET', url: url, headers: headers }; request(options, function (error, response, body) { if (error) { log.error('fetch data error', error) log.info('休息1min~') return setTimeout(function () { return next(null, item, uid, offset) }, 1 * 60 * 1000) } let data try { data = JSON.parse(body) } catch (error) { log.error('json序列化失败', error) return next(null, item, uid, offset) } if (data.status == 'fail') { log.error('返回内容失败', data) log.info('休息1min~') //return next(data.message) return setTimeout(function () { return next(null, item, uid, offset) }, 1 * 60 * 1000) } let listData try { if (item.type == 'user') { listData = data.data.user.edge_owner_to_timeline_media } else { listData = data.data.hashtag.edge_hashtag_to_media } } catch (error) { log.error('数据获取失败', error) next(error) } let edges = listData.edges edges.forEach(item =&amp;gt; { item.mode = type storeMedia(item) }) let { has_next_page, end_cursor } = listData.page_info log.info(`page:${++fetchPageCount} ${userName} 数据获取成功，帖子 ${edges.length} 个, has_next_page: ${has_next_page} ，end_cursor: ${end_cursor}`) if (!has_next_page) { return next('所有数据获取完毕，无下页') } setTimeout(function () { return next(null, item, uid, end_cursor) }, 2000) }); } /** 根据视频的shortcode获取视频的下载地址 /const fetchVideoUrl = (mode, shortcode) =&gt; { let url = util.format(getVideoUrl, shortcode) if (mode == ‘user’) { headers.cookie = userCookie } else { headers.cookie = tagCookie } let options = { method: 'GET', url: url, headers: headers } return new Promise((resolve, reject) =&gt; { request(options, function (error, response, body) { let videoUrl = '' if (error) { log.error(`获取 ${shortcode} 视频地址失败`, error) return resolve(videoUrl) } try { let data = JSON.parse(body) videoUrl = data.graphql.shortcode_media.video_url } catch (error) { log.error(`获取 ${shortcode} videoUrl 为空`) } return resolve(videoUrl) }) }) } /** 根据不同的类型存储数据 /const storeMedia = async item =&gt; { let result = { id: item.node.id, desc: item.node.edge_media_to_caption.edges[0] ? item.node.edge_media_to_caption.edges[0].node.text : '' } if (item.node.is_video) { // video // 如果有video_url直接获取 // 如果没有video_url，通过接口获取 let videoUrl = item.node.video_url if (!videoUrl) videoUrl = await fetchVideoUrl(item.mode, item.node.shortcode) if (videoUrl) { result.type = 'video' result.url = videoUrl videoCount++ } } else { // img let imgUrl = item.node.display_url if (imgUrl) { result.type = 'img' result.url = imgUrl imgCount++ } } media.push(result)} /** 下载视频/图片 /const download = (category, media, next) =&gt; { let isExist = isFileExist(media.id) if (isExist) return next(null) let filePath if (media.type == ‘video’) { filePath = `${videoDlPath}/${media.id}.mp4` } else if (media.type == ‘img’) { filePath = `${imgDlPath}/${media.id}.jpg` } else return next(null) let st = new Date() request(media.url) .on('response', function (res) { // create file write stream let fws = fs.createWriteStream(filePath); // setup piping res.pipe(fws); // finish res.on('end', function (e) { let et = new Date() let ut = timeUsed((et - st) / 1000) log.info(`${videoDl + imgDl} finish download ${category} ${filePath}，用时${ut}`) saveJsonData(media.type, { id: media.id, category: category, desc: media.desc }) if (media.type == 'video') videoDl++ else imgDl++ return next(null) }); // error handler res.on('error', err =&amp;gt; { log.error('download error', err) return next(null) }) }) .on('error', function (err) { log.error('request source failed', media.url, err) // 大约3分钟可恢复 log.info('超频啦！休息1分钟~') setTimeout(function () { return next(null) }, 1 * 60 * 1000) }) } /** 视频是否已下载 /const isFileExist = id =&gt; { let videoPath = ${videoDlPath}/${id}.mp4 let imgPath = ${imgDlPath}/${id}.jpg if (fs.existsSync(videoPath)) { log.info('video file exist', videoPath) return true } else if (fs.existsSync(imgPath)) { log.info('img file exist', imgPath) return true } else return false} /** 视频下载成功后，实时更新json数据。防止程序中途奔溃后视频信息未保存 /const saveJsonData = (type, data) =&gt; { try { // 读取已有json信息 let jsonFile = type == 'video' ? videoJsonPath : imgJsonPath jsonFile += `/data.json` let jsonData = [] if (fs.existsSync(jsonFile)) { fileData = fs.readFileSync(jsonFile, { encoding: 'utf8' }) if (fileData) { jsonData = JSON.parse(fileData) } } // 写入 jsonData.push(data) fs.writeFileSync(jsonFile, JSON.stringify(jsonData)); } catch (error) { log.error('写入json文件失败', data) } } const clearData = () =&gt; { media = [] videoCount = 0 imgCount = 0 videoDl = 0 imgDl = 0} /** 下载某用户/标签下获取的所有资源 /const downloadAll = (userName, data) =&gt; { let dlActions = data.map(item =&gt; next =&gt; { download(userName, item, next) }) return new Promise((resolve, reject) =&gt; { async.series(dlActions, (error, result) =&amp;gt; { return resolve(result) }) })} /** 用时显示 /const timeUsed = t =&gt; { // [1s, 1m) if (t &lt; 60) return ${Math.ceil(t)}s // [1m, 1h) else if (t &gt;= 60 &amp;&amp; t &lt; 60 * 60) return ${Math.floor(t/60)}m${Math.floor(t%60)}s // [1h, 1d) else if (t &gt;= 60 * 60 &amp;&amp; t &lt; 60 * 60 * 24) return ${Math.floor(t/(60*60))}h${Math.floor(t%(60*60)/60)}m // [1d, ~) else return ${ Math.floor(t/(24*60*60)) }d ${ Math.floor( t%(24*60*60)/(60*60) ) }h} /** 某个用户/标签的抓取任务 /const task = async (item, next) =&gt; { let userName = item.name let { totalPage, userId, cursor } = await getHtml(item).catch(error =&gt; { log.error('fetch error', error) return next(null) }) let data = await getAllUrls(item, totalPage, userId, cursor) clearData() let st = new Date() let download = await downloadAll(userName, data) let et = new Date() let ut = timeUsed((et - st) / 1000) log.info(${userName} 所有下载完成， video ${videoDl} 个,img ${imgDl} 个,共用时 ${ut}) clearData() return next(null) } const main = () =&gt; { let actions = target.map(item =&gt; next =&gt; { task(item, next) }) async.series(actions, (error, result) =&gt; { log.info(所有 ${result.length} 个任务完成, error) process.exit(0) })} main()完整代码： https://github.com/flute/instagram-crawler","link":"/2018/09/27/instagram-%E5%86%85%E5%AE%B9%E6%8A%93%E5%8F%96/"},{"title":"https通配符证书配置","text":"通配符证书 即一个证书能给ldsun.com、www.ldsun.com、 btc.www.ldsun.com等所有的*.ldsun.com域名使用的证书，四不四很爽。 免费证书 使用 let's encrypted 免费开源https证书，目前已经支持通配符证书申请。 使用脚本 使用国人开发的脚本acme.sh简化配置流程。 DNS解析商 鉴于国内DNS服务商的尿性，选择digitalocean作为DNS解析商，抛弃dnspod，dnspod在设置证书过程中出现各种问题。 digitalocean需要PayPal支付验证。验证后添加域名，添加解析记录。 配置步骤 1、安装acme脚本 12curl https://get.acme.sh | shsource ~/.bashrc 2、申请设置 Digitalocean API 1export DO_API_KEY=&quot;753112c4ca779ac39a19f635213b573b49ce92ae126553ebd61ac3a300934834cc&quot; 3、申请通配符证书 1acme.sh --issue -d ldsun.com -d '*.ldsun.com' --dns 4、安装证书 1234acme.sh --install-cert -d ldsun.com \\--key-file /etc/nginx/ssl/ldsun.com.key \\--fullchain-file /etc/nginx/ssl/ldsun.com.crt \\--reloadcmd &quot;service nginx force-reload&quot; 5、配置Nginx 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758server { listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; server_name ldsun.com www.ldsun.com; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:2368; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } location ^~ /wp-content/ { if (!-e $request_filename) { rewrite ^/wp-content/uploads/(.*)$ https://obmv8nk23.qnssl.com/$1 last; break; } } # 我们采用强大的迪菲-赫尔曼密钥交换，生成命令 openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048 ssl_dhparam /etc/nginx/ssl/dhparam.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS'; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:50m; ssl_session_timeout 1d; # 此处是证书文件 ssl_certificate /etc/nginx/ssl/ldsun.com.crt; ssl_certificate_key /etc/nginx/ssl/ldsun.com.key; # 开启 HSTS Preload 支持 add_header Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;; add_header X-Frame-Options SAMEORIGIN; add_header X-Content-Type-Options nosniff; add_header X-XSS-Protection &quot;1; mode=block&quot;; access_log /var/log/nginx/ldsun.com.access.log; error_log /var/log/nginx/ldsun.com.error.log;}server { if ($host = www.ldsun.com) { return 301 https://$host$request_uri; } # managed by Certbot if ($host = ldsun.com) { return 301 https://$host$request_uri; } listen 80; server_name ldsun.com www.ldsun.com; return 404;}... 6、续期 12acme.sh --renew -d ldsun.com -d '*.ldsun.com' --force# 默认是自动更新，添加 --force 强制手动更新 参考： https://sb.sb/blog/linux-acme-sh-lets-encrypt-ssl/https://sb.sb/blog/linux-lets-encrypt-wildcard-ssl/","link":"/2018/08/22/https%E9%80%9A%E9%85%8D%E7%AC%A6%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE/"},{"title":"jQuery Mobile Popups","text":"jQuery Mobile Popup弹窗集合。 带有样式风格的弹出框 显示信息 可自定义样式和最大宽度定义的弹出框 自定义弹窗 弹出菜单 显示信息 弹出菜单 文件 选项 退出 弹出表单 显示信息 登录系统 帐号: 密码: 登录 弹出窗口 显示信息 文件删除 确定要删除这个文件吗？ 该操作不可撤销。 删除 取消 弹出图片 显示信息 Close 调用方法： 这个部件在jQueryMobile中会自动初始化，但是你也可以通过popup()方法来调用。$(‘#uedcool’).popup(); 调用打开弹出框方法： 除了通过一个带有data-rel=’popup’的链接来触发部件显示，还可以调用open方法来打开弹出框部件，如：$(‘#uedcool’).popup(‘open’); 关闭部件的方法： 弹出框可以通过按Esc键或者点击弹出框外面的区域来关闭，除此之外也可以通过调用close方法来关闭，如：$(‘#uedcool’).popup(‘close’); 还可以通过在弹出框中添加关闭按钮的方式来调用关闭方法，只需要在关闭按钮或者链接中添加data-rel=’back’属性就可以通过点击来隐式调用关闭方法，例如： Close 这里显示内容 注：可以通过定义ui-btn-right或者ui-btn-left来控制按钮的显示位置。 部件容器内边距： 建议在弹出框的的div上添加ui-content样式，这样可以使这个容器内内部定义一个15px的内边距，使容器的布局更加自然，如下: 在容器上添加ui-content 样式 定位： 在默认情况下，弹出框的中心点是和触发元素的中心点重合的（除在对边界位置进行修正的情况下），这样可以很方便的来实现菜单或者提示功能。 除此之外，可以通过在触发的链接上定义data-position-to来实现类似对话框或者lightbox风格在页面上居中的显示效果，例如： 弹出框的中心点与页面的中心点对应： I am positioned to the window. 弹出框的中心点与触发元素的中心点对应： I am positioned to the window. 除了以上window和origin这两个参数外，还可以在data-position-to属性中设置一个元素的id来使弹出框在该元素的位置显示。","link":"/2014/09/22/jQuery-Mobile-Popups/"},{"title":"jQuery Mobile一个文件中创建多个页面","text":"在 jQuery Mobile，您可以在单一 HTML 文件中创建多个页面。只需通过唯一的 id 来分隔每张页面，并使用 href 属性来连接彼此即可： welcome to my blog Welcome! This is page one turn to page two footer welcome to my blog Goodbye! This is page two turn to page one footer","link":"/2014/02/17/jQuery-Mobile%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AA%E9%A1%B5%E9%9D%A2/"},{"title":"jQuery 监听隐藏表单","text":"设置了一个隐藏表单，其值由Ajax异步修改。前端需要实时监听该值，并由此进行相关操作。 &lt;input type=&quot;hidden&quot; value=&quot;&quot; id=&quot;datas&quot; name=&quot;datas&quot;&gt; 正常的表单可以使用 .change() 事件监听其 value 的改变，而隐藏表单其 value 改变时不会触发 change() 事件！ 解决方法： 当为隐藏表单赋值后，使用 trigger() 手动触发 change() 事件: 1234567function setValue(ajaxData){ $('#datas').val(ajaxData).trigger('change');}$('#datas').change(){ console.log('changed');}","link":"/2016/09/03/jQuery-%E7%9B%91%E5%90%AC%E9%9A%90%E8%97%8F%E8%A1%A8%E5%8D%95/"},{"title":"jquery mobile Label and input not on the same line","text":"我正在用jquery mobile做一个webapp，期间遇到了一个问题，就是lable和input不显示在同一行。因为通常lable和input默认各占一行，所以需要寻找解决的办法。 首先我使用了fieldcontain属性： 客姓 这个属性成功的让lable和input显示在同一行，然而高兴的太早了，问题接着来了，因为在pc浏览器正常大小下虽然没问题，但考虑到移动设备浏览窗口并没有那么大，测试时发现当屏幕尺寸小于480px时lable和input又会分居两行。然而移动设备的屏幕尺寸并不止于480px,虽然移动设备向着大屏进军，但仍然有128px、320px的。所以得找到新的解决办法。 使用fieldcontain后屏幕大于480px时正常显示 使用fieldcontain后屏幕小于480px时lable和input仍然在两行 我发现也有好多人遇到同样的问题，但都没有解决，看到一位朋友给出的办法是自定义css样式 @media (max-width: 480px) 但我测试过后并没有达到预期目的，不知道这个方法正确否，可能我的发法不对，大家可以自行测试~ 国内的论坛没找到更多方法，同学告诉我看看国外社区，于是转战谷歌搜索，发现了很多新的方法，虽然大多不能用，但国外的回答度远高于国内，所以以后转战于国外技术社区。 找到的解决办法是用table。 label in a td and input in a td，这就可以让jquery mobile的lable和input在屏幕小于480px时能显示在同一行的办法，lable放一行，input放一行。 客姓","link":"/2014/03/19/jquery-mobile-Label-and-input-not-on-the-same-line/"},{"title":"jquery mobile post数据问题","text":"做了个jQuery mobile的表单页面，结果发现提交后没任何反映。。仔细的看了几遍代码都无果，怀疑与JQM有关，试着去掉JQM的css和js，果然好使了，但想不出为何。 码一天代码了，先去洗衣服歇歇再说~ 洗完衣服，瞬间想起上回的jQuery mobile缓存问题——JQM默认使用Ajax提交数据，而我用的是post，怎么会好使呢，于是机智的禁掉Ajax提交，完美解决： 给form加上data-ajax=&quot;false&quot;即可。 另附两个今天新get的技能： 1.让表哥（表格）迅速显示出分割线： table{width:100%;border-collapse: collapse;border: none;color:white;} table td{border: solid black 1px;} 2.从数组中随机选择一个或多个字符串： $color=array(‘aquamarine’,’chartreuse’,’darkorange’,’darkviolet’,’deeppink’); array_rand($color,1)；//1表示选择1个","link":"/2014/09/04/jquery-mobile-post%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/"},{"title":"jquery mobile缓存问题","text":"如题，jQuery mobile做自适应页面时遇到小问题：A页面跳到B页面，B页面返回A页面后存在B页面的缓存。不论a标签使用的是&lt;a data-rel=&quot;back&quot;&gt;还是&lt;a href=&quot;&quot;&gt;都有缓存存在！ 原来做过很多jqw页面了没问题，也不知道为啥这次就缓存出问题了，先不管了，解决再说。 网上游了2小时找到了解决方法：原来其实不管页面内链接还是页面间切换，jQuery Mobile都是发起Ajax请求加载新的页面。如果想链接到一个新界面，可以通过在加入链接属性rel=&quot;external&quot;或data-ajax=&quot;false&quot;，告诉jQuery Mobile需要重新加载一个新的页面，而且URL也是全新的。","link":"/2014/08/28/jquery-mobile%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/"},{"title":"js按比例缩放图片并显示图片的一部分","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647$(document).ready(function(){ //取得图片外层div的宽度 var boxwidth = $(‘.media-object’).parent().width(); var boxheight = boxwidth*9/16; var imgarray = $(‘.media-object’); for(var i=0;i&lt;imgarray.length;i++){ //获取图片原始长、宽 var width = imgarray[i].width ; var height = imgarray[i].height; //判断图片长宽比例 if( width*9/16 &gt; boxheight ){ //使用宽度按16：9的比例缩放后高度不够，转而使用高度 //此时图片高度应该设为div高 boxheight var imgheight = boxheight; $(imgarray[i]).css(‘height’,imgheight); //此高度下等比例的图片宽度为 imgwidth var imgwidth = imgheight*width/height; $(imgarray[i]).css(‘width’,imgwidth); //计算此时图片宽度与div宽度的差值 var difference = imgwidth-boxwidth; //计算图片应该裁剪的位置 var stratX = difference/2; var startY = 0; var endX = imgwidth – difference/2; var endY = imgheight; //使用css clip:rect(top, right, bottom, left)属性裁剪 $(imgarray[i]).css(‘clip’,’rect(‘+stratX+’px ‘+endX+’px ‘+endY+’px ‘+startY+’px)’); }else{ //使用宽度按照16：9缩放，多余的高度去除 //此时图片宽度应该设为div宽 boxwidth var imgwidth = boxwidth; $(imgarray[i]).css(‘width’,imgwidth); //此宽度下等比例的图片高度为 imgheight var imgheight = imgwidth*height/width; $(imgarray[i]).css(‘height’,imgheight); //计算此时图片高度与div高度的差值 var difference = imgheight-boxheight; //计算图片应该裁剪的位置 var stratX = 0; var startY = difference/2; var endX = imgwidth; var endY = imgheight – difference/2; //使用css clip:rect(top, right, bottom, left)属性裁剪 $(imgarray[i]).css(‘clip’,’rect(‘+stratX+’px ‘+endX+’px ‘+endY+’px ‘+startY+’px)’); } } });","link":"/2015/11/25/js%E6%8C%89%E6%AF%94%E4%BE%8B%E7%BC%A9%E6%94%BE%E5%9B%BE%E7%89%87%E5%B9%B6%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86/"},{"title":"php+mysql简单留言板","text":"add.php 用户： 标签： 内容： conn.php list.php 标题： 用户： 内容：","link":"/2014/01/16/php-mysql%E7%AE%80%E5%8D%95%E7%95%99%E8%A8%80%E6%9D%BF/"},{"title":"php+txt简单留言板","text":"看了一天的php，自己捉摸加参考写了一个简单的留言板，没用到数据库，用了个txt文本文件存留言信息，比较简陋，但基本的留言功能还是实现了。 总共三个文件：一个现实留言页index.php，一个添加留言页add.php，一个文本信息pinglun.txt。 index.php 留言板$value){for($i=1;$i 姓名:邮箱:评论: add.php: //留言成功后自动返回首页","link":"/2014/01/24/php-txt%E7%AE%80%E5%8D%95%E7%95%99%E8%A8%80%E6%9D%BF/"},{"title":"phpmyadmin空密码登录被禁止(参见 允许空密码)的解决办法","text":"在Windows或者Linux下mysql安装后默认的密码为空，又当我们又安装了mysql的管理工具phpmyadmin后登陆时出现“空密码登陆呗禁止（参见允许密码为空）”。不能登录成功 解决办法如下： 1..要是你想用空密码，则将phpmyadmin下的 config.inc.php（根目录）或者config.default.php（根目录）再则：libraries\\config.default.php（友情提示，由于版本不一样可能涉及的文件不同，基本为这三个文件）中的$cfg[‘Servers’][$i][‘AllowNoPassword’] = false;改为$cfg[‘Servers’][$i][‘AllowNoPassword’] = true; 2.要是你想设置密码不为空则将$cfg[‘blowfish_secret’] = ‘123456’; // use here a value of your choice 你要设置的密码","link":"/2013/11/27/phpmyadmin%E7%A9%BA%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E8%A2%AB%E7%A6%81%E6%AD%A2-%E5%8F%82%E8%A7%81-%E5%85%81%E8%AE%B8%E7%A9%BA%E5%AF%86%E7%A0%81-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"},{"title":"phpmyadmin出现“#2002无法登录MySQL服务器”","text":"出现这个错误，表示没有连接到数据库。修改config.inc.php或config.default.php文件， 将`$cfg['Servers'][$i]['host'] = 'localhost';` 改为$cfg['Servers'][$i]['host'] = '127.0.0.1'; 或者 修改 php.ini : mysql.default_socket = /tmp/mysql.sock","link":"/2013/11/27/phpmyadmin%E5%87%BA%E7%8E%B0%E2%80%9C-2002%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E2%80%9D/"},{"title":"phpmyadmin无法登陆无响应","text":"之前由于修改php.ini配置session路径问题，导致PHPmyadmin无法登陆，点击登录后自动刷新跳到index页面。检查头信息发现报错： Cannot start session without errors, please check errors given in your PHP and/or webserver log file and configure your PHP installation properly。 可以看出来是session问题，解决办法： 1.打开php.ini修改session.save-path，例如/tmp 2.设置/tmp目录权限&gt;755 3.重启Apache：sudo /etc/init.d/apache2 restart","link":"/2015/04/07/phpmyadmin%E6%97%A0%E6%B3%95%E7%99%BB%E9%99%86%E6%97%A0%E5%93%8D%E5%BA%94/"},{"title":"php获取当前页面URL地址","text":"","link":"/2014/02/22/php%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2URL%E5%9C%B0%E5%9D%80/"},{"title":"php获取用户浏览器、操作系统、本地天气","text":"[php]","link":"/2014/05/24/php%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E5%99%A8%E3%80%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%81%E6%9C%AC%E5%9C%B0%E5%A4%A9%E6%B0%94/"},{"title":"show views of your blog","text":"Often we want to know how many people read our articles，and it’s pleasure for us to see our articles were read by many times. In fact,it’s not difficult as you think. Now, let’s start: First, we should download a plugin ‘WP-PostViews‘,this plugin enables you to display how many times a post/page had been viewed.Then you should do as follows: 1.Open wp-content/plugins Folder; 2.Put: Folder: wp-postviews; 3.Activate WP-PostViews Plugin; 4.Go to WP-Admin -&gt; Settings -&gt; PostViews to configure the plugin. Next you should add code in your blog: 1.Open wp-content/themes//index.php; 2.You may place it in archive.php, single.php, post.php or page.php also; 3.Find: ; 4.Add Anywhere Below It (The Place You Want The Views To Show): &lt;?php if(function_exists(‘the_views’)) { the_views(); } ?&gt;. Tt’s finished now,it’s sample,right?","link":"/2014/02/14/show-views-of-your-blog/"},{"title":"solidity函数类型及truffle使用","text":"1、solidity类的多继承、重写solidity类具有多继承的特性： 12345678910111213pragma solidity ^0.4.19contract Animal1 { uint age;}contract Animal2 { string weight;}contract Dog is Animal1, Animal2 { /** Dog 会继承 Animal1 及 Animal2 两个类 */} 重写与其他语言相通，即子类的同名函数会覆盖从父类继承的方法： 1234567891011121314pragma solidity ^ 0.4 .19;contract Animal { function testFunc() public pure returns(string) { return &quot;Animal testFunc&quot;; }}/** 子类重写了从父类继承过来的方法，会以子类的方法为基准 */contract Dog is Animal { function testFunc() public pure returns(string) { return &quot;Dog testFunc&quot;; }} 2、solidity函数的访问权限solidity函数分为四种访问权限： private: 私有函数。内部正常访问，外部无法访问，子类无法继承。 internal: 内部函数。内部正常访问，外部无法访问，子类可继承。 public: 公共函数。内部正常访问，外部正常访问，子类可继承。 external: 外部函数。内部不能访问，外部正常访问，子类可继承。 12345678910111213141516171819202122232425262728293031323334353637pragma solidity ^0.4.19;contract Animal { /** public 公有：外部、内部、子类都可使用 */ function testPublic() public pure returns (string) { return &quot;public&quot;; } /** private 私有：合约内部可以正常访问 */ function testPrivate() private pure returns (string) { return &quot;private&quot;; } /** internal 内部：合约内部可以正常访问 */ function testInternal() internal pure returns (string) { return &quot;internal&quot;; } /** external 外部：只能供外部访问 */ function testExternal() external pure returns (string) { return &quot;external&quot;; } /** 未做任何修改时，使用pure */ function f() public pure { testPublic(); testInternal(); testPrivate(); //testExternal(); // 报错，只能供外部访问 }}contract Dog is Animal { /** 继承 public、internal、external 类型的函数 */}// Dog.testPublic() 继承，可用// Dog.testInternal() 继承，不可用（internal函数外部无法访问）// Dog.testExternal() 继承，可用// Dog.f() 继承，可用 3、solidity函数中pure、view、constant的区别solidity函数的完整声明格式为： function 函数名(参数) public|private|internal|external pure|view|constant 无返回值|returns (返回值类型) 首先来个测试案例，根据编辑器提示补齐函数类型，然后总结不同之处： 12345678910111213141516171819202122232425262728293031pragma solidity ^0.4.19;contract Animal { string homeAddress = &quot;北京市&quot;; uint weight; /** pure */ function getAge() public pure returns (uint) { return 30; } /** view */ function getCurrentAddress() public view returns (address) { return msg.sender; } /** view */ function getHomeAddress() public view returns (string) { return homeAddress; } function setWeight(uint w) public { weight = w; } /** constant/view都行 */ function getWeight() public constant returns (uint) { weight = 200; return weight; }} 结论如下： 只有当函数有返回值的情况下，才需要使用pure、view、constant pure: 当函数返回值为自变量而非变量时，使用pure view: 当函数返回值为全局变量或属性时，使用view constant: 可以理解为view的旧版本，与view是等价的 如果一个函数有返回值，函数中正常来讲需要有 pure、view或constant关键字，如果没有，在调用函数的过程中，需要主动去调用底层的call方法。 注：如果一个函数中带了关键字view或constant，就不能修改状态变量的值。但凡是是带了这两个关键字，区块链就默认只是向区块链读取数据，读取数据不需要花gas，但是不花gas就不可能修改状态变量的值。写入数据或者是修改状态变量的值都需要花费gas。 4、truffle初识truffle是以太坊solidity编程语言的开发框架。 1.安装truffle cnpm i -g truffle 2.创建项目工程 12mkdir truffle &amp;&amp; cd truffletruffle init 3.项目结构contracts目录下存的是solidity合约代码migrations中存的是js脚本test中存的是测试用例 4.编写代码、部署、调试contracts中新建Hello.sol文件，代码如下： 123456789101112131415161718192021222324pragma solidity ^0.4.17;contract Hello { string weight = &quot;18cm&quot;; string height = &quot;180cm&quot;; function getAge() public pure returns (uint){ return 30; } function getWeight() public view returns (string) { return weight; } function getHeight() public constant returns (string) { return height; } function test() public returns (uint) { return 250; }} 注意： 类名Hello需要跟文件名Hello.sol保存一致 Migrations.sol文件不能删除 然后在migrations目录下添加对应的js脚本2_depoly_hello.js: 12345var myHello = artifacts.require(&quot;./Hello.sol&quot;);module.exports = function(deployer) { deployer.deploy(myHello);}; 代码添加完后，打开终端，切换到项目所在路径，执行： 123456789101112131415161718192021222324//启动测试网络truffle develop//编译compile//将合约部署到本地测试网络，成功后会返回合约地址(如:0x75c35c980c0d37ef46df04d31a140b65503c0eed)migrate //通过合约地址，得到合约对象，赋值给变量cvar c;Hello.at('0x75c35c980c0d37ef46df04d31a140b65503c0eed').then((obj) =&gt; { c = obj;})//调用合约暴露的方法c.getAge()//如果合约中暴露出的有返回值的函数，没有用 pure/view/constant 声明，则需要调用底层的 call 方法才能调用方法//如上面代码中的test方法c.test.call()//修改完代码，编译后，重新部署时需重置之前的合约migrate --reset 补充：调用migrate编译之后会build文件夹，存储的是编译之后生成的json文件，而这个json文件就是合约部署在虚拟机中的形式。 编译生成的的json文件中，有两个重要的额键值： abi：通俗讲，abi与api类似，都是接口。abi是合约的二进制接口。 bytecode：是合约代码的16进制码 通过abi及bytecode就能完成合约的部署。 5、基本值类型、引用类型uint为值类型，只能深拷贝string为引用类型，既可以深拷贝，也可以浅拷贝 uint及string深拷贝（默认的声明方式即为深拷贝）: 12345678910111213141516string a = &quot;100&quot;;uint b = 100;// 浅拷贝// string aa 等同于 string memory aafunction m(string aa) private { aa = &quot;1000&quot;;}function n(uint bb) private { bb = 1000;}function f() public { m(a) n(b)} string类型浅拷贝（加storage关键字）: 12345678910111213141516string a = &quot;100&quot;;function f() public { m(a)}// 深拷贝// memory（深拷贝）、 storage（浅拷贝）// 当函数参数为 storage 类型时，函数类型只能为 private 或 internal，否则报错function m(string storage aa) private { //aa = &quot;1000&quot;; // string不能直接修改，需要转换为可变的字节数组 bytes(aa)[0] = '6';}function getA() public view returns (string) { return a;}","link":"/2018/02/07/solidity%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%8F%8Atruffle%E4%BD%BF%E7%94%A8/"},{"title":"&#x2F;tmp&#x2F;crontab bad command 问题所在","text":"最近玩树莓派遇到的一个小问题，其实是常识问题而已，记录下。 用树莓派raspberry+yeelink+手机在做一个远程视频监控的玩意，结果设置crontab定时任务时，修改完crontab保存失败，出现以下提示： no crontab for pi - using an empty one crontab : installing new crontab “/tmp/crontab.QhPk4T/crontab”:23: bad command errors in crontab file, can’t install 我写的定时任务为： */1****/home/pi/camera.sh 结果就出事了，search了半天也没头绪，看网上大家都是这么写的，最后发现是crontab格式写错了= = crontab 的语句是“分 时 日 月 周 命令”（之间有空格，如果多个月份，用逗号隔开，两个月份间的用“-”隔开），如果只限定分，时，其余的三个选项要用*（星号）补全。 把空格补上果断出现crontab: installing new crontab，成功。 看来Linux的基础是必须的，需要补补，另外就这照着敲时要看仔细。空格落不得0_0","link":"/2014/11/13/tmp-crontab-bad-command-%E9%97%AE%E9%A2%98%E6%89%80%E5%9C%A8/"},{"title":"ubuntu kylin 14.04 Getting-Flash","text":"Step 1, just try to installFirst thing you can do is simply start Ubuntu Software Center and get the Pepper Flash Player – browser plugin. The package name pepperflashplugin-nonfree has “nonfree” in the name because it refers to its ownership by Adobe Systems and free-speech qualities, not that it costs money. The browser may ask your permission to run “xdg-open” to launch Ubuntu Software Center. IF you don’t have Multiverse* software repository enabled, Ubuntu Software Center will simply say Not Found. Pick up at the step 2. If it worked and you see a green check-mark, then you’re almost done. Skip to Step 4. Step 2, enable Multiverse software repository before trying again If you tried to install the Flash player and the Software Center couldn’t find it, you must enable the special repository of software that isn’t perfectly liberated. Launch the Ubuntu Software center app if it isn’t already running. Click Edit and then Software Sources. Under “Ubuntu Software” tab, mark the “Software restricted by copyright or legal issues (multiverse)” box and close. You will probably need to type your password to do this system-level change. After you turn on that new repository, the system will scan it to learn of new packages. Wait until the progress spinner goes quiet. It may take a minute or two on a slow internet connection. Step 3, try again to get installerNow that you have the new software repository installed, you should again ask the system to get the Flash Plugin installer. It should work this time. Step 4, run installerThis part may be intimidating because it’s unfamiliar, but there’s not really any magic here. You’re going to run Terminal, paste a command to run, and wait for it to finish before closing Terminal. So, first tap the Super/Windows button or click the Ubuntu symbol in the upper left and start typing “Terminal”, and click on “Terminal” when it appears. A terminal will appear with your computer name and a blinking cursor. Take a look at it, so you know what it looks like when your computer is not doing anything except waiting for your command. In it, paste sudo update-pepperflashplugin-nonfree –install and press Enter. That will run a while. When it’s finished, you’ll see that computer name and blinking cursor again. Type exit and hit Enter, to quit. You’re done! Go enjoy your new flash player. Now close Chromium and start it again. **Note** You’ll need to restart your browser for the new plugin to take effect.","link":"/2014/04/27/ubuntu-kylin-14-04-Getting-Flash/"},{"title":"ubuntu kylin14.04下源404的解决方法","text":"在更新14.04后很多同学都应该遇到了ubuntukylin报404的错误，如下： W: Failed to fetch http://archive.ubuntukylin.com:10006/ub … 4/Packages 404 Not Found W: Failed to fetch http://archive.ubuntukylin.com:10006/ub … 6/Packages 404 Not Found E: Some index files failed to download. They have been ignored, or old ones used instead. 我们只需进入系统设置－软件更新－其他软件，找到ubuntukylin的项目，点击编辑，把precise改成trusty，把non-free改成main，就成了。","link":"/2014/04/28/ubuntu-kylin14-04%E4%B8%8B%E6%BA%90404%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"title":"ubuntu14.04 安装Wine1.7","text":"打开终端执行一下命令，在安装过程中会提示你是否同意协议，点击Enter: sudo add-apt-repository ppa:ubuntu-wine/ppa sudo apt-get update &amp;&amp; sudo apt-get install wine1.7","link":"/2014/04/21/ubuntu14-04-%E5%AE%89%E8%A3%85Wine1-7/"},{"title":"ubuntu引导出错：grub rescue解决办法","text":"修改了win8.1的启动项导致Ubuntu引导出错： GRUB loading error:unknow filesystem grub rescue&gt; 【造成该问题的原因】 1.直接在window下格式化ubuntu的分区 2.调整磁盘 利用工具合并 修改 删除分区 是磁盘分区数目发生变化 3.重装系统选择不同分区 格式化之前分区 4.恢复到老版本系统 【解决办法】 先使用ls命令，找到Ubuntu的安装在哪个分区： 在 grub rescue&gt;下输入以下命令：先输入ls，会罗列所有的磁盘分区信息，eg： (hd0,1),(hd0,5),(hd0,3),(hd0,2)或(hd0,msdos1) like this~ 2. 然后依次调用如下命令： （X表示分区编号） 如果/boot没有单独分区，用以下命令：ls (hd0,X)/boot/grub 如果/boot单独分区，则用下列命令：ls （hd0,X)/grub 如果你记得Ubuntu在哪个区选择即可，忘了的话可以进老毛桃PE看一下，也可以一个一个的试，反正也不多，如果不是会提示没找到，找到的话会显示文件夹中的内容，一般扩展名是.mod和.lst和.img。假设找到（hd0,5）时，显示了文件夹中的文件，则表示Linux安装在这个分区。 3. 如果找到了正确的grub目录，则设法临时性将grub的两部分关联起来，方法如下：以下是/boot没有单独分区的命令： grub rescue&gt;set root=(hd0,5) grub rescue&gt;set prefix=(hd0,5)/boot/grub grub rescue&gt;insmod /boot/grub/normal.mod 以下是/boot 单独分区的命令： (如果/boot单独分区去掉代码中的/boot即可)： grub rescue&gt;set root=(hd0,5) grub rescue&gt;set prefix=(hd0,5)/grub grub rescue&gt;insmod /grub/normal.mod(这如果出错可以尝试insmod normal即可） 然后调用如下命令，就可以显示出丢失的grub菜单了。 grub rescue&gt;normal 这时已经成功进入了Ubuntu的grub引导，不过不要高兴，如果这时重启，问题依旧存在，我们需要进入Ubuntu中，对grub进行修复。进入ubuntu之后，在终端执行： sudo update-grub sudo grub-install /dev/sda （sda是你的硬盘号，千万不要指定分区号码，例如sda1，sda5等都不对），现在重启会发现Ubuntu的引导已经回来，大功告成了。","link":"/2014/05/05/ubuntu%E5%BC%95%E5%AF%BC%E5%87%BA%E9%94%99%EF%BC%9Agrub-rescue%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"},{"title":"vue 项目在低配机器上线及优化","text":"背景功能：最近帮朋友的忙，抽空用vue-cli3脚手架，开发一个网站，适配pc和mobile，两端分别有约10个页面，也就是十个路由，网站中的图片比较多，且使用了几个自定义字体，ttf文件都在2m左右。 服务器环境：本着能抠一点就抠一点的原则，购买的是阿里云ECS的入门配置，1核1G，40G硬盘，1M带宽，基本上是最低配了。（本来想用搬瓦工来着，但最近搬瓦工被封的厉害，风险比较大，可能买来用一两周就GG了。） 由于是空闲时间搞得，时间也比较急，前期没进过任何优化，直接编译完上线，发现首次全部加载完成耗时32s ！分析发现原因如下： 每页加载的图片都在1025张左右，所有的图片全部没有压缩，尺寸较大，尤其顶部banner达12M左右，其余大图在700800kb之间，每页的图片加起来在5M10M之间。 引入的自定义平方字体，使用了regular,medium,thin等几种，每种ttf字体都在2M左右，加起来字体有7、8M。 首屏加载所有路由，加载耗时。 由于服务器是1M带宽，那么每秒下行的最高速度约在120k左右，加载以上超过10M的资源，最快理论速度也在10s以上，且由于不是固态硬盘，速度上也不快。 综合以上的问题，对存在的问题进行逐个优化： 1、路由懒加载：对于多路由的SPA，首次加载如果引入所有路由，那么首屏的时间势必会比较耗时。采用路由懒加载，只有当访问到相应的路由时，才会加载对应路由，缩短首屏加载时间。 参考 12import Home from './pages/pc/home.vue'{ path: '/home', component: Hone, label: '首页'}, =&gt; 1{ path: '/home', component: () =&gt; import('./pages/pc/home.vue'), label: '首页'}, 2、图片压缩优化：所有图片使用 https://tinypng.com 进行压缩，可以压缩约80%左右的大小，同时图片显示效果基本不变。 3、字体压缩：当引用自定义的字体后，往往字体文件达1~2M，严重拖累加载进度。使用 font-spider 按需加载字体，可由2M缩减为3k，效果显著。 字体压缩步骤是： 先将vue编译 执行 font-spider index.html 如果将资源文件放置在非本地（如cdn），那么无法直接使用font-spider压缩远程资源。此时可以使用 fsp 压缩远程资源。示例配置如fspconfig.js： 1234567{ &quot;localPath&quot; : &quot;./static/fonts/&quot;, &quot;onlinePath&quot; : &quot;http://cdn.lantianren.net/static/fonts/&quot;, &quot;url&quot; : [ &quot;http://lantianren.net/index.html&quot; ]} 执行 fsp run 即可。 4、将本地的静态文件批量上传至七牛cdn使用 qshell 工具即可。执行：qshell qupload /Users/ludis/Work/src/qshell/qupload.json。 配置强制刷新，每次修改完文件后，可以强制刷新上传至七牛。同时网站存在cdn缓存，不能及时更新，可以手动处理 配置文件如下: 1234567{ &quot;src_dir&quot;: &quot;/Users/ludis/Desktop/work/lt-educate/dist&quot;, &quot;bucket&quot;: &quot;lt&quot;, &quot;overwrite&quot;: true, &quot;check_exists&quot;: true, &quot;rescan_local&quot;: true} 编译配置vue.config.json: 根据运行模式设置资源根路径。可以将静态资源上传至cdn（七牛）加速。 123456module.exports = { publicPath: process.env.NODE_ENV === 'production' ? 'http://cdn.lantianren.net/' : './', assetsDir: 'static'} 经过这些优化后，首屏加载时间在2s~2.5s之间浮动，由于是SPA应用，所以其他页面基本是秒开，且图片进压缩，cdn处理后，加载也很快。整体上从开始的32S降至2s开屏，基本上达到可接受范围。 👉 体验地址 其余优化方式： 1、如果资源放置在本地，可以配置nginx gzip压缩2、如果项目更加庞大复杂，可以继续使用ssr服务端渲染。 结语： 平时在工作中开发小型项目，在公司较高的硬件配置下比较少有优化加载速度的需求和想法。当使用低配环境时，就会发现还是有很多可优化的点。","link":"/2019/07/25/vue-%E9%A1%B9%E7%9B%AE%E5%9C%A8%E4%BD%8E%E9%85%8D%E6%9C%BA%E5%99%A8%E4%B8%8A%E7%BA%BF%E5%8F%8A%E4%BC%98%E5%8C%96/"},{"title":"ubuntu默认root密码","text":"安装完Ubuntu后忽然意识到没有设置root密码，不知道密码自然就无法进入根用户下。到网上搜了一下，原来是这么回事: Ubuntu的默认root密码是随机的，即每次开机都有一个新的root密码。我们可以在终端输入命令: sudo passwd 然后输入当前用户的密码，enter，终端会提示我们输入新的密码并确认，此时的密码就是root新密码。修改成功后，输入命令 : su root 再输入新的密码就ok了。","link":"/2014/04/21/ubuntu%E9%BB%98%E8%AE%A4root%E5%AF%86%E7%A0%81/"},{"title":"vue2+express前后端分离跨域session等问题","text":"基于 vue2 + express 的 RBAC 角色权限验证前后端分离项目。前端vue2 负责路由控制，数据渲染，后端 express 负责数据库操作，RBAC权限控制。 前端： 脚手架：vue-cli 选型：vue2 + vuex + vue-router + axios + iview + ES6 后端： 脚手架：express-generator 选型：express4 + mongodb 结构整合： 使用vue-cli生成的项目，默认安装了简易的 express，该 express 的启动文件为build/dev-server.js。执行cnpm start启动该 express,实际主要是启一个服务来运行 Vue。所以我们后端部分不以该文件为入口。后端部分的目录使用express-generator来生成，由于我们做了前后端分离，所以express 的任务只是提供接口，做数据库操作，所以我们把view、pubic目录删掉。最后将前后端代码整合一下。在 vue-cli 生成的目录下创建 server 目录用来存放后端代码，将package.json文件合并，然后添加启动后端的脚本”server”: “node server/bin/www” package.json 文件如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586{ &quot;name&quot;: &quot;backend&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;backend build by webpack+vue2+express&quot;, &quot;author&quot;: &quot;ludis &lt;service@ldsun.com&gt;&quot;, &quot;private&quot;: true, &quot;scripts&quot;: { &quot;dev&quot;: &quot;node build/dev-server.js&quot;, &quot;start&quot;: &quot;node build/dev-server.js&quot;, &quot;build&quot;: &quot;node build/build.js&quot;, &quot;lint&quot;: &quot;eslint --ext .js,.vue src&quot;, &quot;server&quot;: &quot;node server/bin/www&quot; }, &quot;dependencies&quot;: { &quot;axios&quot;: &quot;^0.16.1&quot;, &quot;iview&quot;: &quot;^2.0.0-rc.15&quot;, &quot;moment&quot;: &quot;^2.18.1&quot;, &quot;monk&quot;: &quot;^5.0.2&quot;, &quot;vue&quot;: &quot;^2.3.3&quot;, &quot;vue-awesome&quot;: &quot;^2.3.1&quot;, &quot;vue-axios&quot;: &quot;^2.0.2&quot;, &quot;vue-router&quot;: &quot;^2.3.1&quot;, &quot;vuex&quot;: &quot;^2.3.1&quot;, &quot;async&quot;: &quot;^2.1.4&quot;, &quot;cors&quot;: &quot;^2.8.3&quot;, &quot;body-parser&quot;: &quot;~1.15.1&quot;, &quot;cookie-parser&quot;: &quot;~1.4.3&quot;, &quot;debug&quot;: &quot;~2.2.0&quot;, &quot;express&quot;: &quot;~4.13.4&quot;, &quot;express-session&quot;: &quot;latest&quot;, &quot;formidable&quot;: &quot;^1.1.1&quot;, &quot;morgan&quot;: &quot;~1.7.0&quot; }, &quot;devDependencies&quot;: { &quot;autoprefixer&quot;: &quot;^6.7.2&quot;, &quot;babel-core&quot;: &quot;^6.22.1&quot;, &quot;babel-eslint&quot;: &quot;^7.1.1&quot;, &quot;babel-loader&quot;: &quot;^6.2.10&quot;, &quot;babel-plugin-transform-runtime&quot;: &quot;^6.22.0&quot;, &quot;babel-preset-env&quot;: &quot;^1.3.2&quot;, &quot;babel-preset-stage-2&quot;: &quot;^6.22.0&quot;, &quot;babel-register&quot;: &quot;^6.22.0&quot;, &quot;chalk&quot;: &quot;^1.1.3&quot;, &quot;connect-history-api-fallback&quot;: &quot;^1.3.0&quot;, &quot;copy-webpack-plugin&quot;: &quot;^4.0.1&quot;, &quot;css-loader&quot;: &quot;^0.28.0&quot;, &quot;eslint&quot;: &quot;^3.19.0&quot;, &quot;eslint-friendly-formatter&quot;: &quot;^2.0.7&quot;, &quot;eslint-loader&quot;: &quot;^1.7.1&quot;, &quot;eslint-plugin-html&quot;: &quot;^2.0.0&quot;, &quot;eslint-config-standard&quot;: &quot;^6.2.1&quot;, &quot;eslint-plugin-promise&quot;: &quot;^3.4.0&quot;, &quot;eslint-plugin-standard&quot;: &quot;^2.0.1&quot;, &quot;eventsource-polyfill&quot;: &quot;^0.9.6&quot;, &quot;express&quot;: &quot;^4.14.1&quot;, &quot;extract-text-webpack-plugin&quot;: &quot;^2.0.0&quot;, &quot;file-loader&quot;: &quot;^0.11.1&quot;, &quot;friendly-errors-webpack-plugin&quot;: &quot;^1.1.3&quot;, &quot;html-webpack-plugin&quot;: &quot;^2.28.0&quot;, &quot;http-proxy-middleware&quot;: &quot;^0.17.3&quot;, &quot;webpack-bundle-analyzer&quot;: &quot;^2.2.1&quot;, &quot;semver&quot;: &quot;^5.3.0&quot;, &quot;shelljs&quot;: &quot;^0.7.6&quot;, &quot;opn&quot;: &quot;^4.0.2&quot;, &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^1.3.0&quot;, &quot;ora&quot;: &quot;^1.2.0&quot;, &quot;rimraf&quot;: &quot;^2.6.0&quot;, &quot;url-loader&quot;: &quot;^0.5.8&quot;, &quot;vue-loader&quot;: &quot;^12.1.0&quot;, &quot;vue-style-loader&quot;: &quot;^3.0.1&quot;, &quot;vue-template-compiler&quot;: &quot;^2.3.3&quot;, &quot;webpack&quot;: &quot;^2.6.1&quot;, &quot;webpack-dev-middleware&quot;: &quot;^1.10.0&quot;, &quot;webpack-hot-middleware&quot;: &quot;^2.18.0&quot;, &quot;webpack-merge&quot;: &quot;^4.1.0&quot; }, &quot;engines&quot;: { &quot;node&quot;: &quot;&gt;= 4.0.0&quot;, &quot;npm&quot;: &quot;&gt;= 3.0.0&quot; }, &quot;browserslist&quot;: [ &quot;&gt; 1%&quot;, &quot;last 2 versions&quot;, &quot;not ie &lt;= 8&quot; ]} 这样，我们在执行 cnpm start 及 cnpm run server 后即可分别启动前端和后端服务。项目目录如下： 123456789101112131415161718192021222324252627282930313233.├── README.md├── build│ ├── build.js│ ├── check-versions.js│ ├── dev-client.js│ ├── dev-server.js│ ├── utils.js│ ├── vue-loader.conf.js│ ├── webpack.base.conf.js│ ├── webpack.dev.conf.js│ └── webpack.prod.conf.js├── config│ ├── dev.env.js│ ├── index.js│ └── prod.env.js├── index.html├── mongo.json├── node_modules├── package.json├── server // 后端代码│ ├── app.js│ ├── bin│ ├── lib│ ├── routes│ └── service├── src│ ├── App.vue│ ├── assets│ ├── components│ ├── main.js│ └── router└── static 这样项目的结构比较清晰。 遇到的问题： 在开发阶段，vue运行与localhost:8080端口，express运行于localhost:3000端口。vue在跨域请求接口时会提示跨域请求不被允许。这里使用express的cros模块，允许8080端口的请求： 12345const cors = require('cors'); app.use(cors({ origin:['http://localhost:8080'], methods:['GET','POST'],})); 这样就解决了跨域请求问题。 在 vue 请求后端接口时，我选用了vue官方推荐的 axios 作为http请求组件。涉及到登陆验证，所以 express 使用express-session及connect-redis模块，将session存在redis中。在登录成功后，将登录信息存储于 req.session.user 中，当有其他请求时，通过判断 req.session.user 来判断是否登录及登录是否过期。 1234567891011121314151617181920212223const session = require('express-session'); const redisStore = require('connect-redis')(session); app.use(session({ secret: 'backend123...', name: 'backend', store: new RedisStore(options), cookie: { maxAge: 1000 * 60 * 60, },// 1h resave: true, saveUninitialized: false,}));// 登录app.post('/login', function(req, res, next){ ... // 登录成功，拿到用户信息，设置session req.session.user = userinfo})// 有其他请求时判断登陆app.user('*', function(req, res, next){ if(req.session.user)next() // 如果session存在，是登录状态 else .... // 未登录}) 但是通过调试发现，每次登陆后用户信息确实存到session中了，但是下次请求时session却为空！最后发现是由于跨域问题引起的。由于使用了cros安全代理，默认是拒绝接收浏览器发送的cookie，所以每次请求都不带cookie，sessionID自然对不上，所以每次都会是新的session，导致没法保存登陆状态。给cors配置参数，允许接收cookie即可。 12345app.use(cors({ origin:['http://localhost:8080'], methods:['GET','POST'], credentials: true})); 但是加完了发现问题还是没有解决，那么就是 axios 的问题了，原来axios默认发送http请求时是不会在头信息中附带cookie的，所以也需要配置开启。直接在main.js中全局设置： 1234import axios from 'axios' // axios import VueAxios from 'vue-axios' axios.defaults.withCredentials = true // 请求携带cookie信息 Vue.use(VueAxios, axios) 这样，问题终于解决了233…心累。 坑先填到这，持续更新。 github：https://github.com/flute/webpackvue2expressmongodbbackend 参考资料：http://www.ruanyifeng.com/blog/2016/04/cors.html","link":"/2017/06/06/vue2-express%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E8%B7%A8%E5%9F%9Fsession%E7%AD%89%E9%97%AE%E9%A2%98/"},{"title":"web开发中常用的PHP代码片段","text":"1.关键词高亮function highlight($sString, $aWords) { if (!is_array ($aWords) || empty ($aWords) || !is_string ($sString)) { return false; } $sWords = implode (‘|’, $aWords); return preg_replace (‘@\\b(‘.$sWords.’)\\b@si’, ‘$1‘, $sString); } 2.获取你的Feedburner的用户function get_average_readers($feed_id,$interval = 7){ $today = date(‘Y-m-d’, strtotime(“now”)); $ago = date(‘Y-m-d’, strtotime(“-“.$interval.” days”)); $feed_url=”https://feedburner.google.com/api/awareness/1.0/GetFeedData?uri=&quot;.$feed_id.&quot;&amp;dates=&quot;.$ago.&quot;,&quot;.$today; $ch = curl_init(); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_URL, $feed_url); $data = curl_exec($ch); curl_close($ch); $xml = new SimpleXMLElement($data); $fb = $xml-&gt;feed-&gt;entry[‘circulation’]; $nb = 0; foreach($xml-&gt;feed-&gt;children() as $circ){ $nb += $circ[‘circulation’]; } return round($nb/$interval); } 3.自动生成密码function generatePassword($length=9, $strength=0) { $vowels = ‘aeuy’; $consonants = ‘bdghjmnpqrstvz’; if ($strength &gt;= 1) { $consonants .= ‘BDGHJLMNPQRSTVWXZ’; } if ($strength &gt;= 2) { $vowels .= “AEUY”; } if ($strength &gt;= 4) { $consonants .= ‘23456789’; } if ($strength &gt;= 8 ) { $vowels .= ‘@#$%’; } $password = ‘’; $alt = time() % 2; for ($i = 0; $i &lt; $length; $i++) { if ($alt == 1) { $password .= $consonants[(rand() % strlen($consonants))]; $alt = 0; } else { $password .= $vowels[(rand() % strlen($vowels))]; $alt = 1; } } return $password; } 4.压缩多个CSS文件header(‘Content-type: text/css’); ob_start(“compress”); function compress($buffer) { /* remove comments / $buffer = preg_replace(‘!/*[^]*+([^/][^]*+)/!’, ‘’, $buffer); /* remove tabs, spaces, newlines, etc. / $buffer = str_replace(array(“\\r\\n”, “\\r”, “\\n”, “\\t”, ‘ ‘, ‘ ‘, ‘ ‘), ‘’, $buffer); return $buffer; } / your css files */ include(‘master.css’); include(‘typography.css’); include(‘grid.css’); include(‘print.css’); include(‘handheld.css’); ob_end_flush(); 5.获取短网址function getTinyUrl($url) { return file_get_contents(“http://tinyurl.com/api-create.php?url=&quot;.$url); } 6.根据生日计算年龄function age($date){ $year_diff = ‘’; $time = strtotime($date); if(FALSE === $time){ return ‘’; } $date = date(‘Y-m-d’, $time); list($year,$month,$day) = explode(“-“,$date); $year_diff = date(“Y”) – $year; $month_diff = date(“m”) – $month; $day_diff = date(“d”) – $day; if ($day_diff &lt; 0 || $month_diff &lt; 0) $year_diff–; return $year_diff; } 7.计算执行时间//Create a variable for start time $time_start = microtime(true); // Place your PHP/HTML/JavaScript/CSS/Etc. Here //Create a variable for end time $time_end = microtime(true); //Subtract the two times to get seconds $time = $time_end - $time_start; echo ‘Script took ‘.$time.’ seconds to execute’; 8.PHP的维护模式function maintenance($mode = FALSE){ if($mode){ if(basename($_SERVER[‘SCRIPT_FILENAME’]) != ‘maintenance.php’){ header(“Location: http://example.com/maintenance.php&quot;); exit; } }else{ if(basename($_SERVER[‘SCRIPT_FILENAME’]) == ‘maintenance.php’){ header(“Location: http://example.com/&quot;); exit; } } } 9.阻止CSS样式被缓存","link":"/2014/03/13/web%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84PHP%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"},{"title":"windows8下安装ubuntu12.04&#x2F;13.04双系统","text":"windows8与ubuntu12.04双系统安装方法和win7+ubuntu双系统安装方法差不多，只不过稍微有点小不同。 首先下载Windows8和ubuntu系统镜像 1.Windows8_MSDN版下载地址： http://msdn.ez58.net http://msdn.itellyou.cn Windows8_X64 多合一免激活激活版下载地址： http://pan.baidu.com/share/link?shareid=478098&amp;uk=1209563959 2.ubuntu下载地址： 正式版：http://www.ubuntu.com/download 最新版： http://cdimage.ubuntu.com/daily-live/开始安装系统 1.安装系统 首先安装windows8和ubuntu12.04，安装先后顺序可以不用管，只是安装到ubuntu的分区时需要注意device for boot loader installation的选择（grub的安装位置），如果选择整个硬盘，则开机启动时win会被ubuntu管理启动（用grub引导 windows），这样卸载ubuntu后，win也会将启动丢失，引起系统进不去的问题（当然可以修复）；如果device for boot loader installation选择ubuntu的/boot所在的分区后，下次启动会默认进入win，这时只要在win下用freebcd添加个ubuntu的引导就行了。 ![windows8+ubuntu12.04双系统安装方法 - xiao106347 - Software Pro](http://img4.ph.126.net/WyUs8bKr5FDyTwOg6sDLmg==/6598241846052214184.jpg)按照上面的方法，当grub安装到ubuntu所在的分区，两个系统都安装完（不管是先安装ubuntu还是windows），这时都会只进得去win系统，这是正常的，因为整个磁盘的引导是mbr。然后在win8下安装easybcd软件（即往mbr添加一个ubuntu的引导）。 2.安装easybcd 下载easybcd软件安装时会提示你安装.net xxx 3.5 管理员打开cmd输入dism.exe /online /enable-feature /featurename:NetFX3 /Source:H:\\sources\\sxs（这里的h是挂载的win8的系统镜像的虚拟光驱的盘符，这个看自己的情况自定义） ![windows8+ubuntu12.04双系统安装方法 - xiao106347 - Software Pro](http://img9.ph.126.net/Q0DXD-5sQ7WmplicfyF-hw==/6597696488285048789.jpg)等会就安装好了。 3.使用easybcd添加ubuntu的启动项 添加ubuntu的启动项，这个和win7下一样操作，这时重启，你会发现ubuntu的启动项是被添加了，但是却用的win8的启动管理ubuntu的启动项（即双系统选择界面是metro模式），不过没有关系：设置ubuntu启动项为默认启动项即可！ 12.04以及之前版本可以用ubuntu grub2添加启动项，12.10和13.04则用neogrub添加启动项。如果升级到12.10或13.04之后会出现ubuntu启动不了的情况，这时重新给ubuntu添加neogrub启动项可以引导启动。 12.04及以前版本添加方法： 下面的drive选ubuntu的/分区（如果/boot单独分区选/boot所在目录）目录所在的分区 12.10，13.04 ，13.10添加方法： ![windows8+ubuntu12.04双系统安装方法 - xiao106347 - Software Pro](http://img1.ph.126.net/jq5W6Hj18pYkMCFBRw2BfA==/6598285826517531415.png)输入内容： title Ubuntu/Linux 13.04 find –set-root /boot/grub/i386-pc/core.img kernel /boot/grub/i386-pc/core.img boot #如果 /boot 是单独分区的，使用下面这样的： title ubuntu/Linux 13.04 (/boot on single partitionas) find –set-root /grub/i386-pc/core.img kernel /grub/i386-pc/core.img boot 如果出现Error 15: file not found，解决方法： http://ldixing.sinaapp.com/?p=121 或者这里添加13.04和13.10的引导时用grub2模式，然后参照上面的链接替换c盘ANG0文件搞定，这样可以避免出现2次grub引导界面！ 4.关闭win8的快捷启动 为什么要关闭win8的快捷启动呢,因为这个功能，win8在关机的时候不会进行完整彻底的关机，而是类似于深度休眠的状态。正是因为没有完整彻底的关机，导致我们每次从win8系统关机之后,第二次打开电源都会直接进入win8系统,没有ubuntu的启动项可以选择;但是win8的重启是正常的关机,所以从win8重启才有win8和ubuntu的双启动项! 关闭深度休眠方法: a、控制面板——电源选项——选择电源按钮的功能——点击上面蓝色字体“更改当前不可用的设置”——win关机设置中启用混合启动不要勾选。 b、组策略编辑器(开始—运行–gpedit.msc就可以了 )——计算机配置——管理模板——系统——Shutdown——Require use of hybrid boot—— 进入配置界面——Disabled c、删除休眠文件hiberfil.sys，释放C盘空间：win+x——命令提示符（管理员）——输入：powercfg/h off ![windows8+ubuntu12.04双系统安装方法 - xiao106347 - Software Pro](http://img0.ph.126.net/oytUa-hCXbFmH4X-OZ60VA==/6597667900982804682.jpg) ![windows8+ubuntu12.04双系统安装方法 - xiao106347 - Software Pro](http://img0.ph.126.net/kv5elWB2qrdUDBrOnDRniQ==/6597795444331813707.png)![windows8+ubuntu12.04双系统安装方法 - xiao106347 - Software Pro](http://img0.ph.126.net/xUyXfwFiU9az6heOxFwp_g==/6597606328331823054.png)","link":"/2013/11/03/windows8%E4%B8%8B%E5%AE%89%E8%A3%85ubuntu12-04-13-04%E5%8F%8C%E7%B3%BB%E7%BB%9F/"},{"title":"wordpress后台修改域名后不能登录的解决办法","text":"初次接触wordpress建站程序的同学可能会遇到这种问题，在后台—设置—常规—WordPress Address (URL)或者Site Address (URL)设置了别的域名，结果导致后台无法登录了，这是一种情况，还有一种情况就是网站搬家了，或者是换域名了，也会出现这类问题，那么就需要重新配置下当前域名才能使得网站正常运行。下面简单介绍下具体操作方法，没遇到过的也了解下，有备无患嘛。方法一：修改wp-config.php文件 在网站根目录找到wp-config.php文件，在其中添加以下两行内容： define(‘WP_HOME’,’http://www.ldsun.com’); define(‘WP_SITEURL’,’http://www.ldsun.com’); 其中的ldsun.com代表你的新地址。 登录后台—设置—常规—重新输入新博客地址（WordPress Address (URL)）和安装地址（Site Address (URL)），修改完毕后记得删除上面在wp-config.php文件中添加的内容。 方法二：修改functions.php文件 第一步：找到当前主题的主题文件functions.php中（wp-content/themes），添加以下两行内容：update_option(‘siteurl’,’http://www.ldsun.com’); update_option(‘home’,’http://www.ldsun.com’); 同样，其中的www.ldsun.com代表你的新地址。 第二步：登录后台—设置—常规—重新输入新博客地址（WordPress Address (URL)）和安装地址（Site Address (URL)），修改成功后一定记得删除之前在functions.php文件中添加的内容。 方法三：修改数据库 登录到你的数据库管理页面，找到wp_options表； 将表中的siteurl和 home 字段的值修改为当前的新域名，如下图: siteurl值的修改和home值的修改同理，个人感觉修改数据库的方法最好，操作最简便。","link":"/2013/11/21/wordpress%E5%90%8E%E5%8F%B0%E4%BF%AE%E6%94%B9%E5%9F%9F%E5%90%8D%E5%90%8E%E4%B8%8D%E8%83%BD%E7%99%BB%E5%BD%95%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"},{"title":"wordpress数据库结构及表说明","text":"数据表结构： wp_commentmeta：存储评论的元数据 wp_comments：存储评论 wp_links：存储友情链接（Blogroll） wp_options：存储WordPress系统选项和插件、主题配置 wp_postmeta：存储文章（包括页面、上传文件、修订）的元数据 wp_posts：存储文章（包括页面、上传文件、修订） wp_terms：存储每个目录、标签 wp_term_relationships：存储每个文章、链接和对应分类的关系 wp_term_taxonomy：存储每个目录、标签所对应的分类 wp_usermeta：存储用户的元数据 wp_users：存储用户 按照功能大致分为五类： user: 用户信息，包括wp_users表和wp_usermeta表。 link：链接信息，包括wp_links表。 post: 文章及评论信息，包括wp_posts、wp_postmeta、wp_comments。 category,link_category,tag:这个是比较复杂的信息模块，它包含了对分类，链接分类，标签的管理，包括wp_term，wp_term_relationships和wp_term_taxonomy表。 option: 全局设置信息，包括wp_options表。 wp_posts ****作为一个博客系统，最核心的当然是博主发表的一些“文章”了，这些“文章”存放的地方就是这个 wp_posts 表了。注意，这里所说的“文章”是加引号的，因为这个表里存放的除了普通的文章之外，还有附件和页面（page）的一些信息。表里面的 post_type 这个字段就是用来标示类型的。还有一点需要注意的就是，这个表里一些字段是针对于 post_type 的特定类型的，比如 menu_order 这个字段是“页面（page）”特有的，用来指定“页面”的顺序。post_mime_type 是针对附件的，来指定附件的类型。 wp_postmeta ****每篇文章的属性是不可能仅仅用 wp_posts 表里的那几个字段来完全标示的，往往还有一些因人而异的属性：写这篇文章时候的心情，地点等等。这些属性的名称和值类型都是不确定的，因 此，Wordpress 采用了元信息(meta)来表示它们。这个表很简单，只有 meta_id, post_id, meta_key, meta_value 这四个字段。post_id 是相关 post 的 id。我们注意到 meta_value 是 longtext 类型的，这里仅是用来存储值，至于值的确切类型，需要程序员来关心。 在撰写文章的时候，我们可以发现编辑框下面有一个 Custom Fields 的选项，我们可以在这里添加 post 的 meta 信息。 wp_comments ****用户评论。除了评论的内容以外，还记录了评论用户的名字，邮箱，网址，浏览器类型等信息。比较重要的两个字段是 comment_post_ID 和 comment_approved，前一个用来指示这条评论隶属于哪一篇文章，后一个用来记录审核状况。还有一个比较有意思的是这个 commnet_agent 字段，我们可以利用这个字段来统计一下用户浏览器类型。 wp_users ****用户帐号表。存储用户名、密码还有一些用户的基本信息。 wp_usermeta ****类似上面的 wp_postmeta，存储一些因人而异的用户信息。（比如QQ？ICQ？） wp_options ****用来记录 WordPress 的一些设置和选项。里面有一个 blog_id 字段，这个应该是用在 MU 版里面来标示不同的 Blog 的。 wp_links ****用来存储 Blogroll 里面的链接。 wp_terms , wp_term_relationships, wp_term_taxonomy 这三个表是这里面关系最复杂的了，在 WordPress 2.2 及以前的版本中是没有这三个表的，代之的是 wp_categories、wp_post2cat 和 wp_link2cat 这三个表。对比这两个版本我们可以发现：在 2.2 版和之前的版本，post 和 link 和 category 的关系都是通过各自单独的表来记录的。而在 2.3 版中加入了 tag 的支持，Wordpress 把 post、link、tag 的分类都抽象成了统一的形式，用新的三个表来记录这些信息。 wp_terms 记录分类，链接分类，标签的一些简要信息，包括名称，缩写。 wp_term_taxonomy 是对wp_terms中的信息的关系信息补充，有所属类型（category,link_category,tag），详细描述，父类，所拥有文章（链接）数量。 wp_term_relationships 关系表，多对多的，object_id是与不同的对象关联，例如wp_posts中的ID（wp_links中的link_id）等，term_taxonomy_id就是关联wp_term_taxonomy中的term_taxonomy_id。","link":"/2014/03/10/wordpress%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E5%8F%8A%E8%A1%A8%E8%AF%B4%E6%98%8E/"},{"title":"wordpress和微信平台那些事","text":"将自己的博客和微信公共平台关联起来是个不错的注意，一则方便订阅者通过微信关注自己的博客，同时也是一种推广。当简单的方式就是通过相关的插件来实现，此类插件现在也很常见了，如“微信机器人Wordpress插件高级版”，功能很是强大，不过这是一个收费插件，标价￥149.99，诸如此类收费的还有很多，当然我们更愿意选择免费的服务，在此介绍一款免费的插件，功能也是相当不错。 微信公共账号早就申请了一个，现在不知道还是免费申请吗。。反正我就拿原来的那个旧号用了~插件名为WeixinPress ，可能有好多朋友听过或用过。插件设置还是挺简单的，下载插件后上传激活，后台的WeixinPress 设置也是一目了然，按照说明走就行。 注意的是url地址格式，如：http://www.ldsun.com/?WeixinPress Token值就随便了~只要和微信平台的Token值保持一致即可。 设置好之后微信平台选择开发模式即可，这样公共账号只需输入相关词，便会自动匹配博客的相关文章返回给用户。这里值得注意的是，如果wp主题对移动设备支持良好的话，能取得更好的阅读效果。 （关于注册微信平台公共账号以及Token设置不懂的可以google，教程很多~） 此博客的微信订阅号：bistuo，欢迎测试~ 也可以扫扫二维码试试： 插件下载：百度网盘 微信平台传送","link":"/2014/02/21/wordpress%E5%92%8C%E5%BE%AE%E4%BF%A1%E5%B9%B3%E5%8F%B0%E9%82%A3%E4%BA%9B%E4%BA%8B/"},{"title":"【译】如丝般顺滑-使用css3实现60帧的动画","text":"原文： Smooth as Butter: Achieving 60 FPS Animations with CSS3在移动端上实现动画很简单。如果采取我们的建议的话，在移动端正确的实现动画也会比较容易。虽然现在很多人在手机上运用CSS3动画，但许多人用的都不够恰当。很多应加以考虑的最佳实践常常被忽略，因为仍然有人不明白这些最佳实践的真正意义。如今有这么多的设备规范，如果还不有针对性地优化你的代码，糟糕的用户体验将让你死无葬身之地。记住：虽然市场上始终有一些高端的旗舰机在挑战性能极限，但你面对的仍将是和这些性能怪兽相比只是玩具一样的低端设备。我们想帮助你正确地驾驭 CSS3。首先先要了解几件事。理解时间轴当渲染和处理HTML元素时，浏览器做了什么？这个非常简单的时间轴我们称之为 关键渲染路径想要达到流畅的动画效果，我们需要关注修改属性会对 composite （合成）阶段造成怎样的影响。而不是去关注前面的其他阶段。1. Styles浏览器开始计算样式以应用在元素上——重新计算样式2. Layout接下来，浏览器会开始为每个元素生成用于布局的形状和位置信息。在该步骤浏览器会设置的页面属性包括 width和height，还有margin，以及left/top/right/bottom 等。3. Paint在该步骤，浏览器开始用像素渲染填充每个元素，此时用到的属性有 box-shadown, border-radius,color, background-color 等。4. Composite这步就是你施展拳脚的地方了，浏览器开始在屏幕上渲染所有的元素。现代浏览器可以使用transform和opacity属性很好的实现四种动画。位置 —— transform: transformX(n) transformY(n) translateZ(n);缩放 —— transform: scale(n);旋转 —— rotate(ndeg);透明 —— opacity:n;如何达到每秒60帧想法有了，可以撸起袖子干活了。首先从HTML开始，创建一个简单的结构，把类名为app-menu的元素放在一个类名为layout的元素中。&lt;div class=\"layout\"&gt; &lt;div class=\"app-menu\"&gt;&lt;/div&gt; &lt;div class=\"header\"&gt; &lt;div class=\"menu-icon\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 用错误的方法来实现这个效果.app-menu { left: -300px; transition: left 300ms linear; } .app-menu-open .app-menu { left: 0px; transition: left 300ms linear;}看见我们这些我们修改的属性了吗？我们应该避免使用left/top/right/bottom这些属性作为动画。这些属性不能实现流畅的动画，因为他们会让浏览器每次都创建布局，而这会影响他们的子元素。这样做的结果大概是这样的：这个动画一点都不流畅。我们使用开发者工具的时间轴来看看发生了什么，结果如下：这清楚地显示了FPS是不平整的并且表现也很慢。绿色的条代表FPS，高的条表示动画渲染的帧数达到60FPS。低的条表示小于60帧。所以理想情况下，你想让绿色的长条贯穿整个时间轴。红色的条代表着糟糕的性能，所以另一方面评估程序的方法是消除这些红色的条。使用 Transform.app-menu { -webkit-transform: translateX(-100%); transform: translateX(-100%); transition: transform 300ms linear;}.app-menu-open .app-menu { -webkit-transform: none; transform: none; transition: transform 300ms linear;}transform属性影响Composite（合成）属性。这里我们告诉浏览器布局将被渲染并且已经准备好，当动画开始时。所以让渲染动画时卡顿更少。时间轴的显示如下：结果变的好点了，FPS更加规律了，因此动画更顺畅了。使用GPU运行动画让我们来上升一个等级，准备好让动画变得如丝般顺滑，我们开始使用GPU来渲染动画。.app-menu { -webkit-transform: translateX(-100%); transform: translateX(-100%); transition: transform 300ms linear; will-change: transform;}虽然一些浏览器仍然需要 translateZ() 或 translate3d() 作为备选方案，但will-change 被广泛支持已经是势不可挡了。它的功能是把元素提升到另一个层中，这样浏览器就不必关心布局渲染或者绘制了。看见有多顺畅了吗？ 时间轴目前是这样的：动画的FPS更稳定了，渲染也更快了。但是有一帧仍然渲染得很久。在开始处还有一点点瓶颈。还记得开始时创建的HTML结构吗？让我们来通过JavaScript来控制类名为app-menu的元素。function toggleClassMenu() { var layout = document.querySelector(\".layout\"); if(!layout.classList.contains(\"app-menu-open\")) { layout.classList.add(\"app-menu-open\"); } else { layout.classList.remove(\"app-menu-open\"); }}var oppMenu = document.querySelector(\".menu-icon\");oppMenu.addEventListener(\"click\", toggleClassMenu, false);这儿的问题是给布局中的div元素增加了类名，这样使得浏览器多了一次重新计算样式的步骤，因此影响了渲染表现。如丝般顺滑的60帧动画解决方案如果我们在视窗外的区域创建menu元素呢？在脱离主区域的地方这么做，可以确保影响仅限于你想赋予动画的元素。因此，我们打算使用下面的HTML结构：&lt;div class=\"menu\"&gt; &lt;div class=\"app-menu\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\"layout\"&gt; &lt;div class=\"header\"&gt; &lt;div class=\"menu-icon\"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;现在我们可以以略微不同的方式来控制菜单的状态。我们可以通过使用JavaScript的transitionend方法，在动画结束时移除类名来控制动画。function toggleClassMenu() { myMenu.classList.add(\"menu--animatable\"); if(!myMenu.classList.contains(\"menu--visible\")) { myMenu.classList.add(\"menu--visible\"); } else { myMenu.classList.remove('menu--visible'); }} function OnTransitionEnd() { myMenu.classList.remove(“menu–animatable”);} var myMenu = document.querySelector(“.menu”);var oppMenu = document.querySelector(“.menu-icon”);myMenu.addEventListener(“transitionend”, OnTransitionEnd, false);oppMenu.addEventListener(“click”, toggleClassMenu, false);myMenu.addEventListener(“click”, toggleClassMenu, false);我们来整理一下代码然后检查下结果。下面是完整的CSS3代码示例：.menu { position: fixed; left: 0; top: 0; width: 100%; height: 100%; overflow: hidden; pointer-events: none; z-index: 150;} .menu–visible { pointer-events: auto;} .app-menu { background-color: #fff; color: #fff; position: relative; max-width: 400px; width: 90%; height: 100%; box-shadow: 0 2px 6px rgba(0, 0, 0, 0.5); -webkit-transform: translateX(-103%); transform: translateX(-103%); display: flex; flex-direction: column; will-change: transform; z-index: 160; pointer-events: auto;} .menu–visible .app-menu { -webkit-transform: none; transform: none;} .menu–animatable .app-menu { transition: all 130ms ease-in;} .menu–visible.menu–animatable .app-menu { transition: all 330ms ease-out;} .menu:after { content: ‘’; display: block; position: absolute; left: 0; top: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.4); opacity: 0; will-change: opacity; pointer-events: none; transition: opacity 0.3s cubic-bezier(0,0,0.3,1);} .menu–visible.menu:after { opacity: 1; pointer-events: auto;}那么时间轴表现如何呢？是不是如丝般顺滑呢？翻译总结：目前在给手机页面通过CSS3实现简单动画时，一般很少考虑流畅问题。因为在开发阶段使用的PC机性能都极高，很难主要到这一点。如我目前使用的Mac Pro（i7,16g）。即便使用文中提到的错误示例（第一种方案，通过left控制动画），通过审查工具分析时，其帧数依旧如诗般顺滑…，然而应该当考虑到实际的使用场景是移动端，且就目前而言，确实仍有一大批人在只用较为低端的安卓机。所以采用最佳实践很有必要，并且实际使用的动画会比菜单滑动要复杂。所以是否采取最佳实践方案在实际的设备中运行会出现较大差异。","link":"/2018/12/03/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%B8%9D%E8%88%AC%E9%A1%BA%E6%BB%91-%E4%BD%BF%E7%94%A8css3%E5%AE%9E%E7%8E%B060%E5%B8%A7%E7%9A%84%E5%8A%A8%E7%94%BB/"},{"title":"【转】创始人应当是什么角色？","text":"创始人是从整个项目开始一直最重要的角色，即使在公司壮大到不需要参与任何事务时，创始人也要为所有公司的股东和员工们背书。 我对创始人角色的理解几乎每天都在发生变化。有时会觉得他应该事无巨细，有时觉得他只需要统领大局。后来我个人感觉，粗略地看来，他的职责就是需要统管所有的事情。而这句统管所有的事情，可以说个三天三夜，因为统管的方式和统管的内容随时空变化必然会有不同，创始初期、迅速发展期、稳定期是不同的，对资金、业务、人力资源、商务等等不同部分也是不同的。 我就简单说一下我的理解，之后每项可能会展开再详细说。 1.关于业务在刚刚开始要创业的时候，创始人应该对项目有自己特别深入的想法，并且基于它有自己详尽的方案。比如你要做 O2O，那它的具体操作模式是什么，线下如何运维，线上如何营销，端对端如何交易，具体服务要怎样做，商业模式又是什么，等等都是看似简单但必须深究的问题。如何详尽可能又是另一个课题了。创始人永远不要指望其他合伙人或者投资人给你完善想法。一旦发现从想法到方案这一段你无法自圆其说，那有三种可能：A. 你还不熟悉这个领域 B. 你没有基本的逻辑分析能力 C. 你只是不够聪明 。每种可能都预示着你并不适合创业，至少不适合当创始人。 另外，对项目也要有极深的热情和兴趣。这就不用多说了，如果说合伙人的底线是要有一定的兴趣、早期员工的底线是要有业务能力，那创始人的底线就是比所有人都有热情和信心把这件事做成。 在创业初期，创始人是可以力所能及地甚至是必须力所能及地做一些自己能胜任的工作的。这个说来很简单，如果做过技术，可以帮忙写代码；如果做过市场，那就去做市场；如果做过产品经理，那就帮忙设计产品。具体事务之外，创始人也要对各个部门的细节做决策，前期的任务比较少，创始人亲自过问会保证初期各方面的稳定。 当公司发展到一定程度之后，比如业务之外的事情基本已占据创始人所有时间，那创始人就要从业务细节抽身出来。这里最关键的并不是抽身这个动作。对于很多创始人来说，这是最得意的时刻，因为终于有混出头、老子要当老板了的意思，所以一般抽得都风驰电掣、快刀斩麻。偏偏这是最容易出问题的。 不再关心细节之后，最关键的是要保证有人在关心细节。这个看起来挺简单，但过渡起来却很花费时间和精力。首先，每块业务都要有负责人，这些负责人要有能力管理好团队、有能力统领好业务。其次，当开始有规范的组织结构之后，就要有规范的业务流程。每件事如何开始，谁来负责，谁来记录，谁来跟进，谁来决策，都是需要有成文的规定。最后，创始人或者创始人团队需要与业务部门之间有通畅的沟通渠道，保证互相信息的透明。我在的团队之前出现的问题就是，当创始人抽身出具体事务后，整个业务流程就断裂了，部门之间难以沟通，部门内部的事情常常无人负责。而我提到的这三点，都是需要创始人亲自完成的。 后续只要保证整体业务在顺畅地进行下去，那创始人对业务方面就只需要做指导和决策了。这是大多数的情况，对于比较事儿逼又特别劳模的老板，比如我的前东家锤子的老板，这也是不可接受的。他会过问每个细节，到设计稿上的每个像素和交互动画的每帧速度。 2.关于资金就互联网创业来说，融资作为一项创始人的重要工作是贯穿在公司整个生命周期的。这点不必过多解释，这件工作必须由创始人亲自完成。 而融资之外，创始人要跟团队设计好并且执行好财务规划，这也得创始人亲自完成。在融资时候的计划想完全执行好并不简单，现在的创业项目都特别烧钱，一旦有了失误，即使是很小的错误，也可能瞬间崩盘。 对资金的良好运作其实就是考察创始人的判断、分析和运作能力。融资是拿到钱，财务预算和执行是花钱。未来花多少钱心里有数，才能拿到合理的融资；而拿到钱之后，必须合理地花出去（实际情况中的开支永远不可能预测准确），才能熬到下一轮融资或者公司盈利。 3.关于团队有种说法是，公司的前 100 个人必须有创始人亲自面试。我深表认同。从合伙人到早期员工，他们存在的意义重大，一边要保证工作效率和业务能力，另一边要带动创业氛围、营造愉悦的环境、维持独有的公司文化。平时做事靠谱、谈吐得当、人品过硬，都是缺一不可的。招来一个工作狂，但所有人都讨厌他，对公司的伤害更大。 刚开始的团队自然用不上管理，几个创始人一般都能保证高度一致，事情做得肯定畅快。有问题碰个头立刻就能解决了。但人数多起来之后，就不仅要求创始人们保持高度一致，更要让整个团队的人价值观和工作态度相仿。 要达到这个目的，创始人可能要做几件事： 确保管理团队的人同时有管理业务和管理员工的能力； 与其他创始人和管理团队随时保持信息畅通，大家对公司的整体规划有清晰认识； 亲自面试公司的前 100 个人，从是不是喜欢这个人、我愿不愿意和他共事这些方面考察他； 在团队人数为 100 之内时，始终对每个员工保持关心； 找到或者创造公司文化，确保每个管理层的人都跟你一样理解公司文化。 如果这些事情一件不做，倒也不影响公司正常运行。但等问题的雪球攒大了，到时候要不就崩盘，要不就得大换血，而且后者的结果一般也是崩盘。 4.关于个人形象比较有意思的是，现在互联网媒体和互联网的读者都喜欢鸡汤，所以就对创始人都特别感兴趣。各种 90 后创业达人，身上贴着青春、热血、友情这类日漫的标签，故事读起来不像是科技版，倒像是娱乐版。当然，带来的好处就是如果你年轻又有故事可讲，那可以省下一大笔广告费。 另外，个人形象、个人的工作状态和性格，确实也都会影响整个团队。如果创始人爱发懒，那合伙人就觉得我也可以懒，然后整个团队就会迅速瘫软；如果创始人不修边幅、邋遢，也就没有什么号召力了。 简单来说，保持良好的精神面貌，在行为举止上尽量优于常人，时间久了，自然会发现效果。 5.关于管理创始人往往都不在意自己的时间和事务的管理，在初期自然没什么问题，因为事情确实也不多，耽误的成本也不大。但是随着公司壮大，创始人不可能把事情都掌握在自己手里。要尽快把自己要做的事务分清主次，一方面要释放一些权力和职责给别人，另一方面要认真规划自己的时间和事务。 比如在初期，产品的原型肯定是要跟创始人核对的。但公司壮大之后，不可能每个交互、视觉文档都要给创始人看。不然很可能因为事无巨细地参与细节，既耽误业务本身的推进，又耽误创始人自己手头的事情。 刚才提过了，我之前的老板是要对细节有像素级的把控的，他每天睡眠时间极少，忙碌于各个部门，几乎在兼任四五个部门的 Leader 。在手机发布前后，即使他这样的劳模式老板也会吃不消，所以逐渐开始将大部分产品设计的决策交给别人，效率随之大大提高，当然也偶尔出现大家的判断与他的不太一致，但保证长期有效的沟通，这不算太大的问题。 你看，创始人不是提出一个点子，或者有钱招人，或者比较能扯，就可以胜任的。他要学习、要掌握的东西很多，如果你觉得无法成为这样的人，但还想创业，那就去参加别人的团队吧。","link":"/2015/03/04/%E3%80%90%E8%BD%AC%E3%80%91%E5%88%9B%E5%A7%8B%E4%BA%BA%E5%BA%94%E5%BD%93%E6%98%AF%E4%BB%80%E4%B9%88%E8%A7%92%E8%89%B2%EF%BC%9F/"},{"title":"一个完整的智能合约—区块链上永存的留言","text":"目标：基于以太坊开发一个完整的DAPP应用，实现留言及随机展示留言功能。 技术栈：使用solidity语言的truffle框架，项目模板使用react，前端使用ES6语法。 项目线上地址： http://words.ldsun.com/ 项目代码：https://github.com/flute/blockChainWords 总结：本次从零开发发哦部署上线约耗时六小时，前期在solidity合约开发上费时较多，主要是对其语言特性不了解，后续在react的动画上有些费时，源于对动画的生疏及类库的选择。整个的开发流程比较清晰： 编写、调试合约 编写react前端页面、与合约交互的逻辑、显示逻辑、动画等 部署合约，与前端联调 编译项目，上传代码，配置nginx解析。 补充：整个项目的的实现比较简单，这里不做具体分析，可以git查看，同时参考前几篇文章即可。这里贴一下solidity合约开发中开始的一些“美(错)好(误)想(代)法(码)”： 12345678910111213141516171819202122232425262728293031323334353637383940pragma solidity ^0.4.19;contract SimpleStorage { // 定义存储留言的数据结构 struct Message { string word; // 留言 string time; // 写入时间 } mapping(address =&gt; Message[]) public words; // 以字典形式存储 // 写入留言 function setWord(string s, string t) public { if(words[msg.sender].length==0) { addrArr.push(msg.sender); } words[msg.sender].push(Message({ word: s, time: t })); } // 获取某地址对应的所有留言（获取我的所有留言） function getWordByAddress() public view returns (Message[]) { return words[msg.sender]; } // 随机返回十条留言 function getRandomWord() public view returns (Message[]) { Message[] memory result; for w, i := range words { result.push(w) if(i==9) break; } return result; }} 对solidity熟悉的大佬应该看完几声冷笑。是的，以下是重点！！！： solidity中的字典不支持枚举/遍历 solidity中对外暴露的函数不能返回字典/结构体/数组（简单的数字类型数组除外） 这两点实在是让我觉得solidity很鸡肋？没有了这两个语言特性，使得智能合约的功能复杂度上限制很大，这或许就是没有“杀手级”应用出现的原因之一。不过话说回来，毕竟solidity还很年轻，相信随着时间推进，这门语言会愈加完善健全。 组织喜欢智能合约开发的同志，请加qq交流群 236380268","link":"/2018/03/04/%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E2%80%94%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%8A%E6%B0%B8%E5%AD%98%E7%9A%84%E7%95%99%E8%A8%80/"},{"title":"不减当年","text":"自从上了大学，一直是在食堂吃。周末回家了也是饭来张口，所以也就一年多没做饭了，今天重操旧业，手艺还行哈~可以说不减当年0_0. 晒一下下：","link":"/2014/01/28/%E4%B8%8D%E5%87%8F%E5%BD%93%E5%B9%B4/"},{"title":"为生活中的每一点","text":"为生活中的每一点喜悦——从初级-中级-高级。","link":"/2014/02/28/%E4%B8%BA%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E6%AF%8F%E4%B8%80%E7%82%B9/"},{"title":"久居落魄","text":"今年春节留京了。 其实说个实话，过年那，还真是我们乡下热闹。北京我也不是第一次过年了，原来上高中那会就在北京过了一回，这算是第二回吧。要说这热闹，倒不是人越多越热闹，北京城里边的人多的去了，像我们村也就几百户人，总人口也就千余人吧…但我们热闹在哪呢？我们呀，那真叫过年，大年三十前十天就置办年货。先说说买春联，其实原来都自己家写，差不多每家都有个能写的，那毛笔字写的没话说，只不过现在都有钱了，也不费那力气，买份印的也年味十足。上那集市看一圈，还有现写的，真买的没几个，但都围的一圈一圈的看，我记得上初中那会还看过一个同龄的小孩写呢，那真叫一个赞呢，当时还专门准备了笔准备练呢，结果还是夭折了，现在想来还挺后悔，当时要是建成了，指不定现在变个样呢。这买春联呢，也有讲究，我们乡下的房子不跟楼房似的是一套，连一块，而是分开一间一间的房，一般分为上房(客厅)，厨房，粮食房(粮仓)，还有几个住人的偏房，一般根据阴阳面叫做阴瓦房和阳瓦房，一般一进大院正对的就是上房，其余的房分居两侧，构成一个”三合院”。这其实是中华建筑流传下来的经典布局，这些从古建筑中都能看出来，故宫就是典型的代表。大概了解了院落布局，就该讲讲对联了，上房的一般是说富态人和的，比其他房的条幅要大一点；然后就是厨房的，一般是说美味常驻；还有就是粮食房的，自然是形容年年有余的对联啦，其余的房就比较随便了。剩下的还有一个最重要的对联，那就是大门上贴的，大院的大门，也就是一家的门面了，进了这个门你才能看到院子里面的房，所以大门可是重中之重，乡下经常用一家大门修的美观度衡量一家的经济水平，可见大门上的对联马虎不得。所以大门上的对联那一般得是超大号的加粗字体啦。除了各个房门上的对联呢，一般还会在寝室贴一张”福卧安康”，寓意身体健康，安乐幸福。然后还会在大门前的树上(我们那门前一般都有树)贴一张”出门见喜”。还会在窗户上贴各种窗花，或者是福字之类的，总之，只要你到了一家人家，从没进大门起到进了大门，到处是火红的对联，窗花，那才真的是有气氛。随着人口增多，建筑也逐渐适应，形成现在这样的楼房，记得起的家庭，在防盗门上贴个对联就行了，记不起的甚至都不贴了。所以啊，首先在贴春联上，年味就相差甚远了。 说完了春联，再说说这放烟花炮竹，这个传统的由来我就不多提了，就是为了驱赶年兽而流传下来的。到我们那集市上看看，基本上一半的摊都是卖炮竹的，所以你那家过年没有几圈鞭炮那真不叫过年，一般每家的小孩会自己买点烟花和新奇的玩意。买来了就得天天放，三十晚上每家都要看着电视倒计时放串千响的鞭炮辞旧迎新。反正三十前后一个月，村里几乎炮声不断，这家一个，那家一个。这又让我想起小时候的儿歌，炮竹声中一岁除…在这种气氛中，不由的让人感受到年的欢乐。但到了北京，限放，禁放…当然不是说这样不对，但至少没有了那种年味。 另一个我们热闹的呢就是我们”人多”，像我们那，爷爷奶奶辈的，谁家没有五六个孩子，所以到了我们这一辈，叔，舅，姨的都得有好多，所以表哥表姐，表弟表妹的也不少，一到过年，这一大家族都赶回来聚一快，孩子就得有十来个，想我们家族就走十个小孩，当然也算是望族了。一家族的人挤一块，各个年龄段的都有，吃好吃的，聊天，玩～一般年三十和之后几天都是通宵的玩，记得去年年三十还和姥爷舅舅们刷夜斗地主呢，反正是欢乐无穷。另外我们一个村的人，邻里的都特别亲热，待人都很真诚友善，过年了就串各家的门，都会把你当亲人一样招待，所以整个村子洋溢着温馨热闹的年味。但很多城里的孩子，大多是独生子女，父母有有的是独生的，一个家族也就为数不多的人，过年还一般各过各家的，一家也就三四个人过年，哪里比得上我们的过年欢乐，所以其实有时候替城里的孩子感到惋惜。不过现在农村也开始少生少育了，慢慢也就没有现在的热闹了，而且我们慢慢长大，有的已经成家立业，也不太容易聚在一起了，我们家族的十个孩子，八个已经要么上大学，要么工作，两个已经成家…那种欢乐的日子也不多了。不过幸好我的童年欢乐无比，我很庆幸。 我知道这是趋势，随着社会发展和自己成长的趋势。不过一切还是就这么静静的看着就好，不用叹息他，跟不用去挽留或是变通，享受变化就好~","link":"/2014/02/06/%E4%B9%85%E5%B1%85%E8%90%BD%E9%AD%84/"},{"title":"什么格式图片背景才能透明？","text":"今天ps张图片，设置透明背景并保存jpg格式后，发现并不能显示透明背景。由于之前并没注意，所以特地查了一下。 原来在我们常用图片的格式中，像BMP、JPG格式的图片是不能保存透明信息的,系统会默认为白色背景。GIF格式的图片可以保存透明信息，但GIF格式的图片最多只能有256种颜色，因而只能使用在对图片要求不高的场合。另一种格式：PNG格式，PNG格式的图片支持无损压缩，而且可以很好地保存透明信息。 总结:只有png和gif格式能保存透明信息。其中PNG的透明格式要好些，如果有渐变的透明效果都可以很好的保存下来。GIF格式的图片可以是透明的，不过没有透明效果的。相对图片质量要比PNG差，不过占用的KB大小是比较小的。","link":"/2013/12/03/%E4%BB%80%E4%B9%88%E6%A0%BC%E5%BC%8F%E5%9B%BE%E7%89%87%E8%83%8C%E6%99%AF%E6%89%8D%E8%83%BD%E9%80%8F%E6%98%8E%EF%BC%9F/"},{"title":"从一道菜开始重操旧业——土豆鸡块","text":"闲下来一看，已经四个月没写博客了。 入币圈这么久，这半年多却是最让人“忙”的。忙的记不起更博，虽然中途学了很多新技术，做了几个好菜想要记录，留了一年的辫子也剪成寸头。 正是去年年末，比特币一举达到2w多美元。从那时起，我的微信群、QQ群、小密圈等等爆发式的多了起来，每天微信和qq显示的未读消息都是999+，实际上如果软件支持的话。这个数字可能是9999+。 币圈的信息淹没了我。第一次感到精力完全不够用，每天都有数十个币种、ico在涌来。被信息淹没的后果，不是错过了很多信息，而是开始什么都不看了。是的，每个群，每个公众号都慢慢开始被封印。从一开始的生怕错过一条信息，到后面的无动于衷，中间的转换也是一种经历。 从一个吃瓜码农，到每天账户余额两位数波动。短短的一年，我竟然体验了很多的大起大落。虽然结局比较忧桑，但我却有一丝满足，因为有了这些体验，整个人的世界观价值观有了一次升级。这或许是每个参与到这种“世纪泡沫”中的人都有的体会，一切都是一个轮回，一个泡沫的萌生，高潮，退潮，再次觉醒…能参与到这种泡沫中的人都是“幸福的”，毕竟这种机会少说也是几十年一遇，而一辈子也就几十年。 经历了这么多之后，币圈已经变成常态。生活回归正常。 那么今天的主角登场：土豆鸡块的做法 土豆鸡块算是很实用的家常硬菜，基本是个人都喜欢吃，做法也不算复杂，直接开始把。写完去看IG vs VG九保一思聪战术了。 材料 土豆 鸡块/鸡腿 辣椒、洋葱、红萝卜、木耳…（自选） 葱、姜、蒜、干辣椒（花椒大料选用） 豆瓣酱/火锅底料（选用） 生抽、老抽、料酒（自选）、白糖（自选） 土豆鸡块，当然是土豆和鸡块必不可少，然后葱姜蒜也不可少，生抽老抽必备。其余加的配菜如辣椒、洋葱、红萝卜，以及调味的豆瓣酱、火锅底料都个自由选用。 开搞1、准备食材：食材准备，土豆切块洗净（不洗的话淀粉容易粘锅），鸡肉用开水烫洗，洗净血水。可以用料酒，生抽加调料腌制一会，更加入味。其余食材切好备用； 2、炒鸡肉：开火热锅，倒油。油量根据食材多少自行决定。油七分热时倒入葱、姜、蒜、干辣椒、（火锅底料），炒香后倒入鸡块翻炒，炒至肉变色，倒入老抽给肉上色。期间可加入胡椒粉、豆瓣酱等自选； 3、炒土豆：倒入土豆（胡萝卜等自选）继续翻炒，翻炒2分钟左右； 4、倒水收汁：倒入生抽/适量白糖（后续收汁用，根据个人口味选择咸、甜），倒入白开水没过鸡肉和土豆； 5、加菜提味大火闷煮5分钟左右，这时候土豆和鸡肉已经熟透入味，汤汁也基本见底。这时候加入辣椒洋葱，翻炒一分钟左右，加入鸡精/味精提味。喜欢酸味的可以加入少许醋； 6、出锅。 土豆鸡块的做法也有多种，比如先把土豆炒至金黄捞出等…各个口味不一，感兴趣的自行尝试。以上做法是从母亲学来的祖传做法。 图片没图说的口都干了。 之前做的几次的汇总图，不太全，比较乱…凑合看吧","link":"/2018/08/19/%E4%BB%8E%E4%B8%80%E9%81%93%E8%8F%9C%E5%BC%80%E5%A7%8B%E9%87%8D%E6%93%8D%E6%97%A7%E4%B8%9A%E2%80%94%E2%80%94%E5%9C%9F%E8%B1%86%E9%B8%A1%E5%9D%97/"},{"title":"何人在此","text":"发现现在有些年轻人，看书，看剧，看很多东西，听很多东西。日常表述观点惯用：某某说过，我特别赞同/喜欢某某在哪哪说的什么。遇到事自己没主意时，不先思考下，首先想到的就是去问周边同龄的朋友，或者去网上搜索，然后筛选些自己看着舒服的答案直接拿过来用。这些好像没什么不对。然而自始至终都没有太多的自我思考，大多是嗟来之食。人生来就是一张白纸。就中青少而言白纸又分为多种。一种，就是开头说的这种。在感觉到自己的空白后，在慌张下开始”学习“，这确实是好事，然而吃相太不讲究，遇到的各种观点，只要看着舒服的，拿来就吃，饥不择食，快速的填充自己的世界观。找到自己觉得不错的观点就狼吞虎咽，收藏起来。到头来，说起什么话题，遇到什么问题，确能迅速从藏品中拿出来一个观点回应，来作为行为的指引，实则是别人的观点。而这些观点一般都是供大众消费用的，类鸡汤文。看似很有见地，但却是真真儿的是受人操控，活在大流中的傀儡。这种人我称之为会吸星大法的，大家都知道，在所有武侠小说中，吸星大法都是极为厉害的武功，能让人快速“变强”，却是一门邪门功夫，正派君子不沾。而这种轻而易举就能变强的功夫，确实让大部分人难以抵挡，这也是当前的主流功法。这就像是一个人只知道苹果是吃的，但不知道长什么样子，这时遇到另一个人给他吃了口草莓，并说这是苹果，尝着草莓又甜又软的挺好吃，那他就觉得这是苹果了。因为这确实是吃的，而且挺好吃，就不用再去费劲确认他是不是了。当有人给他真正的苹果时，咬了一口发现没有草莓好吃，他大概率会说这不是苹果，草莓才是苹果。人们更愿意接收自己觉的舒服的观点，而不是去探究自己真正的看法，这毕竟是件费脑的事，而且时长伴随着自我颠覆的痛苦。一种，知其白而任其白，属于心大无脑的。这种就不细说。一种，白而不自知。这个也好理解。一种，称之“半白”。这种人，遇到一个问题，抛给他一个话题，很可能一时半会说不出所以然，需要思考的时间。比起第一种能快速读取丰富档案库的人会显得比较虚。但是会仔细思考自身想法，中途或引经论据，最终得出经过“捯饬”的观点。过程虽然有些费脑辛苦，废了些时间，少了些潇洒，确是自身主观意识为主，即便与主流观念相悖，却也真实可贵。至于那些被大众尊为上等人，为大众提供主流观点的这些人。也是从半白走过来的，属于高等半白。但却被很多人尊为真主一样，一副你说啥就是啥，恨不得把这些人的脑子复印一份过来，这样自己就圆满了。现在好多的综艺节目，为了收视率，多弄着些吸引年轻人眼球的话题。然后各位\"大咖\"各抒己见，这些观点大多是些个人的生活经验和鸡汤掺杂的产物，再加点大众心理学作为佐料，乍听起来都是洗涤心灵的好道理，对于嗷嗷待哺的年青一代，简直是天赐良品。然而既然是综艺，就是以逗乐为主，如果从其中汲取一点点有用的观点并转化为自己的观点，就已然是极好的。可是很多年轻人，把这些节目当做学习课堂，把这些娱乐性质的产物一股脑的直接咽下去吸收。同时表现出吃饱后的满足感。实在是…现在的社会确实让年轻人很焦虑，很躁动，但把脑子交出去却是不明智的。想起《超人：钢铁之躯》中的场景，佐德江军一意孤行，想用宝典来批量造人，孩子的出生由宝典统一生产，就像基因编码一样造出更强的孩子，而超人作为氪星第一个自然生产的孩子，开启了全新剧情…在这个信息爆炸，各种观点满天飞的时代，这些狂吸不止的年轻人，何尝不是思想层面的被基因编码呢，通过左拼右凑构建出来一个世界观，然后在此指引下快乐不自知的生活着，这跟氪星造出来的没有特色的孩子有啥区别。而这些东西还会传染的，物以类聚，人以群分。这些身具吸星大法的人在一起，我在别地儿吸一点，再传给你，双方都会很满足。一个是“知识”的传播者，获得成就感，一个是“知识”的获得者，获得者一般伴随着满足感，所谓知识就是力量。简直比二手烟还上瘾，你一口我一口，大家都是好朋友。相比这种思想混搭的人，看上去头头是道的人，我更愿意接触半白，甚至空白的人。就像中午没吃饭很饿，但宁愿喝一口清面汤，也不会吃被汪星人啃过的肉包子。跟身兼吸星大法的这种人简单相处并无大碍，一旦交集变深就会初现端倪，就会发现他们坚定拥护别人塞过来的观点，并坚信不疑。他们的世界观、爱情观、价值观等等，竟然大多来自一些素未谋面的大龄作者、大V，或娱乐节目，或是同龄的好友，更或者是微博的狗血话题…很少有自己的观念在其中。年纪轻轻的他们，拿着要么是那些比自己年长几十岁的”知名人士“，要么是同龄旁人的观点，并在这些观点的指引下，来度过自己美好的青春。并为年纪轻轻就取得真经而庆幸。实在让人扼腕叹息。生命在于尝试，在于探索，这些尝试的过程或许伴随着痛苦，但却是人生之美。如果自己不去探索，只是按旁人的指引活着，乐趣何在？如果一出生就让你知晓各种精辟的为人处世道理，那走这一遭的乐趣何在？小孩子缺少思考能力，所以常被一股脑的灌输很多东西。但是人年之后，还被一股脑的灌，这就不应该了。这也是中国式教育，从小不引导孩子主动思考，而是被动接受的方式有一定关系。网络上现在很多的”教育课“，喜马拉雅、知乎live等等这些平台上（我不是广告君…），大量的提高情商系列，教做人系列课程，有很多看似很有名气（原谅我读书少没听过）的教授大V的爆款课程。带着期待和好奇的心情，我买了一部分，硬着头皮听完了大部分课程，最终得到的结论就是，这些课程几乎都是非常主观的东西，很少有客观的分析在。其实就是这些人对自己的做人做事方式美颜后的分享，作为参考，这自然是没问题的。但却常冠名以”必听的“，”经典的“的精品课程，受到很多青年人的追捧，把这些东西牢记在心作为自己的处事原则。如果这些讲主得知，很多人在按照自己的指引活着，估计会很有成就感吧。其实这些平台上有很多历史、经济、文学等等方面正儿八经的好课程，但相比学会做一个高情商、会说话的人，这些课显然吸引力不足。读书是好事，信息量充沛也是好事，但在读主观性太强的书，或者在看、听类似的节目时，一定要谨慎这些教做人的东西。所谓读书启迪智慧，启迪只是是启发，是引子，是开头的工作，后续的主要工作需要自己完成。而不是觉得舒服就拿来用了。不要总按照别人看似正确的指引活着，考虑下真实的自我。论还在成长中的青少年们，如何在这股国产泥石流中保持些许清醒🌚","link":"/2019/02/16/%E4%BD%95%E4%BA%BA%E5%9C%A8%E6%AD%A4/"},{"title":"使用加速乐后wordpress后台无法登陆","text":"其实使用加速乐也近两个月了，之前为了提速，也赶潮流用了DNSPOD+加速乐的CDN，速度确实有了不小改观。今天重新登录加速乐看看有没有改版。无意间发现原来虽然使用了加速功能，但只开启了静态资源加速，还有三项：首页加速，目录加速，静态页面加速并未开启，遂逐一开启，结果确是网站后台无法登陆。 想了半天算是想清楚了，其中的目录加速就是针对http://www.ldsun.com/xxxx和http://www.ldsun.com/xxxx/xxx这样的网站目录，对其进行加速并设置一定时间（1小时-1天）的缓存。然而wp的后台登陆路径正是/wp_admin和/wp-login，也就是说这样一来把后台进行了缓存，怪不得登陆不上呢。 怎么解决呢，关闭目录加速？这当然舍不得了，只需在缓存黑名单中加入后台路径wp_admin和wp-login即可，等缓存过了便一切正常。这样一来，不仅加速功能无碍，网站也能正常登陆。只不过发表文章之类的网站修改需等缓存过后才能显示，不过对于个人博客来说也无伤大碍，若是实时性要求较高的网站则不能使用目录缓存了。","link":"/2014/02/20/%E4%BD%BF%E7%94%A8%E5%8A%A0%E9%80%9F%E4%B9%90%E5%90%8Ewordpress%E5%90%8E%E5%8F%B0%E6%97%A0%E6%B3%95%E7%99%BB%E9%99%86/"},{"title":"侧边栏跟随滚动","text":"当一篇文章比较长时，为了获得跟好的用户体验，我们就会考虑，如何为自己的博客设置一个跟随文章滚动的侧边栏，这样还可以使需要推崇的内容得到跟多关注，尤其对于广告展示来说，不失为增加广告展示盒点击量的一个好方法。 首先，我们需要引入jQuery，可以下载最新的jQuery或是直接引用google的API. 本地引入&lt;script type=&quot;text/javascript&quot; src=&quot;jQuery路径&quot;&gt;&lt;/script&gt; 调用google``` ``` 然后可以在footer中引入以下代码： // top) { if (window.XMLHttpRequest) { element.css({ position: \"fixed\", top: 0 }); } else { element.css({ top: scrolls }); } }else { element.css({ position: pos, top: top }); } }); }; return $(this).each(function() { position($(this)); }); };//绑定 $(\"侧边栏容器名，如#ad/.ad\").smartFloat(); // ]]> 最后只需用设定的容器名包住需要跟随滚动的边栏就ok啦。如本例： 边栏跟随 广告代码","link":"/2014/02/14/%E4%BE%A7%E8%BE%B9%E6%A0%8F%E8%B7%9F%E9%9A%8F%E6%BB%9A%E5%8A%A8/"},{"title":"修改WordPress中the_excerpt()函数截取中文的长度","text":"方法一：修改wordpress文件，直接把函数的输出长度改为需要的长度。 这个方法改起来很简单，找到wp-includes下的formatting.php文件，查找function wp_trim_excerpt($text)函数，找到excerpt_length，把相对应的55修改成自己喜欢的数值即可。 这个方法的优点是修改简单，但是缺点也很明显，侵入了wordpress的文件，一旦博客升级这个方法就会失效。 方法二：在主题 functions.php 文件加入： [php] function custom_excerpt_length( $length ) { return 200; } add_filter( ‘excerpt_length’, ‘custom_excerpt_length’, 999 ); [/php]","link":"/2015/01/26/%E4%BF%AE%E6%94%B9WordPress%E4%B8%ADthe-excerpt-%E5%87%BD%E6%95%B0%E6%88%AA%E5%8F%96%E4%B8%AD%E6%96%87%E7%9A%84%E9%95%BF%E5%BA%A6/"},{"title":"免费备案","text":"就在一天前，收到短信通知说本站的备案已经成功~非常高兴，哈哈。。 其实提交备案是一个月前，本来15-20天的备案时间，结果人品太好，刚好遇到网络扫黄打黑，备案平台升级，延迟了十天有余！不过最后备案成功，我也就不多说啥了。至于备案，可能有的人并不看重，但我用的是SAE，不备案不仅慢，还很不稳定。所以一直在考虑备案问题，（话说备案了还能申请几个百度广告0_0）可惜SAE暂时不提供备案（貌似今年底会提供此服务），所以也是干着急，而快速备案一般都上百元，还很不稳定。恰巧看到360免费备案的消息，证实确有此事，但并不是360备案，而是它委托常州五颜六色公司提供免费的备案服务，用户只需付寄回材料的邮费即可，我总共花了30元，基本算是免费备案了。介绍给大家，没备案的可以试试。 注：此教程只适用于个人备案，企业备案会有所不同： 首先联系与360备案有关的某个机房的客服QQ：5285234沟通如下： 提供信息给他后，他给我发了需要准备的材料清单，其实这个清单不看也可以，因为需要的文档和资料他都会寄给你！ 接下来的内容是这样： 注：押金为幕布的押金，如果把他们的幕布搞丢了或坏了，100块钱就没了。。。 链接这里我就不贴了，如果诸位跟他沟通他也会给你们的，这里备案费用不是一共22，因为还有我们寄回给他的邮费（寄回可用任意快递），我一共花了30块，100块钱的押金在他们收到你寄回的东西后就退还到支付宝了。 寄来的材料说明： 1.一张照片的幕布，就是以这张幕布为背景照一张照片。照完后和身份证的扫描件一起QQ传给客服！ 2.两份打印好的材料（核验单和安全责任书），怎么填写客服也会教给你，其中核验单最好是多复印几张只签名不写日期的（我复印了5张。好像是新增域名的时候就不用每次给他们寄这些东西了，责任书只要一份即可） 3.域名证书打印出来一份也放到资料里面去 4.自己准备身份证复印件（正反面）一份。（建议在复印好的身份证上注明，仅供网站备案使用） 接下来就是等待了。对方如果开始备案，会QQ联系你关闭网站。我只关了解析就行了。 客服跟我说20个工作日可以备案完成，由于我人品好，遇到备案平台升级耽误10天，所以减去这十天其实备案用了13天（两周）而已。 祝各位早日备案成功！！！ 360免费备案：http://wangzhan.360.cn/news/show/id/1038","link":"/2014/04/25/%E5%85%8D%E8%B4%B9%E5%A4%87%E6%A1%88/"},{"title":"关于家风","text":"随着马年的到来，又一个热议话题有被提了出来，那就是【家风】。这几天看电视老是能看到中央电视台的记者四处采访，每个被采访的人也多多少少的能说出点自家的家风。 其实第一次看到我就想了，我家的家风是什么，但这么仔细一想，好像还真没有。因为爸妈也没跟我提过家风是什么，跟没有什么明文规定的家规。我就嘀咕，这不能没家风吧……还是有家风我不知道呢？按理说也不会啊，怎么说我也19了，这个家族算是基本继承了，怎么能不知道家风呢。 不过也就这么想着，我也不太敢问爸妈家风是什么，搞不好又训我这么大了还不知道家风是什么。结果今天吃完饭看新闻又出来采访家风的，妈随口就问我了，儿子，你说说咱们家的家风是什么啊，我一下就懵了……弱弱的问了句咋们家有吗，我妈也看出来我不知道，也没批我，跟我说，其实啊，咱们家族的家风虽然没有明文写出来，平时我们做父母的也不给你们说，但其实咱们家的家风贯穿在生活中的方方面面，我们教你待人处世的原则，其实都是咱们加的家风，这些家风我们做父母的身体躬行，也希望你们做子女的牢记在心。我一想也对，家风不就是一个家庭的价值观嘛~爸妈早就把这种价值观糅合在平时的点点滴滴中，我在无形中形成的价值观其实就是传承的家风。 既然提到家风了，我也就一不做二不休，我说，妈，那今天就给列出来吧（以后我传家能有个明确的家风）。我妈也乐了，笑着满口答应了，我也是认认真真的记下来，就算是明文的家风出土啦： 吃亏是福，不贪小便宜； 助人为乐，帮助别人，快乐自己； 常怀感恩的心，滴水之恩，当涌泉相报； 尊重长辈孝敬父母； 有福同享，有难同当； 认真做事，踏实做人； 做一个对国家有贡献，对家庭负责任的人； 尊重别人就是尊重自己； 万事”忍”当头； 一定要做一个善良的人。 (最后两条是我加上去的，但我觉得也是我的家风。) 今天记录下我家的家风，当然自己也得努力继承了，以后再传给下一代，把这个家族的力量信念传承下去。","link":"/2014/02/07/%E5%85%B3%E4%BA%8E%E5%AE%B6%E9%A3%8E/"},{"title":"前端设计字体大全","text":"宋体 SimSun 黑体 SimHei 微软雅黑 Microsoft YaHei 微软正黑体 Microsoft JhengHei 新宋体 NSimSun 新细明体 PMingLiU 细明体 MingLiU 标楷体 DFKai-SB 仿宋 FangSong 楷体 KaiTi 仿宋_GB2312 FangSong_GB2312 楷体_GB2312 KaiTi_GB2312 宋体：SimSuncss中中文字体（font-family）的英文名称 Mac OS的一些： 华文细黑：STHeiti Light [STXihei] 华文黑体：STHeiti 华文楷体：STKaiti 华文宋体：STSong 华文仿宋：STFangsong 俪黑 Pro：LiHei Pro Medium 俪宋 Pro：LiSong Pro Light 标楷体：BiauKai 苹果俪中黑：Apple LiGothic Medium 苹果俪细宋：Apple LiSung Light Windows的一些： 新细明体：PMingLiU 细明体：MingLiU 标楷体：DFKai-SB 黑体：SimHei 新宋体：NSimSun 仿宋：FangSong 楷体：KaiTi 仿宋_GB2312：FangSong_GB2312 楷体_GB2312：KaiTi_GB2312 微软正黑体：Microsoft JhengHei 微软雅黑体：Microsoft YaHei 装Office会生出来的一些： 隶书：LiSu 幼圆：YouYuan 华文细黑：STXihei 华文楷体：STKaiti 华文宋体：STSong 华文中宋：STZhongsong 华文仿宋：STFangsong 方正舒体：FZShuTi 方正姚体：FZYaoti 华文彩云：STCaiyun 华文琥珀：STHupo 华文隶书：STLiti 华文行楷：STXingkai 华文新魏：STXinwei Windows 中的中文字体。 在默认情况下，也就是未自行安装新字体或者Office 等文字处理软件的情况下，Windows 默认提供下列字体： Windows 95/98/98SE 宋体、黑体、楷体_GB2312、仿宋_GB2312 Windows XP/2000/2003/ME/NT 宋体/新宋体、黑体、楷体_GB2312、仿宋_GB2312 (Windows XP SP3 宋体-PUA) Windows Vista/7/2008 宋体/新宋体、黑体、楷体、仿宋、微软雅黑、SimSun-ExtB 那么每种字体能显示那些汉字呢？ Vista 之前的Windows 中宋体/新宋体、黑体支持GBK 1.0 字符集， 楷体_GB2312、仿宋_GB2312 支持GB2312-80 字符集。 （注：Windows 3.X 只能支持GB2312-80 字符集） Vista 及之后的Windows 中宋体/新宋体、黑体、楷体、仿宋、微软雅黑支持GB18030-2000 字符集， SimSun-ExtB 只支持GB18030-2005 字符集扩展B 部分。 下面对字符集进行简单的介绍： GB2312-80 &lt; GBK 1.0 &lt; GB18030-2000 &lt; GB18030-2005 GB2312-80 中的字符数量最少，GB18030-2005 字符数量最多。 GB2312-80 是最早的版本，字符数比较少； GBK 1.0 中的汉字大致与Unicode 1.1 中的汉字数量相同； GB18030-2000 中的汉字大致与Unicode 3.0 中的汉字数量相同，主要增加了扩展A 部分； GB18030-2005 中的汉字大致与Unicode 4.1 中的汉字数量相同，主要增加了扩展B 部分； 由于Unicode 5.2 的发布，估计GB18030 会在近期发布新版本，增加扩展C 部分。 需要说明的是在GB18030 中扩展B 部分并不是强制标准。 如果想查看GB18030 的标准文本，请访问http://www.gb168.cn 中的强标阅读。 如果想了解Unicode 的内容，请访问http://www.unicode.org。 现在纠正网上普遍的一个错误： GB18030-2000 和GB18030-2005 都不支持单字节的欧元符号 与简体中文有关的代吗页如下： 936 gb2312 简体中文(GB2312)————其实是GBK 10008 x-mac-chinesesimp 简体中文(Mac) 20936 x-cp20936 简体中文(GB2312-80) 50227 x-cp50227 简体中文(ISO-2022) 51936 EUC-CN 简体中文(EUC) 52936 hz-gb-2312 简体中文(HZ) 54936 GB18030 简体中文(GB18030) 补充： 使用楷体_GB2312、仿宋_GB2312后，在Windows 7/Vista/2008 中可能不再显示为对应的字体。 这是因为Windows 7/Vista/2008 中有楷体、仿宋，默认情况下没有楷体_GB2312、仿宋_GB2312，字体名称相差“_GB2312”。","link":"/2014/03/18/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E5%AD%97%E4%BD%93%E5%A4%A7%E5%85%A8/"},{"title":"军博一行人等","text":"应近代史老师的要求，我等男女各五六人等前往军事博物馆参观。任务之余，游玩嬉戏，不胜欢喜，却是后话。 先是参观各种作战兵器： 之后是毛主席用兵真如神的史料记载： 午餐过后，一路穿越天安门，然后顺着王府井大街闲逛，最后止于天主教： 随后三人坐在天主教门旁，看着王府井大街的车水马龙，晒着太阳，一起畅谈人生一个半小时。三人同时感叹：人生能像这样，每天晒晒太阳，静静的看着这世界是蛮好的。","link":"/2014/03/21/%E5%86%9B%E5%8D%9A%E4%B8%80%E8%A1%8C%E4%BA%BA%E7%AD%89/"},{"title":"区块链学习 - Golang初始","text":"系统：Ubuntu 16.0.4 安装下载：https://golang.org/dl/ 下载linux对应的版本解压：将源码解压至/usr/localtar -C /usr/local -xzf go1.4.linux-amd64.tar.gz配置环境变量：export PATH=$PATH:/usr/local/go/bin 检测安装：go version go env HelloBlockChain123456789101112cd $HOMEmkdir golang &amp;&amp; cd golangvi index.gopackage mainimport &quot;fmt&quot;func main(){ fmt.Println(&quot;Hello Block Chain&quot;)}:wqgo run index.go package 声明主程序包import 导入第三方依赖包func 申明函数 变量123456789101112131415161718192021222324252627282930var name [type] [=] [value]var number int = 1var str string = &quot;I`m a string&quot;var bools bool = true// 显式指定变量类型时，后续不能修改为其他类型的值var year,month,dayyear,month,day = 2018,1,10// 隐式声明变量时，会根据值自动设置类型，可以通过逗号同时给多个变量赋值first := 1second := 2// 可以使用冒号加等号的简写方式申明变量，等同于隐式声明变量var ( name = &quot;ludis&quot; age int = 18 height length)// height = 18, length = 18// 可以用枚举的方式声明多个不同类型的变量// 当不给变量赋值时，默认继承前面第一个非空变量的值 常量12345678910111213141516171819202122232425262728常量使用const声明const WIDTH = 18const Height int = 18常量声明后不可修改值，其余属性与变量相同const ( num = iota num1 num2 = 233 num3 num4 = iota)// const在声明常量时必须为其赋值// iota为特殊类型，从0开始，每申明一个变量，自身加一，其后未赋值的常量为等于iota// num = 0, num1 = 1, num2 = 233, num3 = 233, num4 = 4如声明a-e分别为0-5，则可简写为：const ( a = iota b c d e) fmt.Printf()123456789101112var num int = 10十进制：fmt.Printf(&quot;%d&quot;, num)八进制：fmt.Printf(&quot;%o&quot;, num)二进制：fmt.Printf(&quot;%b&quot;, num)十六进制：fmt.Printf(&quot;%x&quot;, num)显示地址：fmt.Printf(&quot;%v&quot;, &amp;num)// 十六进制通过`x`及`X`分别输出小写及大写格式，在`x`前附带#会输出十六进制标识`0x`// fmt.Println 及原生 println 输出值后自动换行，fmt.Print需手动换行，原生print方法输出后面带%// `\\n`换行 `\\t`空格// const 声明的常量无法获得地址 go语言中，当引用的包或申明的变量未使用时会报错（厉害了老哥，不让浪费是好事233）","link":"/2018/01/11/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0-Golang%E5%88%9D%E5%A7%8B/"},{"title":"区块链学习 - solidity合约部署","text":"区块链原理通过https://anders.com/blockchain/hash.html可以直观的了解hash、block（区块）、blockchain（区块链）、distributed（分布）、tokens（代币）各个概念。 开发环境配置1、 MetaMask钱包1.MetaMask是什么？ MetaMask是一款在谷歌浏览器Chrome上使用的插件类型的以太坊钱包，该钱包不需要下载，只需要在谷歌浏览器添加对应的扩展程序即可，非常轻量级，使用起来也非常方便。 2.MetaMask安装 chrome浏览器安装MetaMask，直接用MetaMask创建钱包或者通过myetherwallet.com创建钱包，然后用MetaMask导入钱包私钥即可。开发测试时，最好新建一个测试钱包，万一自己的币搞没就裂了~~ 3.MetaMask常用功能 如上图所示，第一个为正式网络，也就是ETH的公链，真实的币就存在公链上。后两个是两个测试网络，点击后便会切换到测试网络，钱包的地址也会随之改变。为了测试方便，在测试网络的钱包中免费获取一些测试用的代币。 4.测试代币获取 在Ropsten Test Network测试网络下，点击BUY-&gt;ROPSTEN TEST FAUCET会跳转到https://faucet.metamask.io/页面，可以请求获取测试用的eth代币，也可以给别人发送测试代币。操作完成后钱包会显示相应的测试代币数量。 在Kovan Test Network测试网络下，获取测试代币的方式是：加入gitter中的faucet组织，链接为https://gitter.im/kovan-testnet/。加入后，MateMask钱包在Kovan Test Network测试网络下，复制当前测试环境下的钱包地址，然后在gitter的社区中，发送自己的钱包地址（@管理员epheph），这位雷锋大兄弟会给你的钱包发送5个测试代币，最后别忘了来句日常感谢~ 2、solidity开发环境配置atom编辑器安装以下两个插件：autocomplete-soliditylanguage-ethereum 3、solidity代码示例solidity代码文件后缀为.sol以下是完整的，最简单的solidity合约代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546// pragam 关键字// solidity 当前语言// 0.4 主版本// .19 副版本// ^向上兼容，solidity （0.4.19~0.4.99）都可以编译，0.5则不能编译pragam solidity ^0.4.19;// construct 关键字声明类contract Person { uint age = 0; // 默认类型为internal string internal name = &quot;佩奇&quot;; string public homeAddress = &quot;北京市朝阳区&quot;; // public声明的属性，会自动生成同名的get函数，返回该属性值 string private company = &quot;孔壹学院&quot;; // 构造函数，与类名同名，首次初始化时调用 function Person() public { age = 18; } // set方法 function setCompany(uint a) public { age = a; } // get方法 function getCompany() view public returns (uint) { return age; } function getCurrentAddres() view public returns (address) { // msg.sender 返回当前操作合约的钱包的地址 return msg.sender; } // 普通函数 function kill() public{ // 析构函数，调用时销毁当前合约 selfdestruct(msg.sender); }}contract ChildPerson is Person { function test() public { age = 100; name = &quot;AWM&quot;; }} solidity代码中一定要加;！！！！！！，包括第一句pragam solidity ^0.4.19; 属性访问权限： public： 1.会生成一个和属性名同名的get函数，这个函数返回属性自己 2.合约内部可直接访问 3.子类可继承属性 internal： 1.合约内部可直接访问in 2.子类可继承属性 private： 1.合约内部可直接访问 4、部署合约 打开http://remix.ethereum.org/网站，url后会自动补齐当前最先版的solidity``sdk版本，注意自己写的代码向上兼容性。 将上述代码直接粘贴到左侧编辑器中，会自动编译查错，正常编译通过后，可以在右侧面板点击run选项。各选项解释如下： Environment指合约要部署的网路环境，JavaScript VM是本地的测试网络；injected Web3是发布到公链。 Account指部署合约的钱包地址，因为部署合约需要往公链上写数据，所以需要消耗代币。选择本地测试网络的话，有默认的五个免费的钱包，里面各有100以太币。选择部署到公链的话，通过选择MateMask的网络环境（主网或两个测试网络），Account会显示对应的网络环境下的钱包地址（钱包中必须要有代币才行） Gas limit和Value默认即可 完后下方可以选择solidity代码中声明的类，也就是我们要部署到网络中的类，对应上述代码就是Person和ChildPerson两个类选择其一。 之后点击create，支付完所需的代币手续费后，等待部署完成即可，部署成功后便可以在下方看到合约的地址信息，及合约中暴露出来的各种方法，如getAge、setAge等，可以调用这些方法从部署在网络上的合约中写入数据（花费代币）及读取数据（免费），调用kill方法时会执行析构函数selfdestruct，从网络中销毁合约。 至此，一个简单的合约，从代码编写到部署上线的整套流程结束。","link":"/2018/02/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0-solidity%E5%90%88%E7%BA%A6%E9%83%A8%E7%BD%B2/"},{"title":"区块链学习-进制、GO运算符","text":"int 与 uint 区别int 表示有符号整数uint 表示无符号整数 1234567int8 -128~127int16 -2^8~2^8...uint8 0~255uint16 0~2^16... 十进制转二进制1. 正整数转二进制 正整数使用二除法，得到的结果倒叙即为该十位数的二进制数 2. 负数转二进制 先得到正数对应的二进制数，然后取反，再加一即为该负数的二进制数 3. 小数转二进制 整数部分+小数点+小数部分 整数部分：按照前面的步骤正常转换 小数部分：小数部分乘2，得到结果的整数部分n，若小数部分不为零，继续上面的步骤。最后得到的n的排列即为小数部分 二进制转十进制1. 正二进制数 正二进制即首位为0的二进制数，转十进制只需每位乘以2的对应次方，然后想加即可。 2. 负二进制数 负二进制数，首先取反，然后按正二进制数计算即可 3. 带小数的二进制数 小数部分每位乘的是2的对应负次方 int8的取值范围解读int8的取值范围是 1111 11110111 1111 ？（-127127）二进制类型分为原码 反码 补码，计算机为了保持数据的可分辨性（正负区别）及消除正零、负零的问题，最终采用补码形式存储数据所以int8的取值范围实际为 1000 0000 ~ 0111 1111（-128~127） 正二进制数: 12反码 = 原码补码 = 原码 负二进制数: 12反码 = 除了符号位，原码取反补码 = 反码+1 二进制转与八进制/十六进制等互转二转八:二进制数从（小数点）向两侧每三位一分，不够三位的在两端用0补齐，然后每三位转为对应的八进制数即可八转二：每位八进制数转为二进制即可 二转n进制/n转二进制二转n: n进制数的最大可显示值对应的二进制位数为m，二转n进制时每m位等分即可n转二: 同八转二 Go语言运算符12345//Go语言中，以下写法错误:var a int = 10println(a++)无++a的写法 注：（以下js/c/java…输出报错） 123var a = 10console.log(++a++)++a 得到的是一个常量，无法为常量进行++运算","link":"/2018/01/12/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0-%E8%BF%9B%E5%88%B6%E3%80%81GO%E8%BF%90%E7%AE%97%E7%AC%A6/"},{"title":"千年一叹","text":"八月的北京，全城依旧是热浪飘荡的时候，每个人都是蒸笼里的包子，不管肉的素的，都在煎熬着。 还好，这两天到是天公作美，些许的雨又洗出了季夏的一派繁华。急景流年，大学的一年已经大踏步的甩在了身后，容不得思考，青春仓促，我急急前行，这或许是为了给耄耋之岁的回忆留点时间，不至于一辈子太过寒酸。 晚上出来在大街上逛逛，什么也不想，方向也是随意的，看人，看车，看灯，看楼，看夜幕下的每一具真实的灵魂……对着这万家灯火，光影流离，真想一直走下去，即使没有方向，没有尽头…… 拿张A4纸，画成9*9的小格，每格代表着自己走过的一年。每走过一年，便在一个小格内做个标记，如果觉得这一年过的充满意义，就画个笑脸，若是觉得庸庸碌碌，则画个哭脸。现在看来，已经是19个刺眼的笑脸，虽然有的笑脸并不那么舒服。但无论如何，四分之一的纸已经被笑脸占据，我韶华的四分之一已经耗尽，而回首过去一切却朦胧又清晰…… 也许时光不需要去叹息，她正因流逝而美，我要做的只是静静的观望，释然的享受，或在骄阳甚嚣的午后，寻一处幽静的去处，捧一杯原味的咖啡，和一位至密的朋友，有一次酣畅的笑谈，这也是世间最幸福快乐的事情……以平和的眼光看待生活，发生和存在一样合理，不管时间对不对，地点对不对，遇到的人对不对，对于我们，都是一种际遇，一种体验……","link":"/2013/12/21/%E5%8D%83%E5%B9%B4%E4%B8%80%E5%8F%B9/"},{"title":"博客搬出SAE","text":"之前选择SAE建站也是奔着SAE对开发者免费去的，时至今日，伴着SAE已走过两个年头，SAE也开始收费了，是时候搬出来了。 因为只是挂个自己的博客，记录点东西而已，不存在访问量爆棚的情况，对性能也没什么要求。所以选择了性价比不错的搬瓦工vps，事实证明确实是个不错的选择，速度相当不错。有需要的朋友可以看看，贴出我买的配置如下,供参考： 以上配置税后是19刀/年（输入优惠吗：IAMSMART5GRNII 立省5%），基本算是全网最优惠的价格了。256M的内存跑Wordpress足够了，还可以挂个VPN也完全吃的消。但跑Wordpress不建议选择128M以下的，毕竟wp还是比较吃内存。之前有考虑过换个轻量的博客，嫌麻烦就没换。 另外说明的是搬瓦工vps现在支持支付宝付款了，算是没有信用卡的朋友的福音。同时机房建议选择美国西海岸的洛杉矶机房，速度会快一些。 主机拿到手后，可以登陆控制面板查看ip，port这些信息，直接ssh连上去配置即可。mac直接终端连接：ssh root@65.48.41.158 -p19341 即ssh username@your ip -pyou port 这里我直接安装LNMP的安装包，详细步骤可移步lnmp官网http://lnmp.org/install.html 。 LNMP环境搭建成功之后，需要创建虚拟主机，详情请访问官网http://lnmp.org/faq/lnmp-vhost-add-howto.html 。这里要注意的一点是。创建虚拟主机的时候需要选择是否开启伪静态规则，建议大家开启。还有关于域名301的问题官网也有详细的介绍http://lnmp.org/faq/lnmp-nginx-301-rewrite.html 。 环境配好之后，访问ip/phpmyadmin设置数据库，为wp新建一个数据库。然后用sftp连接上传Wordpress程序，访问ip后就可以看到安装提示了，填写所需的数据库连接信息就可以成功安装了。 安装完后将从SAE导出的数据库文件导入，将原主题，插件灯上传到相关位置即可。需要注意的是SAE储存文件用的storage，所以需要将storage下载下来，把uploads文件夹上传至wp-contents目录下，这样原来的附件，文件都不会丢失。 至此博客的迁移就结束了，还有一些细节需要调整。再这过程中也遇到一些问题，记录如下： LNMP下设置Wordpress固定链接404 跟之前一样，在wordpress下的设置里的“固定链接”配置页面，自定义链接的结构 “http://www.ldsun.com/%post_id%.html/,保存更改后，只有首页访问正常，其他页面都报404错误。在nginx下解决方法如下： 修改网站域名对应的ngnix配置文件，如本网站的为/usr/local/nginx/conf/vhost/www.ldsun.com.conf 在文件中找到root /wwwroot/www.ldsun.com;在其下粘贴以下代码： 1234567891011if (-f $request_filename/index.html){ rewrite (.*) $1/index.html break; }if (-f $request_filename/index.php){ rewrite (.*) $1/index.php; }if (!-f $request_filename){ rewrite (.*) /index.php; } 保存后重启ngnix：service nginx restart 执行即可。 LNMP下更新/安装插件/主题时提示输入FTP信息 出现这个的问题就是Nginx的执行身份非文件属主身份。 解决方法： 假设你的wordpress安装目录为/home/wwwroot/www.ldsun.com 执行：chown -R www /home/wwwroot/www.ldsun.com/* 执行上面的命令就可以将/home/wwwroot/www.ldsun.com下所有文件的属主改为www，这样就可以解决自动更新必须填FTP的问题。 LNMP下Wordpress主题不可见 登陆后台会发现只显示当前使用的主题，别的主题不显示，解决方法： 服务器里禁用了一个scandir函数，导致wordpress无法缓存主题列表，所以我们无法在wordpress后台看到所有主题，解决方法很简单，在服务器里开启这个scandir函数就可以了。 进入/usr/local/php/etc，修改php.ini，找到disable_functions，删除列表中得scandir。保存，退出，重启nginx即可。","link":"/2015/09/15/%E5%8D%9A%E5%AE%A2%E6%90%AC%E5%87%BASAE/"},{"title":"图床从七牛迁移至腾讯COS","text":"前言（吐槽）： 之前收到邮件，七牛要回收什么测试域名，想着没啥影响。因为我绑定了备案域名。最近突然发现博客好多图片挂了。一看我备案了快五年的域名被取消备案了？？？而且七牛直接把测试域名删了… 我当初注册的就是个人性质博客类网站，五年时间网站一直正常运行，且内容性质从未改变。空壳网站？备案信息不准确？真是睿智 🖕 概览 以下操作在macOS下进行。所有命令的文档请参考qshell命令列表 主要流程： 下载七牛中的所有资源，上传至腾讯COS。由于七牛的测试域名已失效，原空间的资源无法直接下载，所以先新建一个空间（新空间测试域名30天有效期），将旧空间的资源全部转移至新空间，然后从新空间下载所有资源。 一、七牛资源从就空间转移至新空间1、下载七牛的命令行工具qshell 2、解压、重命名、赋予qshell运行权限 前往目录 1cd /Users/ludis/Downloads/qshell-v2.3.4 &amp;&amp; ll 12345678➜ qshell-v2.3.4 lltotal 135824-rwxr-xr-x@ 1 ludis staff 14M Dec 4 16:19 qshell_darwin_x64-rwxr-xr-x@ 1 ludis staff 14M Dec 4 16:19 qshell_linux_x64-rwxr-xr-x@ 1 ludis staff 12M Dec 4 16:19 qshell_linux_x86-rwxr-xr-x@ 1 ludis staff 14M Dec 4 16:19 qshell_windows_x64.exe-rwxr-xr-x@ 1 ludis staff 12M Dec 4 16:19 qshell_windows_x86.exe➜ qshell-v2.3.4 重命名（可选） 1mv qshell_darwin_x64 qshell 设置权限 1chmod +x qshell 3、添加七牛账号 前往七牛 -&gt; 个人中心 -&gt; 密钥管理。查看AK、SK。 ./qshell account [AK] [SK] [账户名(邮箱即可)] 4、导出已过期的bucket空间所有文件信息。 qshell listbucket A -o A.list.txt （A为空间名） 5、新建一个空间B，用于将已过期的A空间中的所有文件，转移至新的空间B。（新空间的域名30天有效）注意A、B空间需要在相同的地区才可以。 6、使用awk工具，将A空间的文件列表进行格式化。Mac下自带awk工具，其余平台自行安装。 此时A.list.txt中的内容格式如下： 123456...images/react.png 340793 FoVpVxc12JXJawT0UdkRs7bHm3MS 15192693058673770 image/png 0 images/watermark.png 11567 FirWtot1NJVL-0bU-9VoN4yeQyLu 15192728052402421 image/png 0 postbg.jpg 105210 FlBqtLeiA1kTiQxRUSSapLep1utC 15185150032696840 image/jpeg 0 postcover.jpg 47446 Fltqi_cmpz09x8PV4y1yGYwqW_lr 15185152316033806 image/jpeg 0 ... 使用awk命令格式化 12touch list.txtawk '{print $1}' A.list.txt &gt; list.txt 这个命令意思是将A.list.txt文件中每行的第一个字段（文件名）分离出来，输出到list.txt文件中。 对应的list.txt格式如下: 1234567...images/postbg.jpgimages/react.pngimages/watermark.pngpostbg.jpg 105210postcover.jpg... 7、使用命令将A空间中的所有资源批量转移至新空间B中： 12➜ qshell-v2.3.4 ./qshell batchcopy A B -i list.txt&lt;DANGER&gt; Input hejhbd to confirm operation: hejhbd 根据提示输入字符串即可，次数刷新B空间即可看到，所有A空间的内容已经转移到B空间。 二、从七牛批量下载资源1、创建下载用的配置文件batch_download.conf 123456789101112131415{ // dest_dir 文件储存路径-全路径 &quot;dest_dir&quot; : &quot;/Users/ludis/Downloads/qshell-v2.3.4/downloads/B&quot;, // 新建的空间名-B &quot;bucket&quot; : &quot;B&quot;, &quot;prefix&quot; : &quot;&quot;, &quot;suffixes&quot; : &quot;&quot;, // B空间的测试域名 &quot;cdn_domain&quot; : &quot;http://pji27eyb0.bkt.clouddn.com&quot;, &quot;referer&quot; : &quot;&quot;, &quot;log_file&quot; : &quot;download.log&quot;, &quot;log_level&quot; : &quot;info&quot;, &quot;log_rotate&quot; : 1, &quot;log_stdout&quot; : false} 2、下载文件 执行./qshell qdownload -c 10 batch_download.conf。其中-c 10表示可以同时下载10个文件。 1234567891011121314➜ qshell-v2.3.4 ./qshell qdownload -c 10 batch_download.confWriting download log to file download.logDownloading 2018-09-26-a0KAWoB.jpg [1/76, 1.3%] ...Downloading 2018-10-14-15382027090950.jpg [2/76, 2.6%] ...Downloading 2018-10-14-15394888949656.jpg [3/76, 3.9%] ...Downloading 2018-10-14-15394889958531.jpg [4/76, 5.3%] ...Downloading 2018-10-14-15394901705197.jpg [5/76, 6.6%] ......Downloading postbg.jpg [75/76, 98.7%] ...Downloading postcover.jpg [76/76, 100.0%] ...See download log at path download.log➜ qshell-v2.3.4 三、上传文件至腾讯COS此处省略100字，自行注册腾讯云，创建存储空间。设置空间权限为“公有读私有写”。 上传资源可以使用网页端或者下载工具。 四、旧资源链接替换/重定向将资源上传至腾讯COS后，需要将原博客中失效的七牛链接替换为腾讯COS中的链接。不同系统的博客请自行传泽替换方案。替换.md文件中的域名，或从数据库查询替换… 五、图片处理（水印）七牛空间存储的图片，可以创建图片处理规则，添加水印、缩放等比较方便。然而在腾讯COS存储中没有找到相关配置项。 搜索发现，腾讯的图片处理，统一使用“数据万象”这个单独的应用。在COS创建完存储空间；然后在“数据万象”创建自定义的图片处理规则，并绑定COS存储空间的Bucket即可。且有个优点是可以使用别名代替处理规则，以及可以使用-(中划线) _(下划线) /(斜杠) !(感叹号)四中分割符号。 例如： 图片链接： https://233.com/666.png 如创建的图片规则为： imageMogr2/interlace/0|watermark/1/image/aHR0cDovL3dhdGVybWFyay1iai0xMjUyMTA2MjExLnBpY2JqLm15cWNsb3VkLmNvbS9sdWRpcy0... 别名为： imgRule 以七牛的尿性图片添加完规则变成： https://233.com/666.png?imageMogr2/interlace/0|watermark/1/image/aHR0cDovL3dhdGVybWFyay1iai0xMjUyMTA2MjExLnBpY2JqLm15cWNsb3VkLmNvbS9sdWRpcy0... 👎 腾讯云则很优雅： https://233.com/666.png!imgRule 👏 参考","link":"/2018/12/13/%E5%9B%BE%E5%BA%8A%E4%BB%8E%E4%B8%83%E7%89%9B%E8%BF%81%E7%A7%BB%E8%87%B3%E8%85%BE%E8%AE%AFCOS/"},{"title":"基于Raspberry Pi B+和yeelink的远程监控","text":"Raspberry Pi B+（树莓派）？yeelink?Raspberry Pi(中文名为“树莓派”,简写为RPi，或者RasPi/RPi)是为学生计算机编程教育而设计，只有信用卡大小的卡片式电脑，其系统基于Linux。自问世以来，受众多计算机发烧友和创客的追捧，曾经一“派”难求。别看其外表“娇小”，内“心”却很强大，视频、音频等功能通通皆有，可谓是“麻雀虽小，五脏俱全”。 Yeelink——中国最大的物联网云平台,提供传感器云服务; 并通过实时数据处理, 提供安全可靠的状态监控。 需要的设备 树莓派主板*1。有B和B+两个版本，B+为最新的版本，新增两个USB接口，GPIO由26个端口增加到40个，而且体积更小，两个板子我都用过，感受自然是买升级版B+更值得。现在市场价也就300左右，性价比较高。 摄像头*1。可以用USB摄像头，我选择的是树莓派专用摄像头，Sparkfun原装Raspberry Pi Camera，500w像素，售价199RMB，使用很方便，值得购买。 面包板/扩展板*1。如果只是做简单的控制LED灯、远程监控的话，面包板就够了，想实现更多功能的话建议购买扩展板，这里我选择的是DVK511扩展板一套，包括一套组件，基本上够用了，一整套约300元左右，只单买一个扩展板的话100左右。同时我购买了面包板一个，和扩展板配合使用。 LED灯若干，如果买了扩展板的话就不需要了。 跳线若干。 yeelink账号一个。 配置树莓派1.写入系统文件：拿到树莓派后需要给SD卡内写入系统，然后插到树莓派开机即可。一般树莓派主板会附带光盘，内有系统文件，用写入文件写入即可，事实上很多运营商已经将文件写好了，插卡就直接能用。如果什么都没有的话，可以自行到官网下载系统镜像，然后用Win32 Disk Imager等写入软件即可，比较简单，就不多说了，有问题的多百度。 2.输入输出设备：树莓派说白了其实就是个小型主机，装的Linux系统，开机后可选择进入图形界面（命令界面输入startx即可），可以插鼠标键盘操作，同时可以连接显示器显示系统界面，构成一个完整的操作系统。 当然有这些资源更好，但不必为了树莓派单独买一套键盘鼠标以及显示器，除非确实有需要或者你是土豪。 如果没有显示器，键盘鼠标也可以正常使用，用你的电脑远程ssh连接树莓派即可，这样就可以正常输入了，也能显示树莓派的桌面。如何连接？ 3.树莓派要实现云端控制，需要联网，有线无线都行，为方便起见我为树莓派配置一个USB无线网卡。如何设置？ 远程监控这时你的树莓派已经配置完成，可以正常键盘输入，可以上网。 1.申请一个yeelink账号。 2.添加新的设备 添加传感器 3.获取自己的API key和 传感器的url 查看图像传感器的URL 查看用户的API KEY 3.采集图片 摄像头使用说明，在终端输入raspistill -o image.jpg即可能够捕捉图片，并保存为image.jpg。结合yeelink提供的API接口即可将图片传至云端，然后用手机实时查看。 yeelink API: 这里格式是 curl --request POST --data-binary @&quot;/home/pi/image.jpg&quot; --header &quot;U-ApiKey&quot; url 其中ApiKey和URL以上边介绍的方法来获取。 接着我们建立一个脚本文件 nano camera.sh 增加内容: [php]#yeelink只允许上传1M一下的图片，需要设置下图片长宽，控制大小 raspistill -o image.jpg -w 640 -h 480 curl –request POST –data-binary @”/home/pi/image.jpg” –header “U-ApiKey:11245455*******” http://api.yeelink.net/v1.0/device/***********[/php] （ApiKey和url是利用上边在yeelink中查到具体信息），然后ctrl+o保存，ctrl+x退出编辑。 为脚本增加定时任务： 终端输入：crontab -e 增加下边的代码 */1 * * * * /home/pi/camera.sh 脚本将以每一分钟一次采集并上传到云平台（注意空格）。 4.查看成果 这时就可以在云平台上查看采集到的图像了，也可以下载APP查看。","link":"/2014/11/19/%E5%9F%BA%E4%BA%8ERaspberry-Pi-B-%E5%92%8Cyeelink%E7%9A%84%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7/"},{"title":"基于React+truffle的完整智能合约构建","text":"内容：使用solidity的truffle框架开发智能合约，前端使用react框架，最终完成智能合约从前端到后端，从开发到部署的完整流程。 1、truffle安装在nodejs安装完成的环境下，全局安装truffle：cnpm i -g truffle。 Truffle Boxes是truffle框架集成的脚手架工具，可以使用这个脚手架快捷的生成完备的DAPP的项目结构，其中集成了前端视图、编译压缩工具等。可以在http://truffleframework.com/boxes/中查看并选择合适的模板来进行项目初始化。 2、项目初始化这里我在http://truffleframework.com/boxes/上选择react模板来开发DAPP，直接在终端执行truffle unbox React即可完成项目的初始化，期间需要安装nodejs依赖，耐心等待即可（都没个安装进度提示，差评！）。 12345ludis@MacBook -&gt; ~/Desktop/golang -&gt; mkdir truffle &amp;&amp; cd truffleludis@MacBook -&gt; ~/Desktop/golang/truffle -&gt; truffle unbox ReactDownloading...Unpacking...Setting up... 项目初始化完成之后，目录结构如下： 12345678910111213141516171819202122232425262728293031323334353637383940.├── box-img-lg.png├── box-img-sm.png├── config│ ├── env.js│ ├── jest│ ├── paths.js│ ├── polyfills.js│ ├── webpack.config.dev.js│ └── webpack.config.prod.js├── contracts│ ├── Migrations.sol│ └── SimpleStorage.sol├── migrations│ ├── 1_initial_migration.js│ └── 2_deploy_contracts.js├── package.json├── public│ ├── favicon.ico│ └── index.html├── scripts│ ├── build.js│ ├── start.js│ └── test.js├── src│ ├── App.css│ ├── App.js│ ├── App.test.js│ ├── css│ ├── fonts│ ├── index.css│ ├── index.js│ └── utils├── test│ ├── TestSimpleStorage.sol│ └── simplestorage.js├── tmp-8766pK0xGOxZkgsX│ └── box├── truffle-config.js└── truffle.js contracts和migrations文件夹上篇已经介绍过，分别为solidity合约文件及相应配置文件。 src目录下是react前端代码。 3、合约编写、编译和部署在项目初始化完成后，有一个默认的合约示例SimpleStorage.sol，我们直接用这个示例做测试： 12345678910111213pragma solidity ^0.4.18;contract SimpleStorage { uint storedData; function set(uint x) public { storedData = x; } function get() public view returns (uint) { return storedData; }} 这个合约代码是最简单的读和写两个操作，也是最基础最常用的操作。 编译过程非常简单，在项目根目录下执行truffle compile即可，会在根目录生成build编译目录。这里的编译与部署合约无关，只是为了后续前端代码的调用。 接着将合约部署到以太坊网络上，同理，可以选择部署到正式网络/测试网络/本地，这里我们选择测试网络，部署过程详见区块链学习 - solidity合约部署，小狐狸选择测试网络，将代码粘贴至左侧编辑器，右侧选择对应选项后即可部署成功，部署成功后我们便能得到部署的十六位的合约地址，以我部署的地址0x2dc69582315624fba54ae69655abea27fd48468e为例。 4、前端与合约交互上步部署完合约后，需要将合约地址记下，后续对合约的所有操作都需要通过合约地址进行。 src目录下便是react的前端代码，index.js作为入口文件： 123456789import React from 'react'import ReactDOM from 'react-dom'import App from './App'ReactDOM.render( &lt;App /&gt;, document.getElementById('root')); 可以看到index.js中将App.js作为主组件引入，打开App.js，头部引用为： 123import React, { Component } from 'react'import SimpleStorageContract from '../build/contracts/SimpleStorage.json'import getWeb3 from './utils/getWeb3' 通过头部引用可以看出前端与合约交互的流程： 首先前端使用了react框架； 第二句import SimpleStorageContract from '../build/contracts/SimpleStorage.json'导入的实际上是上步合约代码编译后产生的json文件，该文件中包含两个重要信息：一个是abi字段，通俗讲就是合约代码编译后产生的二进制接口，其中会声明合约代码暴露的可供调用的接口；另一个是bytecode字段，为合约代码的十六进制码。通过这两个重要信息就可以对一个合约进行相应操作。 导入了web3.js，web3.js是以太坊提供的一个JavaScript库，他封装了以太坊的JSON RPC API，提供了一系列与区块链交互的JavaScript对象和函数，包括查看网络状态，查看本地账户、查看交易和区块、发送交易、编译/部署智能合约、调用智能合约等，其中最重要的就是与智能合约交互的API。 明白了前端与合约交互的原理，剩下来的就是使用react语法结合web3.js提供的接口对合约操作即可。 将App.js文件进行一些修改，实现：在网页输入框中输入值，点击确定后可以修改合约中的值（写操作），写入成功后读取合约中的新值，并自动显示到网页（读操作）,也就是通过前端网页对上述合约中定义的的set()和get()两个方法的调用。 最终App.js如下，主要修改分以下几点: 将部署完成的合约地址作为变量contractAddress保存，以供后续调用合约使用。 声明simpleStorageInstance变量，作用是通过合约地址得到合约实例后将合约实例保存起来，方便后续调用。 添加输入框及按钮，点击按钮时读取输入框的值，通过合约实例及web3提供的方法修改合约中的storedData值。 使用Promise语法，当写操作成功后，执行读操作，并在读取成功后，修改react的组件状态state中的变量值，使前端显示自动更新 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123import React, { Component } from 'react'import SimpleStorageContract from '../build/contracts/SimpleStorage.json'import getWeb3 from './utils/getWeb3'import './css/oswald.css'import './css/open-sans.css'import './css/pure-min.css'import './App.css'const contractAddress = &quot;0x2dc69582315624fba54ae69655abea27fd48468e&quot;; // 合约地址var simpleStorageInstance; // 合约实例class App extends Component { constructor(props) { super(props) this.state = { storageValue: 0, web3: null } } componentWillMount() { // Get network provider and web3 instance. // See utils/getWeb3 for more info. getWeb3 .then(results =&gt; { this.setState({ web3: results.web3 }) // Instantiate contract once web3 provided. this.instantiateContract() }) .catch(() =&gt; { console.log('Error finding web3.') }) } instantiateContract() { /* * SMART CONTRACT EXAMPLE * * Normally these functions would be called in the context of a * state management library, but for convenience I've placed them here. */ const contract = require('truffle-contract') const simpleStorage = contract(SimpleStorageContract) simpleStorage.setProvider(this.state.web3.currentProvider) // Declaring this for later so we can chain functions on SimpleStorage. // Get accounts. this.state.web3.eth.getAccounts((error, accounts) =&gt; { // 获取合约地址获取合约实例并保存 simpleStorage.at(contractAddress).then((instance) =&gt; { simpleStorageInstance = instance // Stores a given value, 5 by default. // return simpleStorageInstance.set(5, {from: accounts[0]}) return; }).then((result) =&gt; { // Get the value from the contract to prove it worked. return simpleStorageInstance.get.call(accounts[0]) }).then((result) =&gt; { // Update state with the result. console.log(result); return this.setState({ storageValue: result.c[0] }) }) }) } render() { return ( &lt;div className=&quot;App&quot;&gt; &lt;nav className=&quot;navbar pure-menu pure-menu-horizontal&quot;&gt; &lt;a href=&quot;#&quot; className=&quot;pure-menu-heading pure-menu-link&quot;&gt;Truffle Box&lt;/a&gt; &lt;/nav&gt; &lt;main className=&quot;container&quot;&gt; &lt;div className=&quot;pure-g&quot;&gt; &lt;div className=&quot;pure-u-1-1&quot;&gt; &lt;h1&gt;Good to Go!&lt;/h1&gt; &lt;p&gt;Your Truffle Box is installed and ready.&lt;/p&gt; &lt;h2&gt;Smart Contract Example&lt;/h2&gt; &lt;p&gt;If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).&lt;/p&gt; &lt;p&gt;Try changing the value stored on &lt;strong&gt;line 59&lt;/strong&gt; of App.js.&lt;/p&gt; &lt;p&gt;The stored value is: {this.state.storageValue}&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/main&gt; &lt;input ref=&quot;myvalue&quot; className=&quot;myinput&quot;/&gt; &lt;button className=&quot;mybutton&quot; onClick={() =&gt; { var num = Number(this.refs.myvalue.value); console.log(&quot;点击了button&quot;); console.log(num); simpleStorageInstance.set(num, {from: this.state.web3.eth.accounts[0]}).then(() =&gt; { console.log(&quot;数据修改成功&quot;); simpleStorageInstance.get.call(this.state.web3.eth.accounts[0]).then((result) =&gt; { console.log(&quot;数据读取成功&quot;); console.log(result); // 修改状态变量的值，在react中，一旦状态变量的值发生变化，就会调用render函数重新渲染UI this.setState({ storageValue: result.c[0] }) }); }) }} style={{height: 40,marginLeft: 50}}&gt;修改合约数据&lt;/button&gt; &lt;/div&gt; ); }}export default App 5、启动项目，查看效果启动本地的react项目，直接终端执行npm start即可。会用node在本地启一个3000端口的服务，浏览器会自动跳转到http://localhost:3000，就会显示react编写的前端页面，在输入框修改相应数值，点击确定，然后小狐狸会弹出支付提示（记得小狐狸切换到测试网络）（所有的写操作均需要支付手续费），确认支付后耐心等待被打包成功，就能看到网页上数值的变化了。 6、总结一个完整的覆盖前后端的DAPP实际上就两点，跟传统互联网项目的前后端类似： 合约编写、部署 前端调用 基于以太坊开发DAPP实际上比较简单，重点是在合约的逻辑性、安全性上。从这也可以看出来以太坊生态的强大和完整，便捷完备的开发语言、工具，确实是目前继大饼之后最牛的项目。","link":"/2018/02/22/%E5%9F%BA%E4%BA%8EReact-truffle%E7%9A%84%E5%AE%8C%E6%95%B4%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%9E%84%E5%BB%BA/"},{"title":"基于express的复杂应用——代码结构分层","text":"项目之初，我一般选择用 express 的脚手架工具 express-generator 生成目录结构，比较快捷，生成的文件结构也比较直观。 12npm install express-generator -g // 全局安装 express -e myapp // 创建工程，生成目录，使用ejs作为模板语言 生成的目录结构如下： 123456789101112131415├── app.js├── bin│ └── www├── package.json├── public│ ├── images│ ├── javascripts│ └── stylesheets├── routes│ ├── index.js│ └── users.js└── views ├── error.ejs ├── index.ejs └── layout.ejs app.js 作为入口文件 public 存放静态资源 routes 存放路由文件 views 模板 对于功能比较 单一/复杂度较低 的应用，我们只需要增加一个 models 文件夹，将逻辑与数据操作封装后放置其中，然后在路由文件中引入即可，如： 1234567891011routes/index.js:const getIndexlists = require('../modals/getIndexlists');app.get('/list', function(req, res) { getIndexlists(req, function(err, result){ // 向models中模块传递参数，利用回调函数得到结果,然后操作res if(!err) res.render('list', result) .... })}); models/getIndexlists.js 1234567891011121314151617181920const mysql = require('mysql'); const conf = require('../conf/db.js'); // 连接数据库const pool = mysql.createPool( conf.mysql );module.exports = function(req, callback){ let id = req.params.id; pool.getConnection(function(err, connection){ if(err){ callback(err); return; } connection.query('select * from list where id='+&quot;id&quot;,function(err, result){ // 得到结果后回调 callback(err, result) }); //释放连接 connection.release(); })} 这时的项目结构长这样： 1234567891011121314├── app.js├── bin│ └── www├── package.json├── public│ ├── images│ ├── javascripts│ └── stylesheets├── routes│ └── index.js├── models│ └── getIndexlists.js└── views └── list 对于路由较为简单，功能较少的应用，这样分离路由与数据操作已经够用了。但是我们会发现，上述的示例中，路由直接传递参数给 model，model 与进项数据操作后直接返回结果给 route，然后 route 直接拿数据渲染 view 模板。然而通常我们拿到数据后需要对数据进行一系列的处理，或者是进行多个表的数据操作，将结果整合，从而得到我们期待的数据结构。那么这些操作我们应该放在那里呢，放在 model 中明显不合理，因为这明显不与数据库操作挂钩，那么放在 route 文件中呢？看着好像还可以。 这时我们的 route 文件大概是这样： routes/index.js 12345678910111213141516171819202122232425262728293031323334const async = require('async'); const getIndexlists = require('../modals/getIndexlists'), getUserInfo = require('../modals/getIndexlists')， ...;app.get('/list', function(req, res) { // 多任务 async.parallel({ list: function(callback){ getIndexlists(req, function(err, result){ // 拿到数据，进行格式处理后返回 result.data = result.data.map(function(item){ return item+1; }) ..... callback(err, result) }) }, user: function(){ getUserInfo(req, function(err, result){ ....数据处理 ....数据处理 callback(err, result) }) } ...其余操作 }, function(err, result){ //最终返回结果 if(!err){ res.render('list', result); } }) }); 这时候我们的路由文件实际上已经变的臃肿了，不仅处理路由信息，还要处理多任务数据操作及数据格式问题，这样的形式写的再多一点，route 文件就很混乱了。这时候我们就会想把（任务处理、数据处理）逻辑处理给抽出来，放到 services 文件夹中，形成 route-service-model 的结构，route 负责单一的路由处理，service 负责逻辑处理，model 负责数据访问。这样每个文件各司其职，代码结构就会比较清晰。将 service 抽离出来的另一个好处是——可复用性，实际上很多数据处理的格式相同，我们可以把这些相同的操作封装到一个 service 文件中，在需要的地方直接调用即可，同理，对于 model 中的数据操作，我们也可以将常用的增删改查操作封装起来，提高代码的复用性。 这时我们的代码结构长这样： 12345678910111213141516├── app.js├── bin│ └── www├── package.json├── public│ ├── images│ ├── javascripts│ └── stylesheets├── routes│ └── index.js├── models│ └── getIndexlists.js├── services│ └── dealListData.js└── views └── list 到此为止，我们的代码结构已经很清晰了，基本实现了高复用，低耦合的理念。 那么当我们的应用进一步复杂，我们的系统可能有好多功能模块，几十个路由，这时候出现的问题就是路由文件泰国庞大，所有的路由都集中在一个路由文件中，阅读调试起来相当不便。这是我们会想到将路由进行二级分化，主路由进行大方向的路由控制，将同一功能模块（路由相似）的路由集中到一个路由文件中。我们把自路由控制文件放置于 controller 文件夹中，这样路由的控制实际是 route-controller 这样的二次处理，减轻了主路由的负担，提高代码的可维护性与可读性。 到此为止，我们的express应用的运行流程是：route-controller-service-model 这样，即便是复杂的 express 应用，也会分解的条理清晰。当然在实际项目中我们还需要日志显示，那么我们最终的项目结构因该是长这样： 12345678910111213141516171819202122232425262728293031323334353637383940414243.├── app.js├── bin│ └── www├── conf│ ├── db.js│ └── log.js├── controllers│ ├── indexController.js│ ├── homeController.js│ ├── userController.js│ ├── pageController.js│ └── resultController.js├── logs├── models│ ├── analyze.js│ ├── create.js│ ├── list.js│ └── result.js├── package.json├── public│ ├── fonts│ ├── images│ ├── javascripts│ ├── stylesheets│ └── uploads├── routes│ └── index.js├── service│ ├── delResult.js│ ├── delUser.js│ ├── getAnalyze.js│ ├── getIndexLists.js│ ├── mysql.js│ ├── publishArticle.js│ ├── ssoLogin.js│ └── upload.js└── views ├── index ├── home ├── user ├── page └── common 经验之谈，说的不对的地方，望大家指正。 附：创建二级路由express.Router可使用express.Router类创建模块化、可挂载的路由句柄。Router实例是一个完整的中间件和路由系统，因此常称其为一个 “mini-app”。 下面的实例程序创建了一个二级路由模块，定义了一些路由，并且将它们挂载至应用的主路由上。 二级路由controllers/birds.js内容如下： 12345678910111213var express = require('express'); var router = express.Router();// 定义网站主页的路由router.get('/', function(req, res) { res.send('Birds home page');});// 定义 about 页面的路由router.get('/about', function(req, res) { res.send('About birds');});module.exports = router; 主路由routes/index.js内容： 123var birds = require('./birds'); ...app.use('/birds', birds); 应用即可处理发自/birds和/birds/about的请求。","link":"/2017/05/16/%E5%9F%BA%E4%BA%8Eexpress%E7%9A%84%E5%A4%8D%E6%9D%82%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84%E5%88%86%E5%B1%82/"},{"title":"基于nodejs的问卷调查系统","text":"花了4天时间撸了一个问卷调查系统，算是入门nodejs后端开发。 github传送门：https://github.com/flute/survey 技术 后端：nodejs+express+mysql 前端：material design install npm install 配置数据库 conf/db.js ，导入sql文件 mysql.sql node app.js 功能 登陆验证 问题类型包括 单选、多选及问答三类 查看问卷列表、删除 填写提交问卷 问卷结果列表及结果详情 注：在系统实现过程中，数据表的设计及数据操作有些麻烦，感兴趣的往下看： 为了问卷结果的可读性及统计方便，数据表设计时将 问卷、问题、选项 分为三个表，在插入、读取问卷时，需要顺序、批量进行数据库操作。 如：新增1个问卷，该问卷有10个问题，单选及多选问题包含2个以上的选项。 那么数据操作顺序是： 先插入问卷，并得到返回的问卷ID。 得到问卷ID，按顺序插入10个问题，每个问题在插入成功后，返回问题ID。 每个问题插入成功时得到问题ID，按顺序插入该问题的多个选项，只有当该问题及问题选项全部插入成功时，开始执行下个问题。 可以看到3是2中的内部循环，2本身是个循环，1和2是顺序执行关系。对于这样的数据插入，如果用常规的嵌套回调，光一个问题就是三层以上的嵌套，几十个问题的话就没法玩了。而且所有的操作只需要一个返回结果，及最终成功与否，只要当其中任何一次插入失败则失败。 最终实现方法是使用async.eachSeries，以下代码实现上述问题： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980insertSurvey: function (data,callback) { //从mysql连接池获取连接 pool.getConnection(function(err,connection){ if( err ){ callback(err); return; } connection.query( &quot;insert into t_survey(... , ... ,...) values(..., ...)&quot;, function(err,res){ if(res){ //问卷插入成功 var surveyId = res.insertId; //异步批量按序插入问题 //拼接sql数组 {...} /** * insertQuestionSql 是插入问题的语句数组 * * insertQuestionSql = [ * insert into t_survey_question(createAt,type,.....) values(... ,.. , ...), * insert into t_survey_question(createAt,type,.....) values(... ,.. , ...), * ..... * ]; */ async.eachSeries( insertQuestionSql, function(item,questioncb){ connection.query( item.survey, function(err, results) { if(err) { questioncb(err,result); }else{ //问题插入成功，继续插入选项 var questionId = results.insertId; //如果是单选或多选，存在多个选项，异步批量按序插入选项 //拼接sql数组 {...} /** * insertOptionSql 是需要插入的选项数组 * * insertOptionSql = [ * insert into t_survey_option(createAt,type,.....) values(... ,.. , ...), * insert into t_survey_option(createAt,type,.....) values(... ,.. , ...), * ..... * ]; */ if( item.data.type == 'radio' || item.data.type == 'checkbox' ){ async.eachSeries( insertOptionSql, function( optionitem, optioncb ){ connection.query( optionitem, function( operror,opresult){ if(operror){ optioncb(operror,opresult); }else{ //选项插入成功 optioncb( opresult.insertId ); } }); },function(err){ //当前问题的所有选项插入结束 if(err){ callback(err); }else{ callback(); } }); }else{ //问答无选项，直接回调 questioncb(); } } }); },function(err) { //所有问题插入结束 callback(err); }); }else if(err){ callback(err) } //回调结果 callback(result); //释放连接 connection.release(); }) })}, 最终的解决方案也是三层嵌套回调，也对应了对三个表的操作，暂时算是最优解决方案了。 async.eachSeries 保证了SQL的执行顺序，而且当其中一条执行异常，就不会继续执行下一条，简单示例： 1234567891011121314151617181920212223242526var sqls = [ &quot;INSERT INTO log SET data='data1'&quot;, &quot;INSERT INTO log SET data='data2'&quot;, &quot;INSERT INTO log SET data='data3'&quot;];async.eachSeries(sqls, function(item, callback) { // 遍历每条SQL并执行 connection.query(item, function(err, results) { if(err) { // 异常后调用callback并传入err callback(err); } else { console.log(item + &quot;执行成功&quot;); // 执行完成后也要调用callback，不需要参数 callback(); } });}, function(err) { // 所有SQL执行完成后回调 if(err) { console.log(err); } else { console.log(&quot;SQL全部执行成功&quot;); }});","link":"/2016/12/28/%E5%9F%BA%E4%BA%8Enodejs%E7%9A%84%E9%97%AE%E5%8D%B7%E8%B0%83%E6%9F%A5%E7%B3%BB%E7%BB%9F/"},{"title":"基于微信的【点歌台】功能开发","text":"微网站，微社区，微店铺……现在是实打实的微时代啊。据我观测，随着移动互联时代的推进，web app将会走红，人们习惯于APP的操作界面，又不喜欢安装各种APP，所以基于云端的web app势必要走红，而微信的火热恰好为微网站提供了大显身手的舞台~废话太多了，进入主题吧，好久没写时间写博客了。 思路是用户提交关键字后，利用百度音乐API取出音乐地址，然后以音乐的格式返回。 百度API：http://box.zhangmen.baidu.com/x?op=12&amp;count=1&amp;title=小苹果$$筷子兄弟$$$$ 可见API中需要提交音乐名称和歌手名字，而且歌手名字需要准确。像我这种只听歌，不记歌手的人来说，这接口基本算是废了。怎么办？easy，我的思路是先到比较大的音乐站点，提交歌名，然后抓取到返回结果中第一首歌的歌手名，其实一般大家熟知的歌，在搜索结果中排名都是第一位的。所以这样返回的歌手基本上90%就是你所需要的。 既然有了思路就开工呗，先喵一个音乐网站被，我就选酷我了，登陆酷我首页，提交关键字“小苹果”，得到返回结果，用chrome工具分析post数据，可以看到提交的url为： http://sou.kuwo.cn/ws/NSearch?type=all&amp;key=%E5%B0%8F%E8%8B%B9%E6%9E%9C 用urldecode反编码即为：http://sou.kuwo.cn/ws/NSearch?type=all&amp;key=小苹果 可以看到搜索结果的前五首都是筷子兄弟，所以准确率还是可以的，然后就是抓取这个搜索页面，分析网页，正则匹配出我们所需的第一首歌的歌手，这个我就不多说了，正则是个耐心活，自己慢慢匹吧~ 现在我们已经内容那个通过歌名获取到歌手名字了，接下来解释post百度API了，返回XML形式的数据： [php] 1 8 25467 0 8 25467 0 [/php] 这里第一个encode返回的url并不是MP3的真实地址，而是encode的url去掉最后一串字符串然后加上decode的url，就是他的低品质MP3地址，本例就是http://zhangmenshiting.baidu.com/data2/music/121184680/121184680.mp3?xcode=b654da32ccc419077410c7bfda5a20a010eb0c361f219299&amp;mid=0.69760662308426 第二个encode和decode合并出来的是高品质的MP3地址。 XML中还包含歌词信息，取出25467标签中的数字，歌词地址就是http://box.zhangmen.baidu.com/bdlrc/254/25467.lrc，相信聪明的大家已经明白了算法，就是http://box.zhangmen.baidu.com/bdlrc/【数字/100取整】/数字，然当然这个是额为的话题了。 知道了真实链接的获取方法，剩下的就是用正则匹配处理了,然后与微信返回音乐的格式相结合就OK了。 微信返回音乐的格式： [php] 12345678 [/php] 最后将整个流程封装成一个类（最经发现有点强迫症心里，写的方法不封装就心里不爽= =），截个图供参考，想要代码自己照着敲吧鄙视伸手党，哈哈 调用方法很简单，实例化后直接传入参数： [php] $music = new MusicUrl(); $key = str_replace(“音乐”,””,$key); $contents = $music -&gt; get_musicurl($key); $content = array(); $content[] = array( “Title”=&gt;$contents[‘Title’].”—“.$contents[‘Description’], “Description”=&gt;$contents[‘Description’], “PicUrl”=&gt;”http://attach.bbs.miui.com/forum/201106/23/2102102z5ajpqgd2hwjn20.jpg&quot;, “Url” =&gt;”http://1.wesae.sinaapp.com/play.php?title=&quot;.$contents[‘Title’].&quot;&amp;description=&quot;.$contents[‘Description’].&quot;&amp;musicurl=&quot;.$contents[‘MusicUrl’] ); [/php] 如果想用微信自带浏览器播放的话，介绍一款js播放器：audio.js，方便调用，可以试试。 最终效果图如下： 大家可以关注服务号【bistu】查看，有问题欢迎留言探讨~","link":"/2014/08/05/%E5%9F%BA%E4%BA%8E%E5%BE%AE%E4%BF%A1%E7%9A%84%E3%80%90%E7%82%B9%E6%AD%8C%E5%8F%B0%E3%80%91%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"},{"title":"天使投资、风险投资(VC)、PE的区别是什么？","text":"如果满足于“阶段不同”这个简单的回答，那你可能错过了一个思考资本与企业发展之间关系的机会。 首先要交待一下，在大众语境中，angel/VC/PE三者都可认为是VC，也就是人们常说的风险投资，在国内官方又叫创业投资。而从严格的概念上说，PE(Private Equity)指未在证券交易所公开上市交易的资产，所以PE的涵盖了angel/VC并具有更广阔的范畴。 回归正题。简单来说，三者是根据被投项目所处的阶段来划分的，angel是种子期，VC是早期/成长期，PE是成熟期。 尽管如此，三者的区别并不仅仅体现于时间的先后，不同阶段的投资往往是由不同的投资者进行的，投资的金额、来源以及投资者的关注点都有差别。 那么，为什么不同阶段的项目需要不同的投资呢？这主要是由项目在不同阶段的特征所决定的。 种子期的项目，往往只有一个idea和初始团队（有些只有一两个创始人），idea能不能转换为一个make sense的business，具有高度的不确定性，需要通过一段时间的尝试，对idea背后的各种假设进行验证，从而探索到真正可行的方向。在此过程中项目的方向和内容随时有可能面临调整，而且项目一没有历史，二缺乏连续性，唯一稳定的、可供投资者参考的因素就是团队（而且主要是创始人），因此种子期的投资主要看人。人是极其复杂的，要想对一个人作出判断就必须深入了解他、和他打交道。由于这个过程依赖大量的经验和直觉，很难进行理性的分析，因此履行这个任务、做这个决策的，一般都是个人投资者。这也是“天使”这个称号的来历。此外，由于尝试和探索所需的资金量一般不是太多，个人投资者出得起，且项目越早期风险越大，所以天使投资的金额一般也较小，一般都在500万（人民币）以下。 成长期则似乎没有公认的定义，我个人的理解是当一个项目经历过种子期的摸索，探索到一条有较大可行性的道路时，便进入到成长期。可以说种子期是纸上谈兵，成长期则经过了实践，从市场的反应中看到了希望。企业进入成长期以后，战略基本成型，准备着手投入资源（其中资金是关键资源）去实现这个战略。这个时候投进去的，就可以算作是VC了。所以VC是企业战略初步成型以后用以支撑企业去实施战略的投资。此时企业刚刚在市场上取得一些成绩，或者看到了一些成功的苗头，但企业自身的资源不足以支撑它，需要引进外部的资源。对投资者而言，企业战略所隐含的关键性的假设通过市场已经有所验证，此时可以对项目进行理性的分析，并能够对面临的风险进行相对准确的评估。这就有了机构化投资的基础，也即实际的出资人可以委托专业的投资人士进行操作并对投资人士实施监督，从而在投资领域产生了委托－代理关系；另一方面，这个阶段企业需要的资金量相对比较大，如果由个人投资者投资将很难分散风险，因此投资的机构化也成为必然。因此，VC一般都是以基金的方式实行机构化运作的，投资额一般在千万量级。 通常说PE是指投成熟期项目的资金。此时企业在市场上已经取得了一定程度的成功，企业通过稳定的经营已经能够从市场上可持续地获取经济资源，并已经取得了一定的市场地位，短期内不再面临生存的问题。此时企业融资的需求相对多元化，有些是为了规范上市，有些是为了实施并购进行产业整合，有些则可能是延伸业务线，不一而足。但它们都有一个共同的特征，即企业进行PE融资的目的都是为了上更高的台阶。对投资者而言，此时企业自身拥有的经济资源已经较多，尽管投资的金额一般较大（小了企业靠自身积累或者银行贷款就能解决），但通过对赌、回购等契约条款能够将投资的风险大小锁定在一定的范围内，因而风险较为可控，PE投资者期望的是在较短时间实现较高收益，图的是快进快出。另一方面，此时企业某种意义上并“不差钱”，融资往往是着眼于长期战略或者产业资源整合，因此会要求投资者不仅仅出钱，还需要具备一定的产业背景或其他资源，以协助企业顺利完成其目标。如果说天使拼的是眼光，VC拼的是判断，那么PE拼的就是资源。 最后补充一点的是，尽管刚才已经就angel/VC/PE三者的性质作了区分，但在实践当中，三者之间并没有严格的界限。尤其是国内的VC，很多干的都是PE的活。当然这几年随着资金的增多与竞争、资本市场的发育，国内早期项目融资的环境已经在快速得到改善，而各类资金的专业化程度也在不断增强。","link":"/2015/07/09/%E5%A4%A9%E4%BD%BF%E6%8A%95%E8%B5%84%E3%80%81%E9%A3%8E%E9%99%A9%E6%8A%95%E8%B5%84-VC-%E3%80%81PE%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"},{"title":"如何为自己的网站添加favicon.ico？","text":"如何为自己的网站安装favicon.ico标志？ 其实很简单，分两步就完成了： 1.制作一个favicon.ico，可以在网上搜下在线制作ICO的做一个，然后上传到网站根目录； 2.在网站的源码里面添加如下代码，代码放在之间 &lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot; /&gt; 这样就完成了~ PS:少了ico制作工具还是不行的，感谢在线工具的提醒，推荐一个实用的ico制作网站：http://www.atool.org/ico.php","link":"/2014/02/02/%E5%A6%82%E4%BD%95%E4%B8%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99%E6%B7%BB%E5%8A%A0favicon-ico%EF%BC%9F/"},{"title":"对做项目的一些想法","text":"说到做项目，可能很多像我这样的菜鸟会感到与自己无关。毕竟刚学语言，接不了什么项目，说起项目经验就更谈不上了。其实不然，这个“项目”可以自己来定！俗话说眼里过千遍，不如手里过一遍。这句话用在学习编程语言上再合适不过了，一门语言的学习，要自己多练习多实践才能学的快，学得好，领悟语言的精髓。学语言如果只抱着本书看，那只能掌握一些基础知识了，而且容易遗忘。所以学习语言的时候，可以自己先想一个项目，然后在做的过程中用到什么学什么，不仅高效，做完之后记忆也会比较深刻。那么当我们有了这个项目之后，应该怎么来完成这个项目呢？以下是我在做的过程中的一些体会，分享给大家，不对的地方还望谅解。 1.要做项目呢，首先要理清该项目的需求，也就是要实现什么样的功能。然后规划出一个大体的布局，比如前端需要几个页面，每个页面分别展现什么内容，这些都是这一阶段需要完成的任务，将V层(View)大体的构架出来。至于前端页面的具体细节暂时不需要考虑，只是形成初期的一个项目模型。 2.等视图层大体定好之后，基本上每个页面的功能就大体确定了，这时候就需要根据功能需求设计数据库，也就是后台了。需要建几个表，每个表多少字段，这些都需要根据第一步确定的页面所需功能来详细确定。要知道，一个简洁干练，功能完整的后台是前端成功的支柱，所以后台设计一定程度上来说是很重要的。这一步也就是M层（Model）。 3.接下来就是将V和M也就是前端和后台连接起来，实现control，也就是用逻辑代码把前端和后台联合起来，以php为例，就是将php嵌入第一步的页面中，并将其与数据库互联，实现项目的功能，达到读写，展示，互动等方面的数据存储和交流。 4.完成前三步之后，一个项目的设计阶段就算基本完工了，这时，前端布局已定，各项功能都能实现。就需要我们来优化项目了。首先从前端V层的优化开始，考虑用户体验的完美性，在不更改大体布局的情况下从细节上美化前端页面，让view变得更加细致；然后再优化M层，使得数据库尽量的简洁合理；最后再优化C层的逻辑代码，尝试采用更高效简洁的算法，使读写速度更快，更节省资源。这样我们便在已完成的项目基础上将其优化，从视图到效率都上了一个层次。 5.至此项目的开发阶段就完成了，剩下的就是后续的二次开发和维护了。有什么新的需求可以后续不断地增加，同时需要对不断出现的bug进行修复完善。 以上就是我做项目的一些愚见，我是将MVC的理念融入到项目开发中，仅供参考，高手勿喷。","link":"/2014/02/28/%E5%AF%B9%E5%81%9A%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/"},{"title":"居中问题","text":"垂直居中 div/text垂直居中： 父级div：display:table 子元素： display: table-cell; vertical-align: middle; img垂直居中： 父级div： 设置line-height; img：vertical-align: middle; 不确定宽高的div水平居中: 父级div text-align:center 子级div display：inline-block","link":"/2015/02/10/%E5%B1%85%E4%B8%AD%E9%97%AE%E9%A2%98/"},{"title":"常用的 16 个 Sublime Text 快捷键","text":"选择 选择一个选中项的下一个匹配项 选择一个选中项的所有匹配项 选择与光标关联的开始和结束标签 选择容器内内容（新） 选择括号内的内容 移动行和文本 上移或下移行 复制行或选中项 增加和减少缩进 剪切和删除，复制和粘贴 剪切行或选中项 粘贴并保持缩进 用标签包裹行或选中项 移除未闭合的*容器元素* 文本和数字操作 计算数学表达式 递增和递减 大写和小写 注释和对齐变量 注释选中项/行 AlignTab自定义快捷键 选择一个选中项的下一个匹配项: ⌘ + D ****（译者注：ctrl+d） 把光标放在一个单词上，按下⌘+ D,将选择这个单词。一直按住⌘且按D多次，将选择当前选中项的下一个匹配项。通过按住⌘,再按D三次,将选择三个相同的文本。 选择一个选中项的所有匹配项: CTRL + ⌘ + G *********（译者注：alt+f3）* 和上面一样,但它选择文件中的所有匹配项。小心使用这个,因为它能选择一个文件中的所有匹配项. . 选择与光标关联的开始和结束标签:⌘+⇧+ K ****（译者注：ctrl+shift+’） 这是一个法宝。也许你希望所有属性保持不变,但只是想选择标签。这个快捷键为你这样做,会注意到你可以在一次操作多个标签。*需要Emmet插件 **选择容器内内容:CTRL + D ** （译者注：ctrl+shift+a） 如果你把光标放在文本间再按下上面的键将选择文本,就像⌘+ D。但是再次按下它，将选择父容器,再按,将选择父容器的父容器。*需要Emmet插件 选择括号内的内容: ⌘ + ⇧ + Space *（译者注：ctrl+shift+m*） 这有助于选择括号之间的一切。同样适用于CSS。 上移或下移行: CTRL + ⌘ + ↑ 或 ↓ （译者注：ctrl+shift+↑ 或 ↓） 复制行或选中项: ⌘ + ⇧ + D *（译者注：ctrl+shift+d*****************）如果你已经选中了文本,它会复制你的选中项。否则,把光标放在行上,会复制整行。 增加和减少缩进: ⌘ + [ 或 ] **（译者注：ctrl+[ 或 **]********************************） 剪切行或选中项: ⌘ + X **（译者注：ctrl+x**************************） 剪切一行到你的剪切板，你可以粘贴到其他地方. 粘贴并保持缩进: ⇧ + ⌘ + V *（译者注：ctrl+shift+v*****************************）这是又一个我每次都用的快捷键。在gif中我显示了普通粘贴(⌘+ V)和缩进粘贴两种效果的对比。注意缩进如何排列。 用标签包裹行或选中项: CTRL + ⇧ + W *（译者注：alt+shift+w*********************************） 使用标签包裹一行; 开始输入你想使用的标签,你成功了. 移除未闭合的容器元素: ⌘ + ’ ********（译者注：ctrl+shift+;********************************************）这会移除与你的光标相关的父标签。对清除标记很有帮助。 计算数学表达式: ⌘ + ⇧ + Y *（译者注：ctrl+shift+y*****************************************）我从未想过我会经常使用这个，但是确实很好用 递增和递减: ⇧ + OPTION + ↑ or ↓, OPTION + ↑ or ↓ *（译者注：alt+shift+↑ 或 ↓，*ctrl+ ↑ 或 ↓********************************************************） 按住 ⇧ 将以10的步长改变数字, 不按住以1为步长. 同时注意到你不需要选择数字, Sublime Text 足够聪明到更新本行最近的数字. 大写和小写: ⌘ + K then U, ⌘ + K then L *（译者注：ctrl+k+u,ctrl+k+l*********************************************************************************************） 注释选中项/行: ⌘ + / **************（译者注：ctrl+/**********************************************************************） 这个在所有语言下都可用, 对行和选中项都可用. 额外令人高兴的事情!使用AlignTab自定义快捷键上面的快捷键都是Sublime Text默认的快捷键,但是你也可以添加你自己的自定义快捷键。以下示例应用 AlignTab插件使用 三个自定义键绑定 来基于=&gt; ,=,和:进行内容垂直对齐。因为我工作中主要使用JavaScript和PHP,这些绑定对于几乎我需要的每一个场景都有用,但是你可以用任何你想要的字符进行垂直对齐。 在你自己的编辑器实现下面gif的效果,只需安装 AlignTab, ,添加自定义绑定到您的自定义键绑定文件中,选择一些代码,并点击CTRL + ⇧ + . 或 ; 或 =. 结论一旦你看到多行代码发生了一个改变,通常有一个使用几个按键来实现改变的方法，而不是一个个地编辑它们。通过连续使用上面快捷键的组合去执行重复的或可预见的改变,你可以大大提高你编码的速度。 这里是一个简短的Gif,包括选择所有匹配项,复制链接的文本,利用多行光标粘贴复制的文本,并将该文本转换为小写。","link":"/2014/12/23/%E5%B8%B8%E7%94%A8%E7%9A%84-16-%E4%B8%AA-Sublime-Text-%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"title":"干锅土豆片+尖椒肉丝","text":"虽然国家一直在推行简化各种手续的办理流程，但是距离像网上购物一样便捷的愿望，真的是还差两个西天取经的路程🙄。不吐槽了，开始主题。 忙里偷闲的一天，办完手续中午在家自己整点吃的。冰箱打开只有土豆、洋葱、辣椒、肉丝。那就整两个菜吧，如题。其实应该叫家常土豆片？不过放在干锅里就叫干锅土豆片了…。别问我为什么这么喜欢土豆，因为我种过将近十年土豆😂。非常简单实用的两个小菜。 材料 土豆 洋葱 辣椒 葱、姜、蒜、干辣椒 火锅底料 生抽、老抽、盐、胡椒粉、鸡精 开搞一、干锅土豆片 1、准备食材：食材准备，土豆切片洗净，洋葱切片，辣椒切成丝或者快都行。葱姜蒜切好，少许火锅底料/豆瓣酱。 2、炒土豆： 开火热锅，锅热后倒少许油。 稍许油热后倒入少许火锅底料、干辣椒、葱姜蒜，煸香后倒入土豆翻炒，中途可加入少许食盐、胡椒粉。 大约翻炒大约2分钟左右，土豆片已经半熟。倒入洋葱继续翻炒，加入老抽上色。油干的时候边炒边加入少许清水，分批次少量加。这样小炒3分钟左右土豆基本熟了。 加入辣椒，倒入酱油提味，再翻炒一分钟，然后加入味精提味，加入少许盐。喜欢酸味的可以加入少许醋。就可以出锅了。 就是这么简单。 二、尖椒肉丝 1、准备食材：整块猪肉的需要自己切成肉丝，从冰箱拿出来稍微解冻一点后更好切。或者直接买肉时让人家机器切成肉丝最省事。尖椒切成条状，与肉丝类似。肉用水冲洗后，可以用加料酒、胡椒粉、盐稍微腌一会会更有味。葱姜蒜必备。 2、开炒 类似的，热锅到油，热油倒入葱姜蒜。 然后倒入肉丝翻炒，炒至肉丝变色即可，中途加入少许盐、胡椒粉等，倒入老抽上色。 然后倒入尖椒翻炒，生抽提味，翻炒1~2分钟即可，然后味精提味出锅即可。 注意肉丝不能炒的时间长，肉容易变干变老。 两个菜都比较简单，基本上20分钟两个菜就搞定。一个人的话蒸米饭可以用煮蛋器蒸一碗，刚好够。 最后上图 有的步骤忘拍了，自行脑补。","link":"/2018/09/11/%E5%B9%B2%E9%94%85%E5%9C%9F%E8%B1%86%E7%89%87-%E5%B0%96%E6%A4%92%E8%82%89%E4%B8%9D/"},{"title":"开机时Error 15: file not found解决","text":"有三种情况会出现这个错误： 1.是grub.conf文件里面的配置出错，这需要你去自己校对该文件，看是否设置正确； 2.是系统在启动过程时，需要加载vmlinuz和initrd这两个文件，如果因为某种诡异的原因在/boot目录下的这两个文件丢失了，也会报上面的错误，那么就需要创建这两个文件； 3.多系统引导错误（windows下添加linux的启动项，开机出现） 这里先解决第三种情况，前面两种情况以后再说。 windows下添加ubuntu的启动项是这样的： 这时候开机之后选ubuntu，有人是正常启动的，有人出现Error 15: file not found；如果无法启动，出现error15，这时删除刚才添加的neogrub启动，添加ubuntu的grub2引导（和添加12.04的引导一样）： 然后下载下面ANG0.zip文件，解压出ANG0，替换c盘根目录下的ANG0即可： ANG0.zip下载： http://pan.baidu.com/s/15TfO2","link":"/2013/11/03/%E5%BC%80%E6%9C%BA%E6%97%B6Error-15-file-not-found%E8%A7%A3%E5%86%B3/"},{"title":"微信平台创建菜单","text":"前提：拥有微信认证的订阅号或服务号 比较简单，看官方文档分分钟的事~创建菜单需要access token，这里将access token的获取和创建菜单结合起来成一个单独的文件，取名为menu.php，专门用来创建菜单，只需访问即可。 menu.php [php] [/php]","link":"/2014/07/09/%E5%BE%AE%E4%BF%A1%E5%B9%B3%E5%8F%B0%E5%88%9B%E5%BB%BA%E8%8F%9C%E5%8D%95/"},{"title":"微屁恩使用指南之 —— V2Ray","text":"2020.02.06廊坊，大雪；陕南，雨 ；平凉，大晴。新冠，正嚣张；强食自爱，正当时。 弱小和无知不是生存的障碍，傲慢才是。 —— 刘慈溪，《三体》 正值立春，雨雪飘零，又时下革命形式严峻，当即抄写《卜算子·咏梅》。吾辈当继承毛泽东同志坚贞不屈的革命意志，面对疫情，严阵以待，做好防护。 下文，非刁民勿入！ 这些墙很有意思，刚开始你恨它，慢慢的你习惯于其中，时间久了，你发现离不开它了，这就是“体制化”。—— 《肖生克的救赎》（The Shawshank Redemption） 一、前言本文旨在介绍新的科学上网方式——V2Ray的使用。 从最开始GFW（Great Firewall，中文也称中国国家防火墙）之父，国之栋梁方滨兴院士，主导、研发、建立国家防火墙工程之后，大陆通往世界的互联网道路从此被阻隔。从建立伊始至今，此墙为广大中国人民屏蔽了无数的不良言论，得以使国内长期处于一片祥和的氛围当中。由此也诞生了中国最具良心、以搜索引擎起家的顶级互联网企业百度，此墙可谓国之重器。 然穷山恶水出刁民，总有刁民想翻墙。刁民谓： 面对威权压迫，你是甘为一辈子懦夫，还是坚定勇气，试着改变这个污浊不堪的世界？于此，虽千万人吾往矣。全新的shadowsocksR管理助手——SSR.Go，现已问世。长夜漫漫，父说，擦亮双眸的你，需要一道光明，使者便从了他的意，把光明给带来了。—— Github SSR.Go 作者 时过境迁，在广大院士们的忘我科研中，墙越来越不易翻越，刁民们逐渐疲于应对，只能不断更换翻墙方式。从最初的ss到ssr，再到此文介绍的V2Ray，只为了看一眼墙外的景色。 V2Ray相比于ss系列，有何不同。首先直白的说下防火墙及翻墙与被封的原理。 防火墙的原理，就是通过各电信运营商，在大陆与外网通信的网络出入口，对传输的内容进行筛选、过滤。如果发现是国军，立马原地劝返。如果是共军则放行。至于如何识别是共军还是国军呢，大致的方法有 IP黑名单、内容审查、DNS劫持 等[1]。 IP黑名单，简单说将外网的一些网站ip地址加入黑名单，如FB/Google等，当你的请求指向的地址在黑名单中，立即截断。 内容审查，会有一份敏感词的列表，对于未加密传播的HTTP内容，拦截解析之，如果内容中包含敏感词，不好意思，白白了您嘞。 DNS劫持，可以理解为域名黑名单，对黑名单中的域名，将其解析到虚拟的ip地址。 ss/ssr的原理相同，都是通过socks5代理。举个栗子，你有一台香港的服务器，搭建了微屁恩，此时你要访问谷歌，会先与香港的服务器建立连接，并告诉香港服务器你要访问的内容，由香港服务器替代你，间接访问谷歌得到内容后，再转述给你。这里可以看到一个关键点就是，需要一个身在大陆防火墙之外的“代理人”，你们之间秘密通信，他替你完成内容的获取后转述给你。 ss作为初代梯子，简单快捷，造福了很多刁民，随后李大钊同志被请去喝茶，迫于淫威删除了开源代码。在李大钊同志倒下后又站起来了陈独秀同学，开源了ssr，并宣布ss已于识别检测，ssr加入了众多的加密混淆方法，更利于开展地下工作。然陈独秀同志最终也难逃被人肉的命运，最终也删除ssr代码。 ss和ssr在与GFW多年的肉搏下，其特性已经逐渐被摸清，GFW已经为这二位定制了一套战术，能够较高效的找到这二者的破绽，识别并封杀。在太平盛世下，这二位还能苟活些时日，然而一到有热点事件发生，GFW便会降低特征匹配率，这二位分分钟别秒杀。这就像人脸识别，系统会将预先录入的人像和当前人像对比，当达到一个设定的相似度，例如90%时，认为匹配成功。当特殊时期时，会将此阈值降低，例如降低到50%，此时只要你稍有国军的一点特征，便把你抓进去。ss和ssr这两位在特殊时期就显得无能为力。而这种时期恰是刁民们翻墙的高峰期。 V2Ray 在这种情况下应用而生，通过HTTPS、WS等一系列手段[2]，将传输数据进行更好的加密伪装，从而能活的更长久。V2Ray由于其良好的防封表现，其功能也相当繁多、复杂。 SS =&gt; SSR =&gt; V2Ray，随着GFW的不断升级，梯子的复杂度也在指数增加，出现的结果就是，梯子越来越隐蔽稳定，但能搞定梯子的人变的越来越少😳 二、V2Ray 服务端配置至此处，本文的核心内容已经完结。接下来的都是划水 是一些优秀文章的合集。 服务端推荐使用233boy开发的集成脚本，简单快捷 👉 服务端配置教程 三、客户端下载暂将客户端分为： macOS Mac下本人使用的是 👉 V2rayU。 Windows 未测试，无推荐，软件列表见本节末尾。 iOS iOS下暂无免费的客户端，付费客户端推荐Shadowrocket。 找到一个雷锋分享 AppStore 账号，已经购买了此软件，赶紧下起来。 12账号： rh72uw13@icloud.com密码： Dd112211 账号过期的话，可以去此处找 👉 雷锋 获取 Android 安卓客户端推荐 👉 V2RayNG V2Ray客户端众多，除了上述推荐的之外，其余各平台的客户端见 👉 客户端汇总 四、软件配置软件配置就不多说了，添加配置，手动填写/导入url/扫码导入都可，导入服务器配置后，开启服务器配置即可。 全局模式即为浏览器所有流量走代理。pac模式即为自动识别是否需要走代理，更加智能，当然也有识别出错的情况。 推荐： 1、浏览器：这里多说一个 V2Ray 配合谷歌浏览器的神器插件 SwitchyOmega 的用法。SwitchyOmega 跟ss/ssr搭配已经很久了。这里不同的是，V2Ray 使用TCP模式时，SwitchyOmega 配置的代理记得从socks5换成HTTP。 2、全局代理：当我们想让电脑除浏览器外的其他软件也能翻墙时，需要使用全局模式，Mac下推荐 Proxifier ，具体设置可以自行Google。 附录 [1] 防火长城[2] V2Ray","link":"/2020/02/06/%E5%BE%AE%E5%B1%81%E6%81%A9%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%E4%B9%8B-%E2%80%94%E2%80%94-V2Ray/"},{"title":"搭建ETH私链并创建ERC20 Token","text":"1、下载ETH钱包下载 Ethereum Wallet或Mist其一即可，二者功能相同。 2、安装gethMac下使用： 1brew install geth 其余平台参考安装方法 3、编辑创世区块配置文件genesis.json：（参考示例） 12345678910111213141516171819ludis@MacBook ~ cd Desktop/ethereumludis@MacBook ~/Desktop/ethereum cat &gt; genesis.json{ &quot;config&quot;: { &quot;chainId&quot;: 33, &quot;homesteadBlock&quot;: 0, &quot;eip155Block&quot;: 0, &quot;eip158Block&quot;: 0 }, &quot;nonce&quot;: &quot;0x0000000000000033&quot;, &quot;timestamp&quot;: &quot;0x0&quot;, &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;gasLimit&quot;: &quot;0x8000000&quot;, &quot;difficulty&quot;: &quot;0x100&quot;, &quot;mixhash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;coinbase&quot;: &quot;0x3333333333333333333333333333333333333333&quot;, &quot;alloc&quot;: {}}^c 4、初始化初始化区块链，并且创建一个文件夹来存储区块数据。由于第一步下载的钱包，其默认的区块数据存储在~/Library/Ethereum目录，所以初始化时，将存储区块数据的文件夹指向该目录，这样钱包就和我们创建的私链绑定起来： 1geth init genesis.json --datadir ~/Library/Ethereum 启动私链 1geth --networkid 10 --rpc --rpcapi &quot;admin,debug,eth,miner,net,personal,shh,txpool,web3&quot; rpcaddr &quot;0.0.0.0&quot; --rpccorsdomain &quot;*&quot; --nodiscover --dev console 终端另开一个窗口，连接本地私链节点，开始挖矿。miner.start(1)传的参数为挖矿所用的线程。 12geth attach 'http://127.0.0.1:8545'miner.start(1) 如果提示挖矿账户错误，则需要设置挖矿账户为自己的钱包地址： 1miner.setEtherbase(&quot;7df9a875a174b3bc565e6424a0050ebc1b2d1d82&quot;) 5、启动钱包当私链启动后，打开钱包，这是会显示连接到私链成功。点击LAUNCH APPLICATION进入钱包后，创建一个账户即可。 如果打开钱包，显示在同步节点数据，则说明本地私链启动失败，或与钱包绑定失败。 6、创建ERC20 token创建一个基于ERC20规范的token，合约代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122pragma solidity ^0.4.19; // ---------------------------------------------------------------------------------------------- // Sample fixed supply token contract // Enjoy. (c) BokkyPooBah 2017. The MIT Licence. // ---------------------------------------------------------------------------------------------- // ERC Token Standard #20 Interface // https://github.com/ethereum/EIPs/issues/20contract ERC20Interface { // 获取总的支持量 function totalSupply() constant returns (uint256 totalSupply); // 获取其他地址的余额 function balanceOf(address _owner) constant returns (uint256 balance); // 向其他地址发送token function transfer(address _to, uint256 _value) returns (bool success); // 从一个地址想另一个地址发送余额 function transferFrom(address _from, address _to, uint256 _value) returns (bool success); //允许_spender从你的账户转出_value的余额，调用多次会覆盖可用量。某些DEX功能需要此功能 function approve(address _spender, uint256 _value) returns (bool success); // 返回_spender仍然允许从_owner退出的余额数量 function allowance(address _owner, address _spender) constant returns (uint256 remaining); // token转移完成后出发 event Transfer(address indexed _from, address indexed _to, uint256 _value); // approve(address _spender, uint256 _value)调用后触发 event Approval(address indexed _owner, address indexed _spender, uint256 _value);}//继承接口后的实例contract FixedSupplyToken is ERC20Interface { string public constant symbol = &quot;XC&quot;; //单位 string public constant name = &quot;X Coin&quot;; //名称 uint8 public constant decimals = 18; //小数点后的位数 uint256 _totalSupply = 100000000000000000000000000000; //发行总量 // 智能合约的所有者 address public owner; // 每个账户的余额 mapping(address =&gt; uint256) balances; // 帐户的所有者批准将金额转入另一个帐户。从上面的说明我们可以得知allowed[被转移的账户][转移钱的账户] mapping(address =&gt; mapping (address =&gt; uint256)) allowed; // 只能通过智能合约的所有者才能调用的方法 modifier onlyOwner() { assert(msg.sender == owner); _; } // 构造函数 function FixedSupplyToken(string _symbol,string _name) public { owner = msg.sender; balances[owner] = _totalSupply; //symbol = _symbol; //name = _name; } function totalSupply() constant public returns (uint256 totalSupply) { totalSupply = _totalSupply; } // 特定账户的代币余额 function balanceOf(address _owner) constant public returns (uint256 balance) { return balances[_owner]; } // 转移余额到其他账户 function transfer(address _to, uint256 _amount) public returns (bool success) { if (balances[msg.sender] &gt;= _amount &amp;&amp; _amount &gt; 0 &amp;&amp; balances[_to] + _amount &gt; balances[_to]) { balances[msg.sender] -= _amount; balances[_to] += _amount; // balances[交易所地址] += 1; Transfer(msg.sender, _to, _amount); return true; } else { return false; } } //从一个账户转移到另一个账户，前提是需要有允许转移的余额 function transferFrom( address _from, address _to, uint256 _amount ) public returns (bool success) { if (balances[_from] &gt;= _amount &amp;&amp; allowed[_from][msg.sender] &gt;= _amount &amp;&amp; _amount &gt; 0 &amp;&amp; balances[_to] + _amount &gt; balances[_to]) { balances[_from] -= _amount; allowed[_from][msg.sender] -= _amount; balances[_to] += _amount; Transfer(_from, _to, _amount); return true; } else { return false; } } //允许账户从当前用户转移余额到那个账户，多次调用会覆盖 function approve(address _spender, uint256 _amount) public returns (bool success) { allowed[msg.sender][_spender] = _amount; Approval(msg.sender, _spender, _amount); return true; } //返回被允许转移的余额数量 function allowance(address _owner, address _spender) constant public returns (uint256 remaining) { return allowed[_owner][_spender]; }} 7、创建项目1. 创建一个node项目，来实现合约的编译、部署功能： 12345678910111213141516171819202122232425262728293031323334353637ludis@MacBook ~ cd Desktop/contractludis@MacBook ~ /Desktop/contract npm initThis utility will walk you through creating a package.json file.It only covers the most common items, and tries to guess sensible defaults.See `npm help json` for definitive documentation on these fieldsand exactly what they do.Use `npm install &lt;pkg&gt;` afterwards to install a package andsave it as a dependency in the package.json file.Press ^C at any time to quit.package name: (contract)version: (1.0.0)description:entry point: (index.js)test command:git repository:keywords:author:license: (ISC)About to write to /Users/ludis/Desktop/contract/package.json:{ &quot;name&quot;: &quot;contract&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: { &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; }, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;}Is this ok? (yes) 一路回车后初始化了一个node项目，接着安装所需的依赖： 1ludis@MacBook ~/Desktop/contract cnpm i -S ganache-cli solc web3 创建以下目录结构: 1234567.├── build├── compile.js├── contracts├── deploy.js├── node_modules└── package.json 将第六步的合约命名为FixedSupplyToken.sol保存在contracts文件夹 2. compile.js为编译合约用的脚本: 12345678910111213141516171819202122232425262728293031323334353637383940414243//compile.js 赋值编译智能合约//require('库名/路径')const solc = require('solc');//fs: file systemconst fs = require('fs');const path = require('path');//1.读取智能合约//readFileSync 同步读取文件//__dirname =&gt;返回当前路径console.log(__dirname);//resolve路径拼接的方法const filepath = path.resolve(__dirname,'contracts','FixedSupplyToken.sol');const contractFile = fs.readFileSync(filepath,'utf8');// console.log(contractFile);//通过solc库来编译智能合约var output = solc.compile(contractFile,1);// console.log(output);//output = {contracts:'',errors:'',sourceLiser:''}const contracts = output.contracts;// console.log(contracts);//for in 操作: contract = 对象 中的 属性名for (let contract in contracts) { // console.log(contract) //contracts[contract] //写文件 fs // console.log(contract); let newfilepath = path.resolve(__dirname, 'build', contract.replace(':','') + '.json'); // console.log(newfilepath); //fs.writeFileSync(目标路径, 写入内容) //对象, tostring()方法, 返回是一个[object object] 字符串 //JSON.stringify =&gt; 将对象装换为字符串 fs.writeFileSync(newfilepath, JSON.stringify(contracts[contract]));}//console.log(contracts); 3. deploy.js为部署合约用的脚本: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647const ganache = require('ganache-cli');const Web3 = require('web3');const fs = require('fs');const path = require('path');// web3 小写是实例, Web3 是类// web3 的构造函数需要传入一个rpc 地址 =&gt; provider(http, websocket)// 内存虚拟节点// const web3 = new Web3(ganache.provider());// 直接通过 http://127.0.0.1:8545链接到自己的节点const web3 = new Web3('http://127.0.0.1:8545');// 获取编译后的合约代码const contractpath = path.resolve(__dirname,'build/FixedSupplyToken.json')// 解析成为json对象const contract = JSON.parse(fs.readFileSync(contractpath,'utf8'));// 构建一个智能合约对象let myContract = new web3.eth.Contract(JSON.parse(contract.interface));web3.eth.getAccounts().then(accounts =&gt; { // web3.personal.unlockAccount(eth.accounts[0],&quot;asdqwe123&quot;, 15000) myContract.deploy({ data: '0x' + contract.bytecode,// bytecode arguments: [&quot;MT&quot;, 'My TOKEN'] // 合约构造函数参数s }) .send({ from:accounts[0], gas: 1500000, // gas 消耗最大值 gasPrice: web3.utils.toWei(&quot;0.0000002&quot;, &quot;ether&quot;) }) .then(d =&gt; { // 部署合约的返回结果是实例对象 d.methods.name().call().then(r =&gt; { console.log(r); }); // 合约方法调用 // 合约实例.methods.方法名(方法参数).call() d.methods.totalSupply().call().then(r =&gt; { console.log(r); }) // console.log(d) })}) 8、编译部署编译: node compile.js，编译成功会在build文件夹生成编译完的json文件 部署: node deploy.js，部署时会提示钱包账户解锁问题，只需终端执行web3.personal.unlockAccount(eth.accounts[0],&quot;password&quot;, 15000)，然后再部署即可。 部署成功后终端挖矿页面会显示区块的打包信息，当合约部署成功时会显示合约地址。然后把合约地址添加到钱包的contracts-&gt;token中，就会显示该合约下的token数量。可以新建多个用户转账测试。","link":"/2018/03/12/%E6%90%AD%E5%BB%BAETH%E7%A7%81%E9%93%BE%E5%B9%B6%E5%88%9B%E5%BB%BAERC20-Token/"},{"title":"数据采集利器——PHP Simple HTML DOM Parser","text":"PHP Simple HTML DOM Parser（PHP实现的简单的HTML DOM解析器）。 Description, Requirement &amp; Features A HTML DOM parser written in PHP5+ let you manipulate HTML in a very easy way! Require PHP 5+. Supports invalid HTML. Find tags on an HTML page with selectors just like jQuery. Extract contents from HTML in a single line. Download &amp; Documents Download latest version form Sourceforge. Read Online Document. Quick Start How to get HTML elements? [php] // Create DOM from URL or file $html = file_get_html(‘http://www.google.com/’); // Find all images foreach($html-&gt;find(‘img’) as $element) echo $element-&gt;src . ‘’; // Find all links foreach($html-&gt;find(‘a’) as $element) echo $element-&gt;href . ‘’; [/php] How to modify HTML elements? [php] // Create DOM from string $html = str_get_html(‘HelloWorld’); $html-&gt;find(‘div’, 1)-&gt;class = ‘bar’; $html-&gt;find(‘div[id=hello]’, 0)-&gt;innertext = ‘foo’; echo $html; // Output: foo&lt;div id=”world” class=”bar”&gt;World [/php] Extract contents from HTML [php] // Dump contents (without tags) from HTML echo file_get_html(‘http://www.google.com/’)-&gt;plaintext; [/php] Scraping Slashdot! [php] // Create DOM from URL $html = file_get_html(‘http://slashdot.org/’); // Find all article blocks foreach($html-&gt;find(‘div.article’) as $article) { $item[‘title’] = $article-&gt;find(‘div.title’, 0)-&gt;plaintext; $item[‘intro’] = $article-&gt;find(‘div.intro’, 0)-&gt;plaintext; $item[‘details’] = $article-&gt;find(‘div.details’, 0)-&gt;plaintext; $articles[] = $item; } print_r($articles); [/php]","link":"/2014/09/19/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%88%A9%E5%99%A8%E2%80%94%E2%80%94PHP-Simple-HTML-DOM-Parser/"},{"title":"本地启用IIS后再安装WAMP无法启动","text":"原来在电脑上搭建过IIS8+PHP+MYSQL+phpAdmin,后来由于数据库的原因便放弃了使用，便在网上找了一个WAMP的集成包用，这样就方便很多了，也不用那么麻烦再去费时间配环境了，省事是省事，结果装好之后阿帕奇（Apache）怎么都启动不了,后来想了想应该是之前开了IIS服务器，应该会冲突，于是把IIS给关了，结果阿帕奇马上就能重启了。","link":"/2014/01/23/%E6%9C%AC%E5%9C%B0%E5%90%AF%E7%94%A8IIS%E5%90%8E%E5%86%8D%E5%AE%89%E8%A3%85WAMP%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/"},{"title":"正则去掉&lt;a&gt;标签并保留标签内容","text":"话不多说，直接上例子： [php] $str = “ www.ldsun.com “; $str1 = preg_replace(“/&lt;a[^&gt;]*&gt;/“,””, $str); $str2 = preg_replace(“/&lt;/a&gt;/“,””, $str1); echo $str2; [/php]","link":"/2014/05/27/%E6%AD%A3%E5%88%99%E5%8E%BB%E6%8E%89-a-%E6%A0%87%E7%AD%BE%E5%B9%B6%E4%BF%9D%E7%95%99%E6%A0%87%E7%AD%BE%E5%86%85%E5%AE%B9/"},{"title":"浅析JS和PHP中等于（&#x3D;&#x3D;）和恒等（&#x3D;&#x3D;&#x3D;）的区别","text":"首先，先做个简单的介绍，让先有个直观的认识 == equality 等同 === identity 恒等 == 两边值类型不同的时候，要先进行类型转换，再比较。 === 不做类型转换，类型不同的一定不等。 举例说明： “1” == true 类型不同，”==”将先做类型转换，把true转换为1，即为 “1” == 1； 此时，类型仍不同，继续进行类型转换，把”1″转换为1，即为 1 == 1； 此时，”==” 左右两边的类型都为数值型，比较成功！ 如果比较：”1″ === true 左侧为字符型，右侧为bool布尔型，左右两侧类型不同，结果为false； 如果比较：”1″ === 1 左侧为字符型，右侧为int数值型，左右两侧类型不同，结果为false； 如果比较： 1 === 1 左侧为int数值型，右侧为int数值型，左右两侧类型相同，数值大小也相同，结果为true； 如果比较： 1 === 2 左侧为int数值型，右侧为int数值型，左右两侧类型相同，但数值大小不同，结果为false； 简而言之就是 “==” 只要求值相等; “===” 要求值和类型都相等 ^_^ 下面，我们对”==”和”===”的区别，做一些较为深入的剖析介绍 先说 ===，这个比较简单，具体比较规则如下： 1、如果类型不同，就[不相等] 2、如果两个都是数值，并且是同一个值，那么[相等]；(！例外)的是，如果其中至少一个是NaN，那么[不相等]。（判断一个值是否是NaN，只能用isNaN()来判断） 3、如果两个都是字符串，每个位置的字符都一样，那么[相等]；否则[不相等]。 4、如果两个值都是true，或者都是false，那么[相等]。 5、如果两个值都引用同一个对象或函数，那么[相等]；否则[不相等]。 6、如果两个值都是null，或者都是undefined，那么[相等]。 再说 ==，具体比较规则如下： 1.如果两个值类型相同，进行 === 比较，比较规则同上 2.如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较： a、如果一个是null、一个是undefined，那么[相等]。 b、如果一个是字符串，一个是数值，把字符串转换成数值再进行比较。 c、如果任一值是 true，把它转换成 1 再比较；如果任一值是 false，把它转换成 0 再比较。 d、如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。js核心内置类，会尝试valueOf先于toString；例外的是Date，Date利用的是toString转换。非js核心的对象，令说（比较麻烦，我也不大懂） e、任何其他组合（array数组等），都[不相等]。 举例说明： “1” == true 类型不等，true会先转换成数值 1，现在变成 “1” == 1，再把”1″转换成 1，比较 1 == 1， 相等。 = 赋值运算符 == 等于 === 严格等于 例： var a = 3; var b = “3”; a==b 返回 true a===b 返回 false 因为a,b的类型不一样 ===用来进行严格的比较判断，结果为false var priceOfApple = “3元”; // 苹果的价格 var priceOfBanana = “3.5元”; // 香蕉的价格 priceOfApple = parseInt( priceOfApple ); // 解析苹果的价格 var priceOfBanana2 = parseInt( priceOfBanana ); // 解析香蕉的价格 if( ( priceOfApple===3 ) &amp;&amp; ( priceOfBanana2 === 3 ) // 检查解析是否成功 &amp;&amp; ( parseFloat( priceOfBanana ) ===3.5 ) ) { alert( “苹果的价格:” + priceOfApple // 输出水果的价格 + “\\n香蕉的价格的整数部分:” + priceOfBanana2 + “\\n香蕉的价格:” + parseFloat( priceOfBanana ) ); }","link":"/2014/05/21/%E6%B5%85%E6%9E%90JS%E5%92%8CPHP%E4%B8%AD%E7%AD%89%E4%BA%8E%EF%BC%88-%EF%BC%89%E5%92%8C%E6%81%92%E7%AD%89%EF%BC%88-%EF%BC%89%E7%9A%84%E5%8C%BA%E5%88%AB/"},{"title":"清除所有默认的CSS样式","text":"做前端的必备，有朋友问我这个，我也刚好没有整理过，就攒了一下~应该挺全的，留着以后方便用： html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, font, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td,p { margin: 0; padding: 0; border: 0; outline: 0; font-size: 100%; vertical-align: baseline; background: transparent; }","link":"/2014/07/15/%E6%B8%85%E9%99%A4%E6%89%80%E6%9C%89%E9%BB%98%E8%AE%A4%E7%9A%84CSS%E6%A0%B7%E5%BC%8F/"},{"title":"点击锚点让定位偏移顶部","text":"最近遇到的问题是：网页多出需要设置锚点，但网站顶部导航采用float:fixed绝对定位，浮动于顶部。那么问题来了，锚点定位必然定位于页面顶部，这样一来就会被浮动的导航遮挡。 在stackoverflow看到的一个方法是在主体内容前加一个暗锚： 主体内容… 将锚点进行偏移，并隐藏占位： .target-fix { position: relative; top: -44px; // 偏移值 display: block; height: 0; overflow: hidden; } 这个也是最直接的方法。 我采用的是相对简洁的方法：对于现代浏览器如果支持css的:target声明,可以这么设置: article.a-post:target{ padding-top:44px; } 对于IE这等落后的浏览器是不支持的.另外可以使用js去调整scroll,比如使用jQuery: $(function(){ if(location.hash){ var target = $(location.hash); if(target.length==1){ var top = target.offset().top-44; if(top &gt; 0){ $(‘html,body’).animate({scrollTop:top}, 1000); } } } }); 可以使用jquery-hashchange:https://github.com/cowboy/jquery-hash… 绑定window.onhashchange事件: $(function(){ /* 绑定事件*/ $(window).hashchange(function(){ var target = $(location.hash); if(target.length==1){ var top = target.offset().top-44; if(top &gt; 0){ $(‘html,body’).animate({scrollTop:top}, 1000); } } }); /* 触发事件 */ $(window).hashchange(); }); 关于window.onhashchange事件:[https://developer.mozilla.org/en-US/d…](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange \"https://developer.mozilla.org/en-US/d...\")","link":"/2014/11/03/%E7%82%B9%E5%87%BB%E9%94%9A%E7%82%B9%E8%AE%A9%E5%AE%9A%E4%BD%8D%E5%81%8F%E7%A7%BB%E9%A1%B6%E9%83%A8/"},{"title":"玉兰花开","text":"下午没课，这学期还挺闲的。楼下的玉兰花又该开了，去年我给她拍的照片还躺在电脑里。二楼的风不大不小，凉凉的很舒服。生活真美好！早上开班会竞选班委，大家都很积极，我总是在这种事上很消极，长辈们见了也少不了要问问有没有任职，在他们眼里我应该是个胆怯的孩子吧！我只是不好这个…读一位朋友的日记，他说他这几天辞掉了兼职，他说兼职占据了他的空闲时间，以后半辈子都在工作，为什么要用他短暂的读书年龄去兼职呢，他要干点自己喜欢的事，别以后想起来，从大学开始就一直在工作。他喜欢画画，我看了他的作品，我很喜欢，我又想起了自己的爱好。一直爱画画，原来还学过素描，好像是到高中后就慢慢没时间了，还写过毛笔字，最后没坚持下来～高中喜欢写诗词，虽然都是玩的，谈不得好坏，那本应该还在，等什么时候回老家了翻出来再看看。现在是没那闲情逸趣了，现在喜欢瞎鼓捣，这点代码，折腾会电脑。我不知道这算不算爱好，管他呢，我喜欢就好，偶尔接点项目赚点小钱画画也挺不错的～社团里有个小姑娘，话也不多，昨天看她的博客，便能看到她的思想，她期待大学带给她全新的环境，她能努力展现自己，过的快乐充实。却发现大学最大的不同是远离了家乡的孤独和人情冷漠，碌碌无为，想要改变却茫然不知所措，她把这篇文章取名为断线的风筝。从没有感觉到时间会这么快，如今是大二下学期了，我想剩下的两年会过的更快。过去的50%经历了很多，我也成长了很多，学会了很多，感谢我遇到的每一位。我并不想对这两年做出总结，中立的总结并不那么好做。以后的每天还是以开朗的心态面对，迷茫是必须的，时间总会给出答案。玉兰花又开，已然不是去年的样子。","link":"/2014/03/12/%E7%8E%89%E5%85%B0%E8%8A%B1%E5%BC%80/"},{"title":"狗生第一篇观剧感——大江大河","text":"写了小半年的“日记”，实际算不得日记，因为没做到一日一记😂。开始习惯记录平时的所想所感。 刚好最近看到为改革开放40年献礼而不失有趣的国产剧《大江大河》，刚看了几眼就觉得此剧值得一看。看的过程中，经常自己抹眼泪😂，真是一个费纸的剧。所以想到可以边看边写一些情感波动和联系到的东西，应该是种不错的体验，所以就有了狗生的第一篇电视剧观看历程。（出于时间考虑，前25集1.5倍速观看，后面的2倍速观看。发现效果很不错） 导演真的太敬业了，此剧以上世纪七八十年代农村为主场景，从农村长大的我，剧中好多的场景，物件，人设，真的是一看就立马回到小时候的记忆，真棒👍。 人们成熟之后，最节俭的，不是金钱，而是情感，自己很少用，也不向别人索取。只存不取，攒得多了，偶尔在遇见一部电影，一首老歌的时候，倾泄而出。 ——《半山文集》 不说了，上笔记。 这几天撸铁撸得有点过了，麒麟臂疼得不行，不码字了。最后以东宝书记的三轮车结束吧，快上车。","link":"/2019/01/12/%E7%8B%97%E7%94%9F%E7%AC%AC%E4%B8%80%E7%AF%87%E8%A7%82%E5%89%A7%E6%84%9F%E2%80%94%E2%80%94%E5%A4%A7%E6%B1%9F%E5%A4%A7%E6%B2%B3/"},{"title":"用Amaze UI制作Wordpress主题","text":"如题，苦逼的期末考试终于完了，索性RP值可以，所以都过了哈哈哒，别的学校都放假了，我们这还要做一周单片机的课设….由于有学霸这种生物的存在，所以课设基本不用担心了。一句话就是这几天想做（xian）点(de)什(dan)么(teng)。看到Amaze UI正在蓬勃发展，作为中国人的第一个开源项目，虽然跟bootstrap还有一定差距，但相信会越来越好的趁着闲着就玩玩呗，正好一直想做Wordpress主题，就一起吧。 制作完就打包发布吧…原谅我的装13，版本为Walker1.0，Walker取“自行者无疆”。 先上一张图~比较简陋，不过第一次就原谅自己了。 将浏览器缩小至手机比例，可见Amaze UI对移动端的适应还是蛮不错的。 总用时一天，上午学习了下Wordpress主题的制作，下午用Amaze UI实战完成，感觉Amaze UI在文档编写上存在很多问题，很多说明比较含糊，示例也比较少，不过样式还是比较漂亮，对移动端的兼容也很好，值得期待。 最后分享下学习资源： WordPress主题制作入门：http://www.ludou.org/create-wordpress-themes-prepare.html WordPress函数参考：http://codex.wordpress.org/Function_Reference Amaze UI：http://amazeui.org/ 成品主题想要的拿去~哈哈http://pan.baidu.com/s/1mgIaSoo 欢迎留言交流。","link":"/2015/01/26/%E7%94%A8Amaze-UI%E5%88%B6%E4%BD%9CWordpress%E4%B8%BB%E9%A2%98/"},{"title":"用PHP制作ASCII化的图像","text":"用PHP代码，可以将gif格式的图像转换成具有ASCII字符风格化的png图像，很有意思，和大家分享一下效果： 原图： 生成后效果 源代码如下：","link":"/2014/01/01/%E7%94%A8PHP%E5%88%B6%E4%BD%9CASCII%E5%8C%96%E7%9A%84%E5%9B%BE%E5%83%8F/"},{"title":"看乌克兰加入俄罗斯","text":"美欧针对俄罗斯合并克里米亚的举动迄今只实施了力度有限的制裁，有人呼吁美国应拿出当年苏联入侵阿富汗后的那种对抗勇气，但也有人说美国的财力已今非昔比。 美国《华盛顿邮报》网站3月18日刊登了一篇观点文章，题为《奥巴马的决心能阻挡住普京的西进吗？》。文章说，普京在乌克兰问题上现在手里有很多牌。他可以诉诸直接威胁、武装渗透或心理战。就像在叙利亚化学武器危机事件中一样，普京有可能让奥巴马在外交上宣布胜利的同时吞下战略失败的苦果。文章说，西方虽然在经济、军事和意识形态方面远比俄罗斯有力量，但在实际行动中却没能表现出这一点。奥巴马政府拒绝了乌克兰政府向美国寻求紧急军事援助的要求。 文章说，如果普京坚持走对抗路线，西方将需要向乌克兰政府提供长期军事援助。无论是欧洲国家对俄罗斯实施油气制裁，还是加强俄罗斯周边北约成员国的军事力量，都将面临高昂的代价和巨大的困难。但如果普京继续其挑衅行为，西方的这些行动将变得不可避免。文章最后呼吁奥巴马像当年苏联入侵阿富汗后的卡特总统那样，拿出对抗的勇气来。卡特当年的做法包括，召回美国驻苏联大使、对苏联实施谷物禁运、切断对苏联的技术转让以及开始向阿富汗反抗势力提供援助等。 美国福克斯新闻网3月17日的报道说，各方呼吁美国政府对俄罗斯威胁要合并克里米亚的行动做出迅速而严厉的反应，奥巴马总统周一因此签署命令，对普京核心集团里的七个人实施制裁，但制裁对象不包括普京本人。报道说，立即有人批评说奥巴马此举不足以让普京改弦更张。美国参议员麦凯恩敦促美国政府向乌克兰提供军事援助。他说，奥巴马总统在声明中竟然未提及向乌克兰提供军事援助，这让人难以置信。 报道援引美国智库华盛顿近东政策研究所Michael Singh的话说，美国应该尽快对俄罗斯实施一些它原本可能不准备那么快就推出的制裁措施，如对俄罗斯的国防工业和其他寡头实施制裁。他认为美国目前对俄实施制裁方面显得磨磨蹭蹭，美国应该采取更大胆、更迅速的行动。 美国《大西洋月刊》网站3月17日刊登的一篇观点文章说，美国现在太穷了，无法拯救乌克兰。文章说，过去一年中，俄罗斯和西方在乌克兰棋局上的争斗，一直是场经济角力而不是军事角力。普京去年12月承诺购买价值150亿美元的乌克兰债券，并通过折价向乌克兰出售天然气再向其提供70亿美元暗补。而美国方面迄今仅仅承诺向乌克兰提供10亿美元的贷款担保，即使这么少的钱目前也没能在美国参议院获准放行。 文章说，每当美国人开始辩论是否要用美国的财力在乌克兰这个具有重要战略价值的国家推动民主并扩大西方影响力时，人们总喜欢将这种努力与美国二战后在欧洲实施的马歇尔计划相提并论，但有人估计，如果折合成目前的美元，马歇尔计划当年的总支出将约为7,400亿美元，而美国参议院现在连相当于这笔钱1/740的对乌援助资金都不肯放行。 然而就在刚才，乌克兰已近和俄罗斯签订协议，正式加入俄罗斯，之前的一切猜测都已揭晓。美国最终还是没能阻挡俄罗斯，俄罗斯也并没有被美国和欧盟的压力击退。从中可以品味出一些世界格局的变化。","link":"/2014/03/18/%E7%9C%8B%E4%B9%8C%E5%85%8B%E5%85%B0%E5%8A%A0%E5%85%A5%E4%BF%84%E7%BD%97%E6%96%AF/"},{"title":"网页变模糊js代码","text":"愚人节那天打开OSCHINA ，然后等了2秒钟 ，然后网页就全变模糊了，刚以为是浏览器问题，最后发现是愚人节的闹剧。。哈哈代码如下：[code lang=”js”]&lt;![if !IE]&gt;/** by moli*/$(document).ready(function(){if(document.cookie.indexOf(\"lu=\") == -1 ){// 延时2秒setTimeout(\"jQuery.mxblur.interID = setInterval(‘jQuery.mxblur.begin()’, 5)\", 1500);}});$.mxblur = {interID : null,num: 0.01,begin : function() {jQuery.mxblur.blur( jQuery.mxblur.num );if(jQuery.mxblur.num > 3) {jQuery.mxblur.num = 0;if(confirm(\"少年！是不是代码写多了？眼睛模糊了？\")) {alert(\"太累啦，就该歇歇啦，愚人节快乐:)\");clearInterval(jQuery.mxblur.interID );jQuery.mxblur.blur(0);document.cookie = \"lu=lu\";}}jQuery.mxblur.num = jQuery.mxblur.num + 1 /100;},blur : function() {$(\"body\").css(\"-webkit-filter\",\"blur(\"+$.mxblur.num+\"px)\");$(\"body\").css(\"-moz-filter\",\"blur(\"+$.mxblur.num+\"px)\");$(\"body\").css(\"-o-filter\",\"blur(\"+$.mxblur.num+\"px)\");$(\"body\").css(\"-ms-filter\",\"blur(\"+$.mxblur.num+\"px)\");$(\"body\").css(\"filter\",\"blur(\"+$.mxblur.num+\"px)\");$(\"body\").css(\"filter\",\"url(blur.svg#\"+ $.mxblur.num.toFixed(1) +\")\");}}&lt;![endif]&gt;[/code]","link":"/2014/04/07/%E7%BD%91%E9%A1%B5%E5%8F%98%E6%A8%A1%E7%B3%8Ajs%E4%BB%A3%E7%A0%81/"},{"title":"记自动化学院宿舍运动会","text":"学院组织的宿舍运动会，在小伙伴们的鼓动下参加了。4*50接力俺跑最后一棒，结果距终点3m处一个趔趄，以前空翻的姿势滚过了终点……损失惨重啊有木有，还好第三名有奖品，最后得知奖品是一块肥皂！！！而且是四个人一块肥皂泪奔啊。。多么痛的领悟！","link":"/2014/03/27/%E8%AE%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AD%A6%E9%99%A2%E5%AE%BF%E8%88%8D%E8%BF%90%E5%8A%A8%E4%BC%9A/"},{"title":"跨域修改iframe中的内容","text":"有时候会需在自己的网站上显示其他网站的部分内容，虽说php+js可以抓到，但最简洁的方法便是iframe引用了。不过现在的站长学聪明了，大多用js检测是否有人引用自己的页面，一旦检测到立马直接跳转到自己的网站去，这样一来，不仅抓取不成，反而跳到他的网站。。。不过搞代码的，不都是见招拆招吗，你禁止我引用，我就另出奇招。Google上借用了下国外朋友的妙招，成功破解防iframe引用， ;-)。 现在来说说成功引用后的事，引用是成功了，可是有点东西看着碍眼，可是这是别人的页面，想改也改不得啊~这时候就想到了用JS搞定它，跨域替换iframe中的内容，当然也用到了些php，废话不多说，直接贴代码： 先是加载iframe了： [php] [/php] 然后是JS： [code lang=”js”] document.getElementsByTagName(\"iframe\")[0].src=\"replace.php?\"+document.getElementsByTagName(\"iframe\")[0].src; [/code] 再上php，replace.php: [php] [/php] 【注】：str_replace也可以批量替换内容： [php] $replacements = array( “原词1” =&gt; “替换词1”, ‘原词2’ =&gt; ‘替换词2’, ‘原词3’ =&gt; ‘替换词3’ ); $content=str_replace(array_keys($replacements), $replacements, $content); [/php]","link":"/2014/05/20/%E8%B7%A8%E5%9F%9F%E4%BF%AE%E6%94%B9iframe%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9/"},{"title":"2014的第一个决定","text":"2014 年的秒钟过了。新的一年里我会有新的进步，to change…… 在这跨年夜，我也做出了我新年的第一个艰难决定。或许听来没什么，但对我有非凡的意义！ 那就是卸载掉我用了四年多的12级的360软件，这个问题困扰了好久，之所以做出这个艰难的决定是有原因的。仔细看后相信大家也会有所体会。 360安全卫士的前身 研发团队只有5个人，7000万台电脑（当时网民的95%以上）被“流氓”，年纯利润达6000万； 以造谣、诽谤、抹黑对手的方式打败了雅虎、马云、百度、CNNIC等业界赫赫有名的公司； 对外以“天使投资”的伪善面目示人，暗地里却拥有国内最大的论坛枪手公司，数万枪手在一夜之间让对手由天使变成恶魔； 编造“杀毒公司造病毒”、“杀毒软件永久免费”等谎言，企图以杀毒软件的模式让“3721借尸还魂”； 核心团队中不断有人受良心谴责而出走，“流氓教父”周鸿祎已是孤家寡人； ……这就是周鸿祎和他的奇虎360，一位尚未露出真面目的业界枭雄，一个外示忠厚，内藏奸诈的“IT界岳不群”。 周鸿祎以3721起家，一年暴赚6000万 1995年，周鸿祎毕业于西安交大管理学院系统工程系，获硕士学位； 1998年10月，周鸿祎创立因特国风公司，该公司唯一的产品，就是此后在业界鼎鼎大名的3721中文上网插件。 2002年，3721达到辉煌的顶峰，该插件一年之内侵入了7000万台电脑，年度收入超过1.4亿，纯利润超过6000万。当年的春节晚会上，周鸿祎一掷千金，花了2000万元，把“不管三七二十一，中文上网更容易”这句话像狗皮膏药一样贴的CCTV到处都是。 与之对照的是，2002年，马云的阿里巴巴、李彦宏的百度、丁磊的网易等公司还处于破产和盈利的分界线上，即使有盈利，也不过区区数百万，比3721这个流氓插件带来的利润还少了一个数量级。 与之对照的是，2002年的杀毒市场不温不火，整个杀毒行业加起来的纯利润，也不会比3721多多少。 3721采用病毒技术成功，误导一代程序员 3721这个插件，在技术上也几乎达到了技术上的顶峰，它已经深入到了系统的底层，采用了很多病毒都未必会采用的驱动、变形、反卸载、自我保护、挂钩注入等方式。即使是专业程序员，要想把它彻底卸载，有时也是束手无策。 当时的很多病毒编写者对3721的驱动技术赞赏有加，甚至连白道中赫赫有名的江海客（安天实验室的创始人）也写过一篇专门论述3721插件为什么是病毒的文章。 盛极而衰，在滚滚而来的暴利面前，3721的口碑也被破坏到了顶点，其坏口碑甚至影响到了其同行的品牌。有人甚至把新浪、搜狐这样的业界领袖，也与3721归于一类，都称之为“互联网骗子、互联网流氓”。 更为恶劣的是，3721的赚钱效应带坏了一大批程序员，误导了一大批共享软件。很多共享软件的作者，看到这种恶劣的赚钱手段，也开始照样学习。有的共享软件还直接捆绑了3721插件。每次安装3721之后，都会从周鸿祎那里拿到0.3元到1元不等的报酬。 这种“赚块钱”的方式，从思想底层深入影响到了中国软件界的风气，从此再也没有人深入钻研技术，没有人研究用户需求，而是想怎么“插入更多电脑，插入之后让用户卸不掉，从3721那里分更多钱”。 这种“劣币驱逐良币、坏蛋风光好人遭殃”的榜样，使得当时中国互联网界一片乌烟瘴气，群魔乱舞。 3721的小手段，打败百度 3721的成长史，周鸿祎的成功史，就是一部网民的血泪史，也是其它公司的被欺压史。 周鸿祎以病毒技术欺压用户，使其无法卸载；以卑劣手段抹黑、诽谤、谣言等打败对手，时期最擅长的东西。从百度到雅虎，从马云、杨致远到李彦宏，都是周鸿祎的手下败将。 百度和雅虎的结仇，是因为百度有个“百度搜霸”，功能与3721插件类似，提供中文网址功能。因为有了这个，3721动员了媒体，在媒体上指责百度无法卸载；动员了论坛，在论坛上指责百度流氓；给国家有关机构写揭发信，说百度支持某些国家法律不许可的东西，让百度时常无法访问。 更严重的是，3721在卸载的时候甚至会释放一些驱动，其作用只是让百度、cnnic等这些对手的产品发生蓝屏，使用户无法正常使用对手的产品。 对于CNNIC，对付的手段就更加简单。周鸿祎在媒体上宣称是“CNNIC是拉着政府虎皮欺压小企业的骗子机构”；利用枪手山 这些媒体的、谣言的、技术的手段用出来，无论百度还是CNNIC，都被打得屁滚尿流。 流氓3721卖了10亿人民币，周鸿祎卧底雅虎上演“无间道” 2003年，口碑已经沉到18层地狱的3721，在周鸿祎手里已经成了热山芋，上不了市（美国的法律不是好玩的），收入有降低的趋势（网民在成熟）。结果，这时候有个“白衣白痴”出现了，美国雅虎花费1.2亿美金收购了3721，将其重组为雅虎中国公司。 按照当时的汇率，这个价钱差不多是10亿人民币。 周鸿祎本来想趁着这个机会，重新把自己包装一下，成为受人尊敬的“互联网领袖”。谁知道美国雅虎的总部管理极其严格，根本不给其发挥的机会。结果一年之后，不得不离开雅虎公司。 这个离开，也不是白离开的。事先，周鸿祎已经做了很多关联性合同，把自己的心腹派到美国雅虎去学习雅虎搜索的核心技术，而且把雅虎的资源七转八转弄走了一大批，人才、合同，什么都要。 当时，google如日中天，百度也刚刚上市，周鸿祎满心欢喜离开雅虎，的想打造一个自己的搜索帝国。要做大事，当然得要钱！搜索更是一个吃钱的行业。微软投入五十亿美金，连个响动都没听到。 募集资金，就成了周鸿祎的头等难题。因为走的不愉快，杨致远甚至扬言“在全世界的VC中封杀周鸿祎”。而周鸿祎自己只有卖3721的那点钱，做搜索实在是杯水车薪。 于是，周鸿祎想了个办法，宣称“做社区搜索，从细分市场切入搜索，打造一个新google”。 不得不说，这个口号非常的有诱惑力，周从红杉资本等等VC中总算骗来了5000万美金，一个全新的品牌：“奇虎”开张了。 这就是现在所谓“奇虎360”的流氓前世。尽管周鸿祎借助“天使投资人”这个头衔，骗到了无数VC和无知的网民MM，但他“流氓教父”的臭底子，算是怎么都弄不掉了。用奇虎总裁齐向东的话说“你干过一次流氓，这辈子就永远是流氓”。 当然，这句话是齐向东骂马云的。因为现在3721已经卖给了雅虎中国……也就是马云旗下的一个子公司。 奇虎360屠杀3721 周鸿祎翻脸咬雅虎 周鸿祎想做“社区搜索”，但搜索要求的技术门槛很高，怎么办呢？ 流氓教父当然又想起了他赖以成功的办法：IE插件。只不过，这次他的办法更为隐蔽，对于网民的迷惑性更强，他做了一个专杀3721的“3721增强版”，也就是后来的360安全卫士。 2006年，中国互联网一片黑暗。以3721为首的流氓软件闹得乌烟瘴气。而网民的忍耐力也被逼到了极限。这时候，周鸿祎的奇虎以救世主的姿态出现了：他发布了奇虎360安全卫士。而开发这个东西的核心，就是曾经编写过3721插件的核心团队，而且这个团队的骨干人员，又曾经去美国雅虎深造过驱动级插件编写技术。 上帝能够亲手毁灭他创造的人类，创始人周鸿祎当然也有办法毁灭3721。这时候的3721已经完全卖给雅虎，杀掉之后即可以给自己带来荣誉，又能重创雅虎杨致远的中国战略，报自己被fire的一箭之仇。 果然，新流氓之王轻而易举的干掉了老流氓之王。3721插件、雅虎助手这两个雅虎旗下的流氓软件（当初周卖给他们的）被杀的丢盔卸甲。基于“敌人的敌人就是朋友”的简单理论，很多网民被迷惑，把360安全卫士奉之为神，完全忘记了它不过是脱胎于3721的新一代流氓而已。 我这么说，可不是存在什么偏见。君若不信，请去翻看3721插件2005版的说明书，其中一个功能说明明明白白写着： “彻底查杀3878个恶意脚本及精选的1200种流行木马！” 再想想360安全卫士一直以来宣称的：对于木马病毒强大的木马查杀能力。难道聪明你，想不到其中有什么猫腻么？ 大揭秘：周鸿祎出走雅虎前，用3721埋下木马伏兵 说到这里，咱们必须提到一个东西，那就是奇虎旗下的枪手队伍。普通用户可能不知道，在周鸿祎的控制下，有数万人的论坛枪手队伍。这个队伍的战斗力极强，基本可以覆盖全国95%以上的论坛。 之所以能建成这个队伍，有三个重要因素：第一，Discuz！是国内最大的论坛程序提供商之一，用该程序建成的论坛，占据国内论坛的绝大部分，而周鸿祎正是该公司最大的股东。 第二，奇虎公司，当初要做论坛搜索，还有所谓的“蜘蛛计划”。借助这个名头，与许多论坛的版主达成了合作关系，并在实际上能够控制论坛。 第三，周鸿祎舍得花钱，而且找准了枪手群体。在周控制的枪手队中，绝大部分是在校大学生和残疾人，他们兢兢业业，而且可以忍受微薄的报酬。而周也曾在私下自我赞美说，“咱们用这些弱势群体，也算扶危济困了。” 在制定进入杀毒行业计划的那一天起，周的枪手队就有计划的开始散步杀毒厂商的各类谣言，这些谣言包括： 1、杀毒行业存在暴利，杀毒厂商在吸吮用户的血汗。 2、杀毒公司自己造病毒。 3、中国的杀毒公司使用别人的引擎，没有自己的技术。 4、杀毒公司只能杀毒，不能杀木马，360杀木马更专业。 大家想一想，最近论坛上是不是成批出现了类似的帖子？发帖人是不是新注册的用户？那些经常置顶这些帖子的论坛，是不是奇虎联盟广告的成员？ 没错！奇虎在利用论坛抹黑杀毒行业，然后以“天使”的姿态来进入。 这些谣言，尽管都是假的，但对于普通用户来讲，仍然具有一定的迷惑性，我也就勉为其难的驳斥一下下，免得大家被奇虎利用了当枪。 第一个，关于杀毒公司造病毒的说法。瑞星是91年成立的，江民是96年成立，金山进入杀毒行业稍晚，但从wps开始算，也拥有将近20年的历史。如果他们制造病毒，恐怕早就暴露了吧？更何况，制造病毒属于刑事犯罪，严重者甚至面临最高十年的徒刑。这样的严刑之下，谁敢真的造毒？（说到这里，有个问题需要严格分清楚。周鸿祎通过3721释放的驱动和dll，如果按照严格病毒的意义套，属于高科技的灰色软件，在法律意义上很难定罪。） 第二个，杀毒行业存在暴利，这个说法更是无稽之谈。金山毒霸做了那么久，2007年的收入不过1亿，利润能有3千万就不错。30%的利润，即使放在传统行业，也很难说是暴利。而金山在杀毒行业的利润率还算高的。 瑞星跟卡巴一直在打价格战，甚至便宜到了20块钱半年，30块钱一年的地步。使用一年的杀毒软件，只相当于一斤多猪肉，15斤西红柿。这样的价格，能叫暴利简直就是有鬼。 第三个，关于自主技术。金山在进入杀毒行业之初，确实购买过俄罗斯的引擎。江民杀毒软件的初期，也借鉴过AVP（现在叫做卡巴斯基）的引擎结构。瑞星不知道，不敢瞎说。但大家要知道，靠购买和借鉴技术是不能长久发展的，尤其是现在洋鬼子的知识产权保护越来越严格，copy国外一个电影都要几百万的索赔，买引擎要多少钱？国内厂商才挣多少？ So，国内三个厂商的技术，百分百是自己的不用质疑。 第四个，杀毒公司只能杀毒，不能杀木马，360杀木马更专业。这个就更搞笑，周鸿祎从3721就开始嚷嚷“杀木马”，流氓软件的杀木马能力更强？好像在说用黑社会流氓去抓小偷更有效一样。 而且，木马本来就是病毒的一种，各位可以在google搜索trojan试试看，看哪个主流厂商不把木马列为病毒的？ 用“免费杀毒”让3721借尸还魂 除了谣言之外，周鸿祎还使用了最狠的一招：免费！ 中国网民穷，中国网民好骗，他们的记性也不大好，忘记了当初“3721也是可以查杀1200种流行木马”的。 而且，周鸿祎借用了一个似是而非的理论：Google是免费的，QQ是免费的，所以杀毒也应该是免费的。“免费商业模式是成功的”，用户尽管免费用，永久免费。 他没有告诉网民的是：那些免费的东西，永远会在别的地方收费。Google搜索免费，所以他的结果上方是广告；QQ免费，所以会有一块钱一件的QQ秀，不花钱你就得光着屁股裸奔。 当记者采访这个“免费杀毒软件的商业模式”时，周说，“没想好”。 他又在习惯性的说谎了。“没想好”，这句话说出去的同时，奇虎360已经和新浪签订了一个合同，利用360卫士和360杀毒在奥运期间弹出新闻窗口。16天，新浪支付200万。 爆赚吧？如果按照这个价码，奇虎这个免费的杀毒软件一年最少的收入是：200万*365/16=4562万。如果加大弹出力度，一年弄三五亿不成问题。 而按照3721当初的价格，2002年的收入为1.4亿的话，周鸿祎借助免费杀毒软件耍流氓，每年至少可以赚10亿。 这就是“免费杀毒软件”背后的小算盘！试问，现在美滋滋的用着360杀毒的用户，你知道将来的电脑会被流氓占据么？ 有人说，大不了我不用！笑话，2002年您连3721那个小插件都没法卸载，现在，您还有办法卸载360杀毒么？ 郭德纲怎么说来着：流氓会武术，谁也挡不住。周鸿祎是流氓，他有硕士头衔，可以称之为“高科技的武术”。实践证明，无论法律还是用户，都是无法阻挡这个流氓的。 奇虎技术团队遭受良心谴责，不断有人出走 前不久，有个疑似奇虎前员工的自白书在网上疯传，其中写到：“因为360要战略转型，我们不堪良心谴责，不堪工作压力要走了。我们项目组，都被调到一个新的项目组里！研分什么大家知道吗？！弹窗广告！” OK，这个员工帖子是否真实代考，而周鸿祎的核心团队不断有人出走，却是千真万确的事情。大家还记得田健么？原3721副总裁，随周鸿祎进入雅虎。之后与周反目成仇，甚至到了当面对骂的地步。 大家还记得舒讯么？3721时代的市场经理，在媒体和论坛上上蹿下跳，后来却进入对手公司百度担任企业部市场总监了。 大家还记得肖洁么？她从3721时代跟随周鸿祎，历经雅虎、奇虎，一两个人撑起公关团队，为周鸿祎的害人事业立下汗马功劳，后来同样进入百度寻求新发展。 傅盛，2006年创建360安全卫士团队，周鸿祎发布360杀毒软件的同时辞职。其中原因不得而知，想来，做这样一个流氓之王的心理压力，不是普通人能够承受的。 …… 这个名单，可以列出很长。大家如果有兴趣，可以利用google、百度去搜索3721的旧员工，就会发现很多有意思的东西。 尽管可能有其它原因，但我还是以最大的善意相信，这些员工的出走，多多少少和良心有一点点关系。 这篇文章很长，而且远远没有结束。奇虎，周鸿祎，只要存在一天，他的黑幕就会不断涌现。有时候，发现笔真的很沉重，文字真的很苍白，不能把黑暗人心写出万分之一。 但，只要在写，就说明与黑暗对抗的心还在。也许这就是生活的可爱之处吧。","link":"/2014/01/01/2014%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%86%B3%E5%AE%9A/"},{"title":"Flutter学习之旅——实用入坑指南","text":"开篇： 一如前端深似海，从此节操是路人，从此再无安宁日，从此红尘是路人。要说技术更迭速度，还有比前端更快的么😂根本停不下来。这不，Google刚发布Flutter不到一年时间，1.0正式版发布不到两个月。阿里系的闲鱼老大哥，已经率先用Flutter重构了闲鱼，虽然没完全重构，但高频的重度页面都是Flutter的了。这一幕似曾相识，当初RN出来的时候不也是闲鱼团队先吃的螃蟹吗，在这里向闲鱼团队的老哥们致敬🐣。 既然老大哥都出动了，也侧面验证了这项技术的可行性。当小弟的也不能落后嘛，每天抽时间断断续续的学了两周时间，仿部分知乎的客户端，撸了一套客户端出来。前一周主要是熟悉Dart语言和常规的客户端布局方式，后一周主要是掌握使用HTTP的请求、下拉上拉、左滑右滑、长按等常用手势、相机调用、video播放等进阶用法。 两周下来，基本上可以开发80%以上常见的客户端需求。 前期一直在用simulator开发，略有卡顿，心中难免有些疑惑。结果最后release打包到手机后，竟然如丝般顺滑！！！简直喜出望外，完全可以睥睨原生开发，在这一点上的确要优于目前的RN。最重要的是作为Materail Design极简又有质感风格的鸭狗血粉丝，Flutter造出来的界面简直倍爽。至此正式入坑Flutter开发。Google万岁！ Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。 Beta1版本于2018年2月27日在2018 世界移动大会公布。Beta2版本2018年3月6日发布。1.0版本于2018年12月5日(北京时间)发布 这里把学习过程中一些常用高频的东西总结出来，基本能满足大多数情况下的开发需求。 完整的代码： https://github.com/flute/zhihu_flutter 欢迎加入Flutter开拓交流，群聊号码：236379502 Scaffold 主要的属性说明 appBar：显示在界面顶部的一个 AppBar body：当前界面所显示的主要内容 floatingActionButton： 在 Material 中定义的一个功能按钮。 persistentFooterButtons：固定在下方显示的按钮。https://material.google.com/components/buttons.html#buttons-persistent-footer-buttons drawer：侧边栏控件 bottomNavigationBar：显示在底部的导航栏按钮栏。可以查看文档：Flutter学习之制作底部菜单导航 backgroundColor：背景颜色 resizeToAvoidBottomPadding： 控制界面内容 body 是否重新布局来避免底部被覆盖了，比如当键盘显示的时候，重新布局避免被键盘盖住内容。默认值为 true。 底部菜单 bottomNavigationBar，Tab栏切换 TabBar123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293TabController controller;@overridevoid initState() { super.initState(); // initialize the tab controller // vsync ?? controller = new TabController(length: 5, vsync: this);}@overridevoid dispose() { // dispose of tab controller controller.dispose(); super.dispose();}...body: new TabBarView( children: &lt;Widget&gt;[new HomeTab(), new IdeaTab(), new ColleagueTab(), new MessageTab(), new MeTab()], controller: controller,),bottomNavigationBar: new Material( // background color of bottom navigation bar color: Colors.white, textStyle: new TextStyle( color: Colors.black45 ), child: new TabBar( unselectedLabelColor: Colors.black45, labelColor: Colors.blue, controller: controller, tabs: &lt;Tab&gt;[ new Tab( child: new Container( padding: EdgeInsets.only(top: 5), child: new Column( children: &lt;Widget&gt;[ Icon(Icons.home, size: 25,), Text('首页', style: TextStyle(fontSize: 10),) ], ), ), ), new Tab( child: new Container( padding: EdgeInsets.only(top: 5), child: new Column( children: &lt;Widget&gt;[ Icon(Icons.access_alarm, size: 25,), Text('想法', style: TextStyle(fontSize: 10),) ], ), ), ), new Tab( child: new Container( padding: EdgeInsets.only(top: 5), child: new Column( children: &lt;Widget&gt;[ Icon(Icons.access_time, size: 25,), Text('大学', style: TextStyle(fontSize: 10),) ], ), ), ), new Tab( child: new Container( padding: EdgeInsets.only(top: 5), child: new Column( children: &lt;Widget&gt;[ Icon(Icons.account_balance_wallet, size: 25,), Text('消息', style: TextStyle(fontSize: 10),) ], ), ), ), new Tab( child: new Container( padding: EdgeInsets.only(top: 5), child: new Column( children: &lt;Widget&gt;[ Icon(Icons.adb, size: 25,), Text('我的', style: TextStyle(fontSize: 10),) ], ), ), ), ], ),), 顶栏自定义 appbar：title属性顶部搜索栏: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960@overrideWidget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: searchBar(), backgroundColor: Colors.white, bottom: new Text('bottom'), ), body: new Container() );}/** * 顶部搜索栏 */Widget searchBar() { return new Container( child: new Row( children: &lt;Widget&gt;[ new Expanded( child: new FlatButton.icon( color:Color.fromRGBO(229, 229, 229, 1.0), onPressed: (){ Navigator.of(context).push(new MaterialPageRoute(builder: (context){ return new SearchPage(); })); }, icon: new Icon( Icons.search, color: Colors.black38, size: 16.0, ), label: new Text( &quot;诺奖得主为上课推迟发布会&quot;, style: new TextStyle(color: Colors.black38) ), ), ), new Container( child: new FlatButton.icon( onPressed: (){ Navigator.of(context).push(new MaterialPageRoute(builder: (context){ return new AskPage(); })); }, icon: new Icon( Icons.border_color, color: Colors.blue, size: 14.0 ), label: new Text( '提问', style: new TextStyle(color: Colors.blue), ), ), ) ], ), );} 图片圆角1234567891011Container( margin: EdgeInsets.only(right: 5), decoration: new BoxDecoration( shape: BoxShape.circle, image: new DecorationImage( image: new NetworkImage(avatarUrl), ) ), width: 30, height: 30,), 数组里动态添加组件https://github.com/flutter/flutter/issues/3783 12345678910bool notNull(Object o) =&gt; o != null;Widget build() { return new Column( children: &lt;Widget&gt;[ new Title(), new Body(), shouldShowFooter ? new Footer() : null ].where(notNull).toList(), );} Text显示指定行数，超出后显示省略号123456Text( content, maxLines: 3, overflow: TextOverflow.ellipsis, style: new TextStyle(fontSize: 14, color: Colors.black54),), margin 负值https://stackoverflow.com/questions/42257668/the-equivalent-of-wrap-content-and-match-parent-in-flutter 123456789101112131415return Container( width: 40, height:40, // flutter中的margin没有负值的说法 // https://stackoverflow.com/questions/42257668/the-equivalent-of-wrap-content-and-match-parent-in-flutter transform: Matrix4.translationValues(-20.0, 0.0, 0.0), decoration: new BoxDecoration( border: Border.all(width: 3, color: Colors.white), color: Colors.black, shape: BoxShape.circle, image: new DecorationImage( image: new NetworkImage('https://pic3.zhimg.com/50/d2af1b6b1_s.jpg') ) ),); 图片自适应填满containerhttps://stackoverflow.com/questions/45745448/how-do-i-stretch-an-image-to-fit-the-whole-background-100-height-x-100-width 123456789new Container( height: 200, decoration: new BoxDecoration( image: new DecorationImage( image: NetworkImage('https://pic3.zhimg.com/50/v2-f9fd4b13a46f2800a7049a5724e5969f_400x224.jpg'), fit: BoxFit.fill ) ),), 布局方式justify-content: mainAxisAlignmentalign-items: crossAxisAlignment column 设置crossAxisAlignment: stretch后子元素宽度为100%，如果想让子元素宽度不为100%， 将其包裹在Row元素中即可。 flutter row and columnhttps://medium.com/jlouage/flutter-row-column-cheat-sheet-78c38d242041 捕捉点击事件使用GestureDetector包裹widget即可。 1234567child: new GestureDetector( onTap: click, child: Text( name, style: TextStyle(color: Colors.black87), ), ), Dart 数组方法https://codeburst.io/top-10-array-utility-methods-you-should-know-dart-feb2648ee3a2 PopupMenuButton 下拉弹窗菜单https://stackoverflow.com/questions/43349013/how-to-open-a-popupmenubutton 123456789101112131415161718192021222324252627282930313233343536373839class DetailPage extends StatefulWidget { @override DetailPageState createState() =&gt; DetailPageState();}class DetailPageState extends State&lt;DetailPage&gt; { final GlobalKey _menuKey = new GlobalKey();............ child: new Row( children: &lt;Widget&gt;[ new Container( child: new GestureDetector( onTap: () { dynamic state = _menuKey.currentState; state.showButtonMenu(); }, child: new Container( child: new Text('默认排序'), ), ), ), new PopupMenuButton( icon: Icon(Icons.keyboard_arrow_down), offset: Offset(0, 50), key: _menuKey, itemBuilder: (_) =&gt; &lt;PopupMenuItem&lt;String&gt;&gt;[ new PopupMenuItem&lt;String&gt;( child: const Text('默认排序'), value: 'default'), new PopupMenuItem&lt;String&gt;( child: const Text('按时间排序'), value: 'timeline'), ], onSelected: (_) {} ) ], ), 分割线水平分割线 Divider垂直分割线 VerticalDivider (无效？？？) swiperhttps://pub.dartlang.org/packages/flutter_swiper 123456789101112131415161718import 'package:flutter_swiper/flutter_swiper.dart';...var images = [ 'https://pic3.zhimg.com/v2-5806d9e33e36fa772c8da56c931bb416_b.jpg', 'https://pic1.zhimg.com/50/v2-f355ca177e011626938b479f0e2e3e03_hd.jpg', 'https://pic2.zhimg.com/v2-d8e47ed961b93b875ad814104016bdfd_b.jpg'];child: new Swiper( itemBuilder: (BuildContext context,int index){ return new Image.network(images[index], fit: BoxFit.cover,); }, itemCount: 3, pagination: new SwiperPagination(), //control: new SwiperControl(), ), floatingActionButton 浮动buttonhttps://proandroiddev.com/a-deep-dive-into-floatingactionbutton-in-flutter-bf95bee11627 floatingActionButton 配合 Scaffold 使用最佳 123456789Scaffold( floatingActionButton: new FloatingActionButton( onPressed: (){}, child: Icon(Icons.edit), //mini: true, ), // 默认右下角，可设置位置。 floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,) 滑动视图SingleChildScrollView 水平方向滑动 scrollDirection: Axis.horizontal 高斯模糊https://stackoverflow.com/questions/43550853/how-do-i-do-the-frosted-glass-effect-in-flutter 123456import 'dart:ui';new BackdropFilter( filter: new ImageFilter.blur(sigmaX: 10.0, sigmaY: 10.0), child: Text(desc, style: TextStyle(color: Colors.white),),), 对话框弹窗https://docs.flutter.io/flutter/material/AlertDialog-class.html AlertDialog 12345678910111213141516171819202122232425262728293031323334353637void _showDialog(BuildContext context) { // flutter defined function showDialog( context: context, builder: (BuildContext context) { // return object of type Dialog return AlertDialog( title: Text('Rewind and remember'), content: SingleChildScrollView( child: ListBody( children: &lt;Widget&gt;[ Text('You will never be satisfied.'), Text('You\\’re like me. I’m never satisfied.'), ], ), ), actions: &lt;Widget&gt;[ // usually buttons at the bottom of the dialog new FlatButton( child: new Text(&quot;Close&quot;), onPressed: () { Navigator.of(context).pop(); }, ), ], ); }, ); } // 调用....onPressed: (){ _showDialog(context);},.... HTTP 请求、JSON编码解码https://flutterchina.club/networking/ 12345678910111213141516171819202122232425262728293031// 加载库import 'dart:convert';import 'dart:io';// 请求try { var request = await httpClient.getUrl(Uri.parse(url)); var response = await request.close(); if (response.statusCode == HttpStatus.OK) { var json = await response.transform(UTF8.decoder).join(); var data = JSON.decode(json); result = data['origin']; } else { result = 'Error getting IP address:\\nHttp status ${response.statusCode}'; }} catch (exception) { result = 'Failed getting IP address';}// 保存返回的数据// error: setState() called after dispose()// If the widget was removed from the tree while the message was in flight,// we want to discard the reply rather than calling setState to update our// non-existent appearance.if (!mounted) return;setState(() { _ipAddress = result;}); 时间控制：延时1234567891011import 'dart:async';Future&lt;Null&gt; _onRefresh() { Completer&lt;Null&gt; completer = new Completer&lt;Null&gt;(); new Timer(new Duration(seconds: 3), () { print(&quot;timer complete&quot;); completer.complete(); }); return completer.future; } 下拉刷新 RefreshIndicator123456789new RefreshIndicator( onRefresh: _onRefresh, child: new SingleChildScrollView( child: new Container( padding: EdgeInsets.all(10), child: new Text(_jsonData), ), ),) 上拉加载更多https://juejin.im/post/5b3abfc4518825622c14a6f1 1234567891011121314151617181920212223ScrollController _controller = new ScrollController(); @override void initState() { super.initState(); _controller.addListener((){ if(_controller.position.pixels == _controller.position.maxScrollExtent) { print('下拉加载'); _getMoreData(); } }); } @override void dispose() { _controller.dispose(); super.dispose(); } ... scroll controller: _controller ... flutter运行模式https://www.jianshu.com/p/4db65478aaa3 flutter学习资源http://flutter.link/ 1234➜ zh git:(master) ✗ flutter cleanDeleting 'build/'.➜ zh git:(master) ✗ rm -rf ios/Flutter/App.framework ios/Flutter/Flutter.framework➜ zh git:(master) ✗ rm -rf /Users/ludis/Library/Developer/Xcode/DerivedData/Runner- 报错解决1、在安卓真机release后 ios simulator无法编译 1234567891011121314Launching lib/main.dart on iPhone X in debug mode...Xcode build done. 1.0sFailed to build iOS appError output from Xcode build:↳** BUILD FAILED **Xcode's output:↳=== BUILD TARGET Runner OF PROJECT Runner WITH CONFIGURATION Debug ===diff: /Users/ludis/Desktop/opt/flutter/zh/ios/Pods/Manifest.lock: No such file or directoryerror: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.Could not build the application for the simulator.Error launching application on iPhone X.Exited (sigterm) 解决 12cd iospod install 常见问题: https://www.jianshu.com/p/bf3002de6a5e Flutter scroll animationhttps://medium.com/flutter-community/scrolling-animation-in-flutter-6a6718b8e34f 布局指南在scrollView的滚动布局中，如果使用column组件，并为其添加Expanded扩展子组件的话，这两者会存在冲突。如果坚持要使用此布局，在column设置mainAxisSize: MainAxisSize.min，同时子组件由Expanded改为Flexible即可。 表单、校验https://www.cnblogs.com/pengshaomin/p/8945720.html 1、单行文本输入框 TextFormField 12345678new TextFormField( maxLength: 32, onSaved: (val)=&gt; this._config = val, validator: (v)=&gt;(v == null || v.isEmpty)?&quot;请选择配置&quot;: null, decoration: new InputDecoration( labelText: '配置', ), ), 2、多行输入框 keyboardType: TextInputType.multiline, 12345new TextField( keyboardType: TextInputType.multiline, maxLines: 3, maxLength: 100, ), 2、单选Radio 1234567891011new Radio( groupValue: this.radio, activeColor: Colors.blue, value: 'aaa', onChanged: (String val) { // val 与 value 的类型对应 this.setState(() { this.radio = val; // aaa }); }, ), 3、复选 CheckBox 123456789new Checkbox( value: flutter, activeColor: Colors.blue, onChanged: (val) { setState(() { flutter = val; }); }, ), 4、switch 123456789new Switch( activeColor: Colors.green, value: flutter, onChanged: (val) { setState(() { flutter = val; }); },), 5、slider 12345678910new Slider( value: _slider, min: 0.0, max: 100.0, onChanged: (val) { setState(() { _slider = val; }); },), 6、DateTimePicker 12345678910111213141516171819202122232425262728293031323334// 设置存储日期的变量DateTime _dateTime = new DateTime.now();// 显示文字Text，设置点击事件，点击后打开日期选择器 new GestureDetector( onTap: (){ _showDatePicker(); }, child: new Container( child: new Text(_dateTime.toLocal().toString()), ), ), // 打开日期选择器 void _showDatePicker() { _selectDate(context); } Future&lt;Null&gt; _selectDate(BuildContext context) async { final DateTime _picked = await showDatePicker( context: context, initialDate: _dateTime, firstDate: new DateTime(2016), lastDate: new DateTime(2050) ); if(_picked != null) { print(_picked); setState(() { _dateTime = _picked; }); } } 7、TimePIcker 12345678910111213141516171819202122232425 TimeOfDay _time = new TimeOfDay.now(); // text显示当前时间new GestureDetector( onTap: _showTimePicker, child: new Text(_time.format(context)), ), // 显示timpicker void _showTimePicker(){ _selectTime(context); } Future&lt;Null&gt; _selectTime(BuildContext context) async { final TimeOfDay _picker = await showTimePicker( context: context, initialTime: _time, ); if(_picker != null) { print(_picker); setState(() { _time = _picker; }); } } Toast/showSnackBarshowSnackBar: https://material.io/design/components/snackbars.html#usage 123456789101112void _showToast(BuildContext context) { final scaffold = Scaffold.of(context); scaffold.showSnackBar( SnackBar( content: const Text('Added to favorite'), action: SnackBarAction( label: 'UNDO', onPressed: scaffold.hideCurrentSnackBar ), ), );} Toast: https://github.com/PonnamKarthik/FlutterToast 1234567891011void _showToast(String title) { Fluttertoast.showToast( msg: title, toastLength: Toast.LENGTH_SHORT, gravity: ToastGravity.CENTER, timeInSecForIos: 1, backgroundColor: Color.fromRGBO(0, 0, 0, 0.85), textColor: Colors.white );} Popover/popuppopup: CupertinoActionSheet http://flatteredwithflutter.com/actionsheet-in-flutter/ 123456789101112131415161718192021222324252627282930313233343536373839404142434445new MaterialButton( onPressed: () { _showActionSheet(); }, child: new Text('show ActionSheet', style: TextStyle(color: Colors.white),), color: Colors.greenAccent,), void _showActionSheet() { showCupertinoModalPopup( context: context, builder: (BuildContext context) =&gt; actionSheet(), ).then((value) { Scaffold.of(context).showSnackBar(new SnackBar( content: new Text('You clicked $value'), )); });}Widget actionSheet(){ return new CupertinoActionSheet( title: new Text('title'), message: const Text('your options are'), actions: &lt;Widget&gt;[ CupertinoActionSheetAction( child: const Text('yes'), onPressed: (){ Navigator.pop(context, 'yes'); }, ), CupertinoActionSheetAction( child: const Text('no'), onPressed: (){ Navigator.pop(context, 'no'); }, ) ], cancelButton: CupertinoActionSheetAction( child: new Text('cancel'), onPressed: () { Navigator.pop(context, 'Cancel'); }, ), );} IOS风格组件https://flutter-es.io/widgets/cupertino/ Dismissible 滑动删除https://flutter.io/docs/cookbook/gestures/dismissible 1234567891011121314151617new Dismissible( // Each Dismissible must contain a Key. Keys allow Flutter to // uniquely identify Widgets. key: Key(item), onDismissed: (direction) { setState(() { items.removeAt(index); }); // Then show a snackbar! Scaffold.of(context) .showSnackBar(SnackBar(content: Text(&quot;$item dismissed&quot;))); }, // Show a red background as the item is swiped away background: Container(color: Colors.red), child: ListTile(title: Text('$item')),); Swipe 左滑右滑删除https://github.com/letsar/flutter_slidable 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162Widget _swipe(int i, String title, String desc) { return new Slidable( delegate: new SlidableDrawerDelegate(), actionExtentRatio: 0.25, child: new Container( color: Colors.white, child: new GestureDetector( onTap: (){}, onDoubleTap: (){}, onLongPress: (){}, child: new ListTile( leading: new CircleAvatar( backgroundColor: Colors.grey[200], child: new Text( '$i', style: TextStyle(color: Colors.orange), ), foregroundColor: Colors.white, ), title: new Text( '$title', maxLines: 1, overflow: TextOverflow.ellipsis, style: TextStyle(color: Colors.black87, fontSize: 16), ), subtitle: new Text( '$desc', style: TextStyle(color: Colors.blue[300]), ), ), ) ), actions: &lt;Widget&gt;[ new IconSlideAction( caption: 'Archive', color: Colors.blue, icon: Icons.archive, onTap: () =&gt; _showSnackBar('Archive'), ), new IconSlideAction( caption: 'Share', color: Colors.indigo, icon: Icons.share, onTap: () =&gt; _showSnackBar('Share'), ), ], secondaryActions: &lt;Widget&gt;[ new IconSlideAction( caption: 'More', color: Colors.black45, icon: Icons.more_horiz, onTap: () =&gt; _showSnackBar('More'), ), new IconSlideAction( caption: 'Delete', color: Colors.red, icon: Icons.delete, onTap: () =&gt; _showSnackBar('Delete'), ), ], );} 常用手势 GestureDetector12345new GestureDetector( onTap: (){_showToast('点击: $i');}, onDoubleTap: (){_showToast('连点: $i');}, onLongPress: (){_showToast('长按: $i');},) flutter 常用组件https://github.com/flutter/plugins camera / image_pickerhttps://medium.com/flutter-community/implementing-camera-feature-in-flutter-f7f6a7a5e6dd image_picker： (最常用场景，从相册选择或拍照得到照片) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455dynamic _picture;dynamic _gallery;new FlatButton.icon( icon: Icon(Icons.camera), label: Text('选择头像'), onPressed: (){ _optionsDialogBox(); },), Future&lt;void&gt; _optionsDialogBox() { return showDialog(context: context, builder: (BuildContext context) { return AlertDialog( content: new SingleChildScrollView( child: new ListBody( children: &lt;Widget&gt;[ GestureDetector( child: new Text('Take a picture'), onTap: openCamera, ), Padding( padding: EdgeInsets.all(8.0), ), GestureDetector( child: new Text('Select from gallery'), onTap: openGallery, ), ], ), ), ); });}void openCamera() async { Navigator.of(context).pop(); var picture = await ImagePicker.pickImage( source: ImageSource.camera, ); setState(() { _picture = picture; });}void openGallery() async { Navigator.of(context).pop(); var gallery = await ImagePicker.pickImage( source: ImageSource.gallery, ); setState(() { _gallery = gallery; }); } camera： (高阶用法，打开相机，实时获取相机流，可以定制拍照、录像等按钮。可用于相机扫码、实时识别、直播等场景) https://pub.dartlang.org/packages/camera 12345678910111213141516171819202122232425262728293031323334353637383940414243camera: ^0.2.9import 'package:camera/camera.dart';class _CameraState extends State&lt;CameraWidget&gt; { List&lt;CameraDescription&gt; cameras; CameraController controller; bool _isReady = false; @override void initState() { super.initState(); _setupCameras(); } Future&lt;void&gt; _setupCameras() async { try { // initialize cameras. cameras = await availableCameras(); // initialize camera controllers. controller = new CameraController(cameras[0], ResolutionPreset.medium); await controller.initialize(); } on CameraException catch (_) { // do something on error. } if (!isMounted) return; setState(() { _isReady = true; }); } Widget build(BuildContext context) { if (!_isReady) return new Container(); return new Container( height: 200, child: AspectRatio( aspectRatio: controller.value.aspectRatio, child: CameraPreview(controller), ), ) }} video playerhttps://github.com/flutter/plugins/tree/master/packages/video_player 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556video_player: ^0.8.0import 'package:video_player/video_player.dart';VideoPlayerController _controller;bool _isPlaying = false;@overridevoid initState() {super.initState();_controller = VideoPlayerController.network( 'https://www.quirksmode.org/html5/videos/big_buck_bunny.mp4',) ..addListener(() { final bool isPlaying = _controller.value.isPlaying; if (isPlaying != _isPlaying) { setState(() { _isPlaying = isPlaying; }); } }) ..initialize().then((_) { // Ensure the first frame is shown after the video is initialized, even before the play button has been pressed. setState(() {}); });}@overridevoid dispose() { _controller?.dispose(); super.dispose();}// 显示、控制 _controller.value.initialized ? AspectRatio( aspectRatio: _controller.value.aspectRatio, child: new Container( padding: EdgeInsets.all(10), color: Colors.black, child: VideoPlayer(_controller), ), ) : Container( child: new Text('视频加载中~'), ), new FlatButton.icon( label: Text('播放/暂停'), icon: Icon( _controller.value.isPlaying ? Icons.pause : Icons.play_arrow, ), onPressed: _controller.value.isPlaying ? _controller.pause : _controller.play, ) AudioPlayerhttps://github.com/rxlabz/audioplayer Flutter的学习还在路上，列了个To Do List。继续加油：","link":"/2019/01/20/Flutter%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%E2%80%94%E2%80%94%E5%AE%9E%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/"},{"title":"NEM（新经币）公链对接","text":"首先祝Chrome十周年生快，升级后的69耳目一新，继续加油。前言通常，当某个交易所要上新币的时候，都会提前下发通知。如果仔细点就会发现，如果是ERC20 Token的话，交易所基本是“秒上”，而对于其他非以太坊公链的Token，交易所一般会提前半月至一月发上币通知。原因很简单，对于ERC20 Token，由于都是运行在以太坊公链上，所以有着共通的运行机制，对于不同的Token，通过调用geth节点的API只需传入不同的合约地址，就能执行不同Token的转账、查余额等等一系列合约方法。也就是说代码可以完全复用，交易所上币只是添加了一个新币的合约地址，就能和其他ERC20 Token共用一套代码。而对于非以太坊公链的Token，它们运行在其他完全不同的公链上。由于公链之间的开发语言、账户设计、Token设计、Token转账流程、共识机制等等都存在着天差地别，所以对这些公链上的Token进行操作，流程是不同于ERC20 Token的，也就是说代码不能与以太坊的复用。需要重新写一套适配该公链的程序，来完成对该公链上Token的发行、转账、查询等一些列操作。这就是为什么交易所在上非ERC20 Token时耗时较长的原因。本文记录对于NEM（新经币）的对接过程。新经币介绍维基百科介绍：新经币（New Economy Movement，缩写 NEM），是一种点对点虚拟货币。2015年初发布，其源代码由Java编写并100%属于原创。[1]NEM 广泛发布于人群中[2]，其块链采用了全新发明的基于重要性证明POI的同步解决方案。NEM特征也包括：完整的点对点安全系统加密信息系统和基于Eigentrust++算法的声望系统。[3]新经币NEM使用Java开发，且使用独创的POI（重要性证明机制），并且融合多重签名技术。单从这三点来看，NEM在技术和创新上，在各公链中属于上等马。NEM新经币的原生Token为XEM。市值在60~100亿之间浮动，排名在10~20名之间。新经币允许用户在其链上发型资产“mosaic”（翻译过来就是马赛克🌚），对标以太坊上发行的ERC20 Token。区别在于，发行的mosaic并不是以合约形式进行的，所以功能非常简单，不能像以太坊智能合约一样实现多样化的功能。它只具备Token的基础属性，即名称、发行量、精度。以及一些附加属性如发行量是否可修改、是否可转账、描述等。mosaic代币在链上的唯一标识为mosaic id，对标以太坊合约的合约地址。mosaic id由两部分组成：namespace + mosaic name。所以在创建一个新的mosaic前，需要先创建一个namespace，然后在该namespace下创建mosaic name。以pundix这个Token来说，它在NEM链上发行的mosaic的id为 pundix:npxs , 其中 pundix是它的namespace，npxs是其mosaic name。创建一个namespace需要花费100XEM，且全网唯一，不可重复。创建完namespace后，就可以在该namespace下创建mosaic，创建一个mosaic花费10XEM。所以在NEM链上发行一个mosaic代币共需要110XEM+交易手续费（约0.3XEM）。且namespace不得与已存在的重复，该namespace下创建的mosaic的名称也不得出现重复。NEM的账户地址分为测试网可主网。测试网地址以T开头，主网地址以N开头。（创建的时候可以挑NB开头的地址👍🏿）开发文档官网： https://nem.ioGitHub： https://github.com/NemProject文档： http://docs.nem.io/enNIS节点API文档： https://nemproject.github.io/NEM官方提供的API SDK比较全面，相当良心：Python https://github.com/semolex/nis-python-client Java https://github.com/NEMPH/nem-apps-lib https://github.com/rosklyar/nem-library C# https://github.com/NemProject/csharp2nem Typescript/Javascript http://nemlibrary.com Javascript https://github.com/QuantumMechanics/NEM-sdk https://www.npmjs.com/package/nem-api NodeJS https://github.com/NemProject/nodejs2nem Ruby https://github.com/44uk/nis-ruby PHP https://github.com/namuyan/NEM-Api-Library https://github.com/tomotomo9696/NEMTools_PHP https://github.com/evias/nem-php Go https://github.com/nem-toolchain/nem-toolchain NEM节点部署如果想在本地启动节点并加入到NEM网络当中，过程非常简单。在http://bob.nem.ninja/下载nis最新包之后，解压。nis目录下的config.properties是一些节点信息配置。可以根据需要修改。然后直接运行nix.runNis.sh即可启动节点。 ✘ ludis@Mac  ~/Downloads/package  ./nix.runNis.sh 2018-09-06 06:26:38.598 信息 NEM logging has been bootstrapped! (org.nem.deploy.g a) 2018-09-06 06:26:38.617 信息 Acquiring exclusive lock to lock file: /Users/ludis/nem/nis.lock (org.nem.deploy.CommonStarter tryAcquireLock) 2018-09-06 06:26:38.623 警告 no certificate found for (file:/Users/ludis/Downloads/package/nis/nem-deploy-0.6.95-BETA.jar &lt;no signer certificates&gt;) (org.nem.core.metadata.CodeSourceFacade &lt;init&gt;) 2018-09-06 06:26:38.626 信息 Analyzing meta data in &lt;nem-deploy-0.6.95-BETA.jar&gt; (org.nem.core.metadata.JarFacade &lt;init&gt;) 2018-09-06 06:26:38.636 信息 Meta data title &lt;NEM Deploy&gt;, version &lt;0.6.95-BETA&gt; (org.nem.core.metadata.JarFacade &lt;init&gt;) 2018-09-06 06:26:38.639 信息 Starting embedded Jetty Server. (org.nem.deploy.CommonStarter main) 2018-09-06 06:26:39.148 信息 Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@56ef9176: startup date [Thu Sep 06 14:26:39 CST 2018]; root of context hierarchy (org.springframework.context.annotation.AnnotationConfigApplicationContext prepareRefresh) 2018-09-06 06:26:40.751 信息 Loaded JDBC driver: org.h2.Driver (org.springframework.jdbc.datasource.DriverManagerDataSource setDriverClassName) 2018-09-06 06:26:41.394 信息 Database: jdbc:h2:/Users/ludis/nem/nis/data/nis5_mainnet (H2 1.3) (org.flywaydb.core.internal.dbsupport.DbSupportFactory info) 2018-09-06 06:26:41.553 信息 Current version of schema \"PUBLIC\": 1.0.7 (org.flywaydb.core.internal.command.DbMigrate info) 2018-09-06 06:26:41.555 信息 Schema \"PUBLIC\" is up to date. No migration necessary. (org.flywaydb.core.internal.command.DbMigrate info) 2018-09-06 06:26:41.834 INFO HCANN000001: Hibernate Commons Annotations {4.0.4.Final} (org.hibernate.annotations.common.reflection.java.JavaReflectionManager &lt;clinit&gt;) 2018-09-06 06:26:41.848 INFO HHH000412: Hibernate Core {4.3.0.Final} (org.hibernate.Version logVersion) 2018-09-06 06:26:41.853 INFO HHH000206: hibernate.properties not found (org.hibernate.cfg.Environment &lt;clinit&gt;) 2018-09-06 06:26:41.860 INFO HHH000021: Bytecode provider name : javassist (org.hibernate.cfg.Environment buildBytecodeProvider) 2018-09-06 06:26:42.398 INFO HHH000400: Using dialect: org.hibernate.dialect.H2Dialect (org.hibernate.dialect.Dialect &lt;init&gt;) 2018-09-06 06:26:42.782 INFO HHH000399: Using default transaction strategy (direct JDBC transactions) (org.hibernate.engine.transaction.internal.TransactionFactoryInitiator initiateService) 2018-09-06 06:26:42.791 INFO HHH000397: Using ASTQueryTranslatorFactory (org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory &lt;init&gt;) 2018-09-06 06:26:42.898 INFO HV000001: Hibernate Validator 5.0.2.Final (org.hibernate.validator.internal.util.Version &lt;clinit&gt;) 2018-09-06 06:26:45.175 信息 Using DataSource [org.springframework.jdbc.datasource.DriverManagerDataSource@5792c08c] of Hibernate SessionFactory for HibernateTransactionManager (org.springframework.orm.hibernate4.HibernateTransactionManager afterPropertiesSet) 2018-09-06 06:26:45.239 警告 context ================== current: 108627620 (org.nem.nis.NisMain init) …… …… 2018-09-06 14:26:51.640:INFO:oejsh.ContextHandler:main: Started o.e.j.s.ServletContextHandler@38c460e8{/,null,AVAILABLE}2018-09-06 14:26:51.640:INFO:oejs.ServerConnector:main: Started ServerConnector@7a814310{HTTP/1.1}{0.0.0.0:7890}2018-09-06 14:26:51.644:INFO:oejs.Server:main: Started @14689ms2018-09-06 06:26:51.644 信息 NEM Deploy is ready to serve. URL is “http://192.168.128.10:7890/&quot;. (org.nem.deploy.CommonStarter a)2018-09-06 06:26:51.651 信息 loadBlocks (from height 2802 to height 2901) needed 40ms (org.nem.nis.dao.BlockDaoImpl d)2018-09-06 06:26:51.717 信息 loadBlocks (from height 2902 to height 3001) needed 28ms (org.nem.nis.dao.BlockDaoImpl d)2018-09-06 06:26:51.762 信息 loadBlocks (from height 3002 to height 3101) needed 27ms (org.nem.nis.dao.BlockDaoImpl d)2018-09-06 06:26:51.811 信息 loadBlocks (from height 3102 to height 3201) needed 25ms (org.nem.nis.dao.BlockDaoImpl d)2018-09-06 06:26:51.855 信息 loadBlocks (from height 3202 to height 3301) needed 25ms (org.nem.nis.dao.BlockDaoImpl d)2018-09-06 06:26:51.911 信息 loadBlocks (from height 3302 to height 3401) needed 28ms (org.nem.nis.dao.BlockDaoImpl d)2018-09-06 06:26:51.958 信息 loadBlocks (from height 3402 to height 3501) needed 30ms (org.nem.nis.dao.BlockDaoImpl d)2018-09-06 06:26:52.004 信息 loadBlocks (from height 3502 to height 3601) needed 27ms (org.nem.nis.dao.BlockDaoImpl d)2018-09-06 06:26:52.063 信息 loadBlocks (from height 3602 to height 3701) needed 24ms (org.nem.nis.dao.BlockDaoImpl d)……这样本地的NIS节点就启动且连接到NEM网络了。可以对照文档进行各种功能测试。区块链浏览器主网http://explorer.nemchina.comhttp://chain.nem.ninja测试网http://bob.nem.ninja:8765nem faucet测试时一些Token是必须的，但nem水龙头是真的不好找啊，能搜到的一些基本都停用了。。且用且珍惜。https://xarleecm.com/en/nemfaucet提示：使用这个水龙头申请Token时，需要先用该页面的插件挖矿几分钟后，才可以申请🤔，有点意思哈。没有免费的午餐么，大夏天的，我这air风扇转的那叫一个欢乐。风扇转完点提交，一般几个小时内就会把Token发到你的账户，可以去浏览器查询。每小时最多申请100XEM，我申请了10个却意外地得到了500个，果然是个看脸的时代😏。因为创建mosaic需要110+的NEM，所以最好申请多点。转账这里使用node sdk，直接将XEM及mosaic转账及余额查询封装起来。需要的可以直接拿去用，转账的具体流程也写的比较清楚，可以参考注释和文档理解。/** nem及mosaic发送交易封装 / const nem = require(“nem-sdk”).default;const config = require(‘./nem_config’)const logger = require(‘./logger’); /** 创建 endpoint 对象（节点信息） host string An NIS uri port string An NIS port /const endpoint = nem.model.objects.create(“endpoint”)(config.endpointHost, config.endpointPort)logger.info(‘endpoint’, endpoint) /** 创建 common 对象 （账户信息） password string A password privateKey string A private key /const common = nem.model.objects.create(“common”)(config.password, config.privatekey)// console.log(‘common’, common) init() /** nem及mosaic转账入口 /const doNemTransaction = (req, callback) =&gt; { let { name, address: recipient, value: amount } = req.body let option = { name: name, recipient: recipient, amount: amount } logger.info(‘option’, option) // mosaic Token转账时，transferTransaction amount代表：要执行后续定义的mosaicAttachment的次数！！！ // 而非代表nem的金额，此处与eth Token转账完全不同。为0时转账会成功，但mosaic不会到账~~ if (name == ‘NEM’) { amount /= Math.pow(10, 6) option.amount = amount } else { amount = 1 } /** 创建 transferTransaction 对象（交易信息） recipient string A recipient address amount number An amount message string A message to join /option.transferTransaction = nem.model.objects.create(“transferTransaction”)(recipient, amount, config.message);logger.info(‘transferTransaction:’, option.transferTransaction) if (name == ‘NEM’) transferNem(option, callback) else transferMosaic(option, callback)} /** 转账nem /const transferNem = (option, callback) =&gt; { /** 签名/打包交易信息 common object A common object tx object A transferTransaction object network number A network id /const transactionEntity = nem.model.transactions.prepare(“transferTransaction”)(common, option.transferTransaction, config.networkId)logger.info(‘transactionEntity:’, transactionEntity) /** 计算nem交易手续费 0.05 XEM per 10,000 XEM transferred, capped at 1.25 XEM Example: 0.20 XEM fee for a 45,000 XEM transfer, 1.25 XEM fee for a 500,000 XEM transfer. /if (option.amount &gt; 500000) return callback(new Error(‘转账nem不得超过500000’), null)let nemFee = Math.floor(option.amount / 10000) * 0.05nemFee = nemFee &lt; 0.05 ? 0.05 : nemFeenemFee = nemFee &gt; 1.25 ? 1.25 : nemFee /** 计算message fee message fee. 0.05 XEM per commenced 32 bytes If the message is empty, the fee will be 0 @param {object} message - An message object @param {boolean} isHW - True if hardware wallet, false otherwise @return {number} - The message fee /let messageFee = nem.model.fees.calculateMessage(transactionEntity.message, false) let totalFee = nemFee + messageFee totalFee = totalFee * Math.pow(10, 6) logger.info(‘nemFee:’, nemFee, ‘messageFee’, messageFee, ‘totalFee’, totalFee) transactionEntity.fee = totalFee /** 发送交易（广播交易） common object A common object entity object A prepared transaction object endpoint object An endpoint object / // Serialize transfer transaction and announce nem.model.transactions.send(common, transactionEntity, endpoint) .then(function (res) { logger.info(&quot;交易详情：&quot;, res) //callback(null, res) if (res &amp;amp;&amp;amp; res.message == 'SUCCESS') callback(null, res) else callback(new Error(res.message), null) }) .catch(error =&amp;gt; { logger.error('交易失败：', error) callback(error, null) }); } /** 转账mosaic Token /const transferMosaic = async (option, callback) =&gt; { const mosaicData = config.mosaicDefinitions[option.name] if (!mosaicData) return callback(new Error(‘不支持该币种’), null) const { namespaceId, name: mosaicName } = mosaicData.mosaic.id // mosaic需转换单位 let divisibility mosaicData.mosaic.properties.forEach(item =&gt; { if (item.name == 'divisibility') divisibility = item.value }) if (!divisibility) return callback(new Error(‘divisibility not found’), null) //blockchain.server 发送转账请求时已经将进制转换，不需要进行二次转换 //option.amount *= Math.pow(10, divisibility) /** 创建 mosaicDefinitionMetaDataPair 对象 Create variable to store our mosaic definitions, needed to calculate fees properly (already contains xem definition) doc: https://nemproject.github.io/#mosaicDefinitionMetaDataPair /const mosaicDefinitionMetaDataPair = nem.model.objects.get(“mosaicDefinitionMetaDataPair”);logger.info(‘mosaicDefinitionMetaDataPair’, mosaicDefinitionMetaDataPair) /** 创建 mosaic 对象（mosaic是nem上的Token，类比Erc20 Token） namespaceId string A namespace name mosaicName string A mosaic name quantity long number A quantity in micro-units（根据divisibility转换为micro-units，npxsxem: 1000000 = 1 ） doc: https://nemproject.github.io/#retrieving-mosaic-definitions /var mosaicAttachment = nem.model.objects.create(“mosaicAttachment”)(namespaceId, mosaicName, option.amount);logger.info(‘mosaicAttachment’, mosaicAttachment) // Push attachment into transaction mosaics option.transferTransaction.mosaics.push(mosaicAttachment); logger.info(‘transferTransaction’, option.transferTransaction) // 可通过接口实时获取mosaic属性 nem.com.requests.namespace.mosaicDefinitions(endpoint, mosaicAttachment.mosaicId.namespaceId) // 当前mosaic较少，事先通过接口获取后写在配置文件 mosaicDefinitionMetaDataPair[mosaicData.fullMosaicName] = {}; mosaicDefinitionMetaDataPair[mosaicData.fullMosaicName].mosaicDefinition = mosaicData.mosaic; // nem mosaic 转账bug: supply为空，导致calculateMosaics返回NaN // https://github.com/QuantumMechanics/NEM-sdk/issues/36 // https://qiita.com/xiaca/items/9fa40061cd4977b13147 let res = await nem.com.requests.mosaic.supply(endpoint, mosaicData.fullMosaicName) mosaicDefinitionMetaDataPair[mosaicData.fullMosaicName].supply = res.supply; /** * 签名/打包交易信息 * common object A common object * tx object A transferTransaction object * mosaicDefinitionMetaDataPair object A mosaicDefinitionMetaDataPair object * network number A network id */ let transactionEntity = nem.model.transactions.prepare(&quot;mosaicTransferTransaction&quot;)(common, option.transferTransaction, mosaicDefinitionMetaDataPair, config.networkId); logger.info('transactionEntity', transactionEntity) /** * 计算mosaic交易手续费 * https://nemproject.github.io/#transaction-fees * @param {number} multiplier - A quantity multiplier * @param {object} mosaics - A mosaicDefinitionMetaDataPair object * @param {array} attachedMosaics - An array of mosaics to send * @return {number} - The fee amount for the mosaics in the transaction */ let mosaicsFee = nem.model.fees.calculateMosaics(1000000, mosaicDefinitionMetaDataPair, option.transferTransaction.mosaics) /** * 计算message fee * message fee. 0.05 XEM per commenced 32 bytes * If the message is empty, the fee will be 0 * @param {object} message - An message object * @param {boolean} isHW - True if hardware wallet, false otherwise * @return {number} - The message fee */ let messageFee = nem.model.fees.calculateMessage(transactionEntity.message, false) let totalFee = mosaicsFee + messageFee totalFee = totalFee * Math.pow(10, 6) logger.info('mosaicsFee:', mosaicsFee, 'messageFee', messageFee, 'totalFee', totalFee) transactionEntity.fee = totalFee // transactionEntity.fee = 1000000 logger.info('transactionEntity', transactionEntity) // Serialize transfer transaction and announce nem.model.transactions.send(common, transactionEntity, endpoint) .then(function (res) { logger.info(&quot;交易详情：&quot;, res) //callback(null, res.transactionHash.data) if (res &amp;amp;&amp;amp; res.message == 'SUCCESS') callback(null, res.transactionHash.data) else callback(new Error(res.message), null) }) .catch(error =&amp;gt; { logger.error('交易失败：', error) callback(error, null) }); /* // 通过接口实时获取mosaic信息，有levy属性的需要根据levy增加nem amount nem.com.requests.namespace.mosaicDefinitions(endpoint, mosaicAttachment.mosaicId.namespaceId).then(function(res) { // Look for the mosaic definition(s) we want in the request response var neededDefinition = nem.utils.helpers.searchMosaicDefinitionArray(res.data, [&quot;nem&quot;]); console.log('neededDefinition', neededDefinition) // Get full name of mosaic to use as object key var fullMosaicName = nem.utils.format.mosaicIdToName(mosaicAttachment.mosaicId); // Check if the mosaic was found if(undefined === neededDefinition[fullMosaicName]) return console.error(&quot;Mosaic not found !&quot;); // Set eur mosaic definition into mosaicDefinitionMetaDataPair mosaicDefinitionMetaDataPair[fullMosaicName] = {}; mosaicDefinitionMetaDataPair[fullMosaicName].mosaicDefinition = neededDefinition[fullMosaicName]; // Prepare the transfer transaction object var transactionEntity = nem.model.transactions.prepare(&quot;mosaicTransferTransaction&quot;)(common, option.transferTransaction, mosaicDefinitionMetaDataPair, config.networkId); transactionEntity.fee = 1000000 // Serialize transfer transaction and announce nem.model.transactions.send(common, transactionEntity, endpoint) .then(function (res) { console.log(&quot;交易详情：&quot;, res) callback(null, res) }) .catch(error =&amp;gt; { console.log('交易失败：', error) callback(error, null) }); }, function(err) { console.error(err); }); */ } /** 获取账户余额 /const getNemBalance = (req, callback) =&gt; { let { coin: name, address } = req.query address = address ? address : config.adminAddress let namespaceId, mosaicName let balance = 0 if (name == ‘NEM’) { namespaceId = 'nem' mosaicName = 'xem' } else { if (!config.mosaicDefinitions[name]) return callback(new Error('不支持该mosaic'), null) let mosaicData = config.mosaicDefinitions[name].mosaic.id namespaceId = mosaicData.namespaceId mosaicName = mosaicData.name } // http://192.3.61.243:7890/account/get?address=TCKUVV6PETWYVUBGTWRCLUROJOJVPY4JZXNRSDKT // http://192.3.61.243:7890/account/mosaic/owned?address=TCKUVV6PETWYVUBGTWRCLUROJOJVPY4JZXNRSDKT nem.com.requests.account.mosaics.owned(endpoint, address).then(result =&gt; { result.data.forEach(mosaic =&amp;gt; { if (mosaic.mosaicId.namespaceId == namespaceId &amp;amp;&amp;amp; mosaic.mosaicId.name == mosaicName) balance = mosaic.quantity }) logger.info('get mosaics owned', JSON.stringify(result)) callback(null, String(balance)) }).catch(error =&gt; { logger.error('get balance error', error) callback(error, null) })} module.exports = { doNemTransaction: doNemTransaction, getNemBalance: getNemBalance}进行测试const nem = require('./nem') // test nem transferconst testNemTransfer = () =&gt; { let req = {} req.body = { name: ‘NEM’, address: ‘TCKUVV6PETWYVUBGTWRCLUROJOJVPY4JZXNRSDKT’, value: 8729700 } nem.doNemTransaction(req, (error, res) =&gt; { console.log(‘doNemTransaction nem’, error, res) })}// test mosaic transferconst testMosaicTransfer = () =&gt; { let req = {} req.body = { name: ‘NPXSXEM’, address: ‘TCKUVV6PETWYVUBGTWRCLUROJOJVPY4JZXNRSDKT’, value: 548250000 } nem.doNemTransaction(req, (error, res) =&gt; { console.log(‘doNemTransaction mosaic’, error, res) })}// test get balanceconst testGetBalance = () =&gt; { let req = {} req.query = { /* coin: ‘NEM’, address: ‘TCKUVV6PETWYVUBGTWRCLUROJOJVPY4JZXNRSDKT’ */ coin: ‘NPXSXEM’, address: ‘TDV75PQWM2RYWVDM6JAFSPNXR44U63B3I4HQOR6A’ } nem.getNemBalance(req, (error, res) =&gt; { console.log(‘getNemBalance’, error, res) })} testNemTransfer()testMosaicTransfer()testGetBalance()其它账户多签也是NEM的一个重要功能。直白说就是，一个钱包由多个人共同管理，只有超多一半的人签名同意后才可以转账，多签可以将多个账户分散存储，加强资产的安全性。多签的实现和转账流程与上述的略有差别，感兴趣的可以自行研究。NEM的对开发者来说算是比较友好，完善的文档（细节可以更加完善），多语言的SDK。缺点就是基础设施有点差，比如移动端的钱包，比较鸡肋。而且中文社区较少，中文的开发资料非常少。","link":"/2018/09/06/NEM%EF%BC%88%E6%96%B0%E7%BB%8F%E5%B8%81%EF%BC%89%E5%85%AC%E9%93%BE%E5%AF%B9%E6%8E%A5/"},{"title":"移动前端html5 head 头标签详解","text":"移动端的工作已经越来越成为前端工作的重要内容，除了平常的项目开发，HTML 头部标签功能，特别是meta标签显得非常重要。 DOCTYPEDOCTYPE(Document Type)，该声明位于文档中最前面的位置，处于 html 标签之前，此标签告知浏览器文档使用哪种 HTML 或者 XHTML 规范。 使用 HTML5 doctype，不区分大小写。 [html]&lt;!– 使用 HTML5 doctype，不区分大小写 –&gt;[/html] charset声明文档使用的字符编码， [html]&lt;metacharset=”utf-8”&gt;[/html] html5 之前网页中会这样写： [html]&lt;metahttp-equiv=”Content-Type”content=”text/html; charset=utf-8”&gt;[/html] 这两个是等效的，所以建议使用较短的，易于记忆。 lang属性更加标准的 lang 属性写法 http://zhi.hu/XyIa 简体中文 [html]&lt;htmllang=”zh-cmn-Hans”&gt;&lt;!– 更加标准的 lang 属性写法 http://zhi.hu/XyIa –&gt;[/html] 繁体中文 [html]&lt;htmllang=”zh-cmn-Hant”&gt;&lt;!– 更加标准的 lang 属性写法 http://zhi.hu/XyIa –&gt;[/html] 很少情况才需要加地区代码，通常是为了强调不同地区汉语使用差异，例如： [html]&lt;plang=”zh-cmn-Hans”&gt; &lt;stronglang=”zh-cmn-Hans-CN”&gt;菠萝和&lt;stronglang=”zh-cmn-Hant-TW”&gt;鳳梨其实是同一种水果。只是大陆和台湾称谓不同，且新加坡、马来西亚一带的称谓也是不同的，称之为&lt;stronglang=”zh-cmn-Hans-SG”&gt;黄梨。 [/html] 为什么 lang=&quot;zh-cmn-Hans&quot; 而不是我们通常写的 lang=&quot;zh-CN&quot; 呢，请移步阅读: 页头部的声明应该是用 lang=”zh” 还是 lang=”zh-cn”。 优先使用 IE 最新版本和 Chrome [html]&lt;metahttp-equiv=”X-UA-Compatible”content=”IE=edge,chrome=1”/&gt;[/html] 360 使用Google Chrome Frame [html]&lt;metaname=”renderer”content=”webkit”&gt;[/html] 360 浏览器就会在读取到这个标签后，立即切换对应的极速核。 另外为了保险起见再加入 [html]&lt;metahttp-equiv=”X-UA-Compatible”content=”IE=Edge,chrome=1”&gt;[/html] 这样写可以达到的效果是如果安装了 Google Chrome Frame，则使用 GCF 来渲染页面，如果没有安装 GCF，则使用最高版本的 IE 内核进行渲染。 相关链接：浏览器内核控制 Meta 标签说明文档 百度禁止转码 通过百度手机打开网页时，百度可能会对你的网页进行转码，脱下你的衣服，往你的身上贴狗皮膏药的广告，为此可在 head 内添加 [html]&lt;metahttp-equiv=”Cache-Control”content=”no-siteapp”/&gt;[/html] 相关链接：SiteApp 转码声明 SEO 优化部分 页面标题&lt;title&gt;标签(head 头部必须) [html]your title[/html] 页面关键词 keywords [html]&lt;metaname=”keywords”content=”your keywords”&gt;[/html] 页面描述内容 description [html]&lt;metaname=”description”content=”your description”&gt;[/html] 定义网页作者 author [html]&lt;metaname=”author”content=”author,email address”&gt;[/html] 定义网页搜索引擎索引方式，robotterms 是一组使用英文逗号「,」分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。 [html]&lt;metaname=”robots”content=”index,follow”&gt;[/html] 相关链接：WEB1038 – 标记包含无效的值 为移动设备添加 viewport viewport 可以让布局在移动浏览器上显示的更好。 通常会写 [html]&lt;metaname=”viewport”content=”initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no”&gt;&lt;!– width=device-width 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz –&gt;[/html] width=device-width 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边(http://bigc.at/ios-webapp-viewport-meta.orz) content 参数： width viewport 宽度(数值/device-width) height viewport 高度(数值/device-height) initial-scale 初始缩放比例 maximum-scale 最大缩放比例 minimum-scale 最小缩放比例 user-scalable 是否允许用户缩放(yes/no) minimal-ui iOS 7.1 beta 2 中新增属性（注意：iOS8 中已经删除），可以在页面加载时最小化上下状态栏。这是一个布尔值，可以直接这样写： &lt;metaname=”viewport”content=”width=device-width, initial-scale=1, minimal-ui”&gt; 而如果你的网站不是响应式的，请不要使用 initial-scale 或者禁用缩放。 [html]&lt;metaname=”viewport”content=”width=device-width,user-scalable=yes”&gt;[/html] 相关链接：非响应式设计的viewport 适配 iPhone 6 和 iPhone 6plus 则需要写： [html]&lt;metaname=”viewport”content=”width=375”&gt;[/html] [html]&lt;metaname=”viewport”content=”width=414”&gt;[/html] 大部分 4.7~5 寸的安卓设备的 viewport 宽设为 360px，iPhone 6 上却是 375px，大部分 5.5 寸安卓机器（比如说三星 Note）的 viewport 宽为 400，iPhone 6 plus 上是 414px。 ios 设备添加到主屏后的标题（iOS 6 新增） [html]&lt;metaname=”apple-mobile-web-app-title”content=”标题”&gt;&lt;!– 添加到主屏后的标题（iOS 6 新增） –&gt;[/html] 是否启用 WebApp 全屏模式 [html]&lt;metaname=”apple-mobile-web-app-capable”content=”yes”/&gt;&lt;!– 是否启用 WebApp 全屏模式 –&gt;[/html] 设置状态栏的背景颜色 [/html]&lt;metaname=”apple-mobile-web-app-status-bar-style”content=”black-translucent”/&gt;&lt;!– 设置状态栏的背景颜色，只有在 ”apple-mobile-web-app-capable” content=”yes” 时生效 –&gt;[/html] 只有在 “apple-mobile-web-app-capable” content=”yes” 时生效 content 参数： default 默认值。 black 状态栏背景是黑色。 black-translucent 状态栏背景是黑色半透明。 如果设置为 default 或 black ,网页内容从状态栏底部开始。 如果设置为 black-translucent ,网页内容充满整个屏幕，顶部会被状态栏遮挡。 禁止数字识自动别为电话号码 [html]&lt;metaname=”format-detection”content=”telephone=no”/&gt;&lt;!– 禁止数字识自动别为电话号码 –&gt;[/html] iOS 图标rel 参数： apple-touch-icon 图片自动处理成圆角和高光等效果。 apple-touch-icon-precomposed 禁止系统自动添加效果，直接显示设计原图。 iPhone 和 iTouch，默认 57×57 像素，必须有 [html]&lt;linkrel=”apple-touch-icon-precomposed”href=”/apple-touch-icon-57×57-precomposed.png”/&gt;&lt;!– iPhone 和 iTouch，默认 57×57 像素，必须有 –&gt;[/html] iPad，72×72 像素，可以没有，但推荐有 [html]&lt;linkrel=”apple-touch-icon-precomposed”sizes=”72×72”href=”/apple-touch-icon-72×72-precomposed.png”/&gt;&lt;!– iPad，72×72 像素，可以没有，但推荐有 –&gt;[/html] Retina iPhone 和 Retina iTouch，114×114 像素，可以没有，但推荐有 [html]&lt;linkrel=”apple-touch-icon-precomposed”sizes=”114×114”href=”/apple-touch-icon-114×114-precomposed.png”/&gt;&lt;!– Retina iPhone 和 Retina iTouch，114×114 像素，可以没有，但推荐有 –&gt;[/html] Retina iPad，144×144 像素，可以没有，但推荐有 [html]&lt;linkrel=”apple-touch-icon-precomposed”sizes=”144×144”href=”/apple-touch-icon-144×144-precomposed.png”/&gt;&lt;!– Retina iPad，144×144 像素，可以没有，但推荐有 –&gt;[/html] IOS 图标大小在iPhone 6 plus上是180×180，iPhone 6 是120×120。 适配iPhone 6 plus，则需要在中加上这段 [html]&lt;linkrel=”apple-touch-icon-precomposed”sizes=”180×180”href=”retinahd_icon.png”&gt;[/html] iOS 启动画面官方文档：https://developer.apple.com/library/ios/qa/qa1686/_index.html 参考文章：http://wxd.ctrip.com/blog/2013/09/ios7-hig-24/ iPad 的启动画面是不包括状态栏区域的。 iPad 竖屏 768 x 1004（标准分辨率） [html]&lt;linkrel=”apple-touch-startup-image”sizes=”768×1004”href=”/splash-screen-768×1004.png”/&gt;&lt;!– iPad 竖屏 768 x 1004（标准分辨率） –&gt;[/html] iPad 竖屏 1536×2008（Retina） [html]&lt;linkrel=”apple-touch-startup-image”sizes=”1536×2008”href=”/splash-screen-1536×2008.png”/&gt;&lt;!– iPad 竖屏 1536×2008（Retina） –&gt;[/html] iPad 横屏 1024×748（标准分辨率） [html]&lt;linkrel=”apple-touch-startup-image”sizes=”1024×748”href=”/Default-Portrait-1024×748.png”/&gt;&lt;!– iPad 横屏 1024×748（标准分辨率） –&gt;[/html] iPad 横屏 2048×1496（Retina） [html]&lt;linkrel=”apple-touch-startup-image”sizes=”2048×1496”href=”/splash-screen-2048×1496.png”/&gt;&lt;!– iPad 横屏 2048×1496（Retina） –&gt;[/html] iPhone 和 iPod touch 的启动画面是包含状态栏区域的。 iPhone/iPod Touch 竖屏 320×480 (标准分辨率) [html]&lt;linkrel=”apple-touch-startup-image”href=”/splash-screen-320×480.png”/&gt;&lt;!– iPhone/iPod Touch 竖屏 320×480 (标准分辨率) –&gt;[/html] iPhone/iPod Touch 竖屏 640×960 (Retina) [html]&lt;linkrel=”apple-touch-startup-image”sizes=”640×960”href=”/splash-screen-640×960.png”/&gt;&lt;!– iPhone/iPod Touch 竖屏 640×960 (Retina) –&gt;[/html] iPhone 5/iPod Touch 5 竖屏 640×1136 (Retina) [html]&lt;linkrel=”apple-touch-startup-image”sizes=”640×1136”href=”/splash-screen-640×1136.png”/&gt;&lt;!– iPhone 5/iPod Touch 5 竖屏 640×1136 (Retina) –&gt;[/html] 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） [html]&lt;metaname=”apple-itunes-app”content=”app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL”&gt;&lt;!– 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） –&gt;[/html] iPhone 6对应的图片大小是750×1294，iPhone 6 Plus 对应的是1242×2148 。 [html]&lt;linkrel=”apple-touch-startup-image”href=”launch6.png”media=”(device-width: 375px)”&gt; &lt;linkrel=”apple-touch-startup-image”href=”launch6plus.png”media=”(device-width: 414px)”&gt;[/html] AndroidAndroid Lollipop 中的 Chrome 39 增加 theme-color meta 标签，用来控制选项卡颜色。 http://updates.html5rocks.com/2014/11/Support-for-theme-color-in-Chrome-39-for-Android [html]&lt;metaname=”theme-color”content=”#db5945”&gt;[/html] Windows 8Windows 8 磁贴颜色 [html]&lt;metaname=”msapplication-TileColor”content=”#000”/&gt;&lt;!– Windows 8 磁贴颜色 –&gt;[/html] Windows 8 磁贴图标 [html]&lt;metaname=”msapplication-TileImage”content=”icon.png”/&gt;&lt;!– Windows 8 磁贴图标 –&gt;[/html] rss订阅[html]&lt;linkrel=”alternate”type=”application/rss+xml”title=”RSS”href=”/rss.xml”/&gt;&lt;!– 添加 RSS 订阅 –&gt;[/html] favicon icon[html]&lt;linkrel=”shortcut icon”type=”image/ico”href=”/favicon.ico”/&gt;&lt;!– 添加 favicon icon –&gt;[/html] 比较详细的 favicon 介绍可参考https://github.com/audreyr/favicon-cheat-sheet 移动端的头部标签和meta[html]&lt;!– 使用 HTML5 doctype，不区分大小写 –&gt; &lt;htmllang=”zh-cmn-Hans”&gt;&lt;!– 更加标准的 lang 属性写法 http://zhi.hu/XyIa –&gt; &lt;!– 声明文档使用的字符编码 –&gt; &lt;metacharset=’utf-8′&gt; &lt;!– 优先使用 IE 最新版本和 Chrome –&gt; &lt;metahttp-equiv=”X-UA-Compatible”content=”IE=edge,chrome=1”/&gt; &lt;!– 页面描述 –&gt; &lt;metaname=”description”content=”不超过150个字符”/&gt; &lt;!– 页面关键词 –&gt; &lt;metaname=”keywords”content=””/&gt; &lt;!– 网页作者 –&gt; &lt;metaname=”author”content=”name, email@gmail.com“/&gt; &lt;!– 搜索引擎抓取 –&gt; &lt;metaname=”robots”content=”index,follow”/&gt; &lt;!– 为移动设备添加 viewport –&gt; &lt;metaname=”viewport”content=”initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no”&gt; &lt;!– width=device-width 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz –&gt; &lt;!– iOS 设备 begin –&gt; &lt;metaname=”apple-mobile-web-app-title”content=”标题”&gt; &lt;!– 添加到主屏后的标题（iOS 6 新增） –&gt; &lt;metaname=”apple-mobile-web-app-capable”content=”yes”/&gt; &lt;!– 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 –&gt; &lt;metaname=”apple-itunes-app”content=”app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL”&gt; &lt;!– 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） –&gt; &lt;metaname=”apple-mobile-web-app-status-bar-style”content=”black”/&gt; &lt;!– 设置苹果工具栏颜色 –&gt; &lt;metaname=”format-detection”content=”telphone=no, email=no”/&gt; &lt;!– 忽略页面中的数字识别为电话，忽略email识别 –&gt; &lt;!– 启用360浏览器的极速模式(webkit) –&gt; &lt;metaname=”renderer”content=”webkit”&gt; &lt;!– 避免IE使用兼容模式 –&gt; &lt;metahttp-equiv=”X-UA-Compatible”content=”IE=edge”&gt; &lt;!– 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 –&gt; &lt;metaname=”HandheldFriendly”content=”true”&gt; &lt;!– 微软的老式浏览器 –&gt; &lt;metaname=”MobileOptimized”content=”320”&gt; &lt;!– uc强制竖屏 –&gt; &lt;metaname=”screen-orientation”content=”portrait”&gt; &lt;!– QQ强制竖屏 –&gt; &lt;metaname=”x5-orientation”content=”portrait”&gt; &lt;!– UC强制全屏 –&gt; &lt;metaname=”full-screen”content=”yes”&gt; &lt;!– QQ强制全屏 –&gt; &lt;metaname=”x5-fullscreen”content=”true”&gt; &lt;!– UC应用模式 –&gt; &lt;metaname=”browsermode”content=”application”&gt; &lt;!– QQ应用模式 –&gt; &lt;metaname=”x5-page-mode”content=”app”&gt; &lt;!– windows phone 点击无高光 –&gt; &lt;metaname=”msapplication-tap-highlight”content=”no”&gt; &lt;!– iOS 图标 begin –&gt; &lt;linkrel=”apple-touch-icon-precomposed”href=”/apple-touch-icon-57×57-precomposed.png”/&gt; &lt;!– iPhone 和 iTouch，默认 57×57 像素，必须有 –&gt; &lt;linkrel=”apple-touch-icon-precomposed”sizes=”114×114”href=”/apple-touch-icon-114×114-precomposed.png”/&gt; &lt;!– Retina iPhone 和 Retina iTouch，114×114 像素，可以没有，但推荐有 –&gt; &lt;linkrel=”apple-touch-icon-precomposed”sizes=”144×144”href=”/apple-touch-icon-144×144-precomposed.png”/&gt; &lt;!– Retina iPad，144×144 像素，可以没有，但推荐有 –&gt; &lt;!– iOS 图标 end –&gt; &lt;!– iOS 启动画面 begin –&gt; &lt;linkrel=”apple-touch-startup-image”sizes=”768×1004”href=”/splash-screen-768×1004.png”/&gt; &lt;!– iPad 竖屏 768 x 1004（标准分辨率） –&gt; &lt;linkrel=”apple-touch-startup-image”sizes=”1536×2008”href=”/splash-screen-1536×2008.png”/&gt; &lt;!– iPad 竖屏 1536×2008（Retina） –&gt; &lt;linkrel=”apple-touch-startup-image”sizes=”1024×748”href=”/Default-Portrait-1024×748.png”/&gt; &lt;!– iPad 横屏 1024×748（标准分辨率） –&gt; &lt;linkrel=”apple-touch-startup-image”sizes=”2048×1496”href=”/splash-screen-2048×1496.png”/&gt; &lt;!– iPad 横屏 2048×1496（Retina） –&gt; &lt;linkrel=”apple-touch-startup-image”href=”/splash-screen-320×480.png”/&gt; &lt;!– iPhone/iPod Touch 竖屏 320×480 (标准分辨率) –&gt; &lt;linkrel=”apple-touch-startup-image”sizes=”640×960”href=”/splash-screen-640×960.png”/&gt; &lt;!– iPhone/iPod Touch 竖屏 640×960 (Retina) –&gt; &lt;linkrel=”apple-touch-startup-image”sizes=”640×1136”href=”/splash-screen-640×1136.png”/&gt; &lt;!– iPhone 5/iPod Touch 5 竖屏 640×1136 (Retina) –&gt; &lt;!– iOS 启动画面 end –&gt; &lt;!– iOS 设备 end –&gt; &lt;metaname=”msapplication-TileColor”content=”#000”/&gt; &lt;!– Windows 8 磁贴颜色 –&gt; &lt;metaname=”msapplication-TileImage”content=”icon.png”/&gt; &lt;!– Windows 8 磁贴图标 –&gt; &lt;linkrel=”alternate”type=”application/rss+xml”title=”RSS”href=”/rss.xml”/&gt; &lt;!– 添加 RSS 订阅 –&gt; &lt;linkrel=”shortcut icon”type=”image/ico”href=”/favicon.ico”/&gt; &lt;!– 添加 favicon icon –&gt; 标题 [/html] 更多的 meta 标签参考 COMPLETE LIST OF HTML META TAGS 18 Meta Tags Every Webpage Should Have in 2013 参考文章： 常用的 HTML 头部标签 html5_header amazeui css DOCTYPE WEB 工程师和设计师必学的 10 个 IOS 8 新鲜改变","link":"/2015/01/18/%E7%A7%BB%E5%8A%A8%E5%89%8D%E7%AB%AFhtml5-head-%E5%A4%B4%E6%A0%87%E7%AD%BE%E8%AF%A6%E8%A7%A3/"}],"tags":[{"name":"nodejs","slug":"nodejs","link":"/tags/nodejs/"},{"name":"爬虫","slug":"爬虫","link":"/tags/%E7%88%AC%E8%99%AB/"},{"name":"随笔","slug":"随笔","link":"/tags/%E9%9A%8F%E7%AC%94/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"Flutter","slug":"Flutter","link":"/tags/Flutter/"},{"name":"Ghost","slug":"Ghost","link":"/tags/Ghost/"},{"name":"H5","slug":"H5","link":"/tags/H5/"},{"name":"HTTPS","slug":"HTTPS","link":"/tags/HTTPS/"},{"name":"React Native","slug":"React-Native","link":"/tags/React-Native/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"Sublime","slug":"Sublime","link":"/tags/Sublime/"},{"name":"Mac","slug":"Mac","link":"/tags/Mac/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"jQuery","slug":"jQuery","link":"/tags/jQuery/"},{"name":"美食","slug":"美食","link":"/tags/%E7%BE%8E%E9%A3%9F/"},{"name":"电视剧","slug":"电视剧","link":"/tags/%E7%94%B5%E8%A7%86%E5%89%A7/"}],"categories":[]}